
EFG_LPWR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08006018  08006018  00016018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006164  08006164  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006164  08006164  00016164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800616c  0800616c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800616c  0800616c  0001616c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006170  08006170  00016170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000060  080061d4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  080061d4  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010831  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025ae  00000000  00000000  000308fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  00032eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9b  00000000  00000000  00033da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012d5e  00000000  00000000  0003493b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e2b  00000000  00000000  00047699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00074d9f  00000000  00000000  000594c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a88  00000000  00000000  000ce264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d1cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006000 	.word	0x08006000

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08006000 	.word	0x08006000

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <app_main>:
void batteryAlarm(void);              // Function prototype for activating battery Alarm
void console(char *log);              // Function prototype for transmitting messages via UART

// Main application function
void app_main(void)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
    // Initialize message buffer with default message
    strcpy(message, "EFloodGuardLP(v3.3)\r\n");
 80004d2:	4b75      	ldr	r3, [pc, #468]	; (80006a8 <app_main+0x1dc>)
 80004d4:	4a75      	ldr	r2, [pc, #468]	; (80006ac <app_main+0x1e0>)
 80004d6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004d8:	c313      	stmia	r3!, {r0, r1, r4}
 80004da:	ca03      	ldmia	r2!, {r0, r1}
 80004dc:	c303      	stmia	r3!, {r0, r1}
 80004de:	8812      	ldrh	r2, [r2, #0]
 80004e0:	801a      	strh	r2, [r3, #0]
    // Send initialization message
    console(message);
 80004e2:	4b71      	ldr	r3, [pc, #452]	; (80006a8 <app_main+0x1dc>)
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fbcb 	bl	8000c80 <console>

    // Check if the flood flag is set
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 80004ea:	2380      	movs	r3, #128	; 0x80
 80004ec:	009a      	lsls	r2, r3, #2
 80004ee:	23a0      	movs	r3, #160	; 0xa0
 80004f0:	05db      	lsls	r3, r3, #23
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f002 f853 	bl	80025a0 <HAL_GPIO_ReadPin>
 80004fa:	0003      	movs	r3, r0
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d108      	bne.n	8000512 <app_main+0x46>
    {
        floodFlag = 0;
 8000500:	4b6b      	ldr	r3, [pc, #428]	; (80006b0 <app_main+0x1e4>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
        HAL_Delay(100);
 8000506:	2064      	movs	r0, #100	; 0x64
 8000508:	f001 f96a 	bl	80017e0 <HAL_Delay>
        openValve();
 800050c:	f000 f9a6 	bl	800085c <openValve>
 8000510:	e007      	b.n	8000522 <app_main+0x56>
    }
    else
    {
        floodFlag = 1;
 8000512:	4b67      	ldr	r3, [pc, #412]	; (80006b0 <app_main+0x1e4>)
 8000514:	2201      	movs	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]
        HAL_Delay(100);
 8000518:	2064      	movs	r0, #100	; 0x64
 800051a:	f001 f961 	bl	80017e0 <HAL_Delay>
        closeValve();
 800051e:	f000 f9e5 	bl	80008ec <closeValve>
    }
    alert();
 8000522:	f000 fb85 	bl	8000c30 <alert>
    // Main loop
    while(1)
    {
        // Get current time
        uint32_t now = HAL_GetTick();
 8000526:	f001 f951 	bl	80017cc <HAL_GetTick>
 800052a:	0003      	movs	r3, r0
 800052c:	607b      	str	r3, [r7, #4]

        // Test Mode activated by long pressing the button
        if(pressDuration >= 2000 && !floodFlag && !Low_battery)
 800052e:	4b61      	ldr	r3, [pc, #388]	; (80006b4 <app_main+0x1e8>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	23fa      	movs	r3, #250	; 0xfa
 8000534:	00db      	lsls	r3, r3, #3
 8000536:	429a      	cmp	r2, r3
 8000538:	d323      	bcc.n	8000582 <app_main+0xb6>
 800053a:	4b5d      	ldr	r3, [pc, #372]	; (80006b0 <app_main+0x1e4>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b00      	cmp	r3, #0
 8000542:	d11e      	bne.n	8000582 <app_main+0xb6>
 8000544:	4b5c      	ldr	r3, [pc, #368]	; (80006b8 <app_main+0x1ec>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d11a      	bne.n	8000582 <app_main+0xb6>
        {
            strcpy(message, "Test Mode\r\n");
 800054c:	4b56      	ldr	r3, [pc, #344]	; (80006a8 <app_main+0x1dc>)
 800054e:	4a5b      	ldr	r2, [pc, #364]	; (80006bc <app_main+0x1f0>)
 8000550:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000552:	c313      	stmia	r3!, {r0, r1, r4}
            console(message);
 8000554:	4b54      	ldr	r3, [pc, #336]	; (80006a8 <app_main+0x1dc>)
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fb92 	bl	8000c80 <console>
            pressDuration = 0;
 800055c:	4b55      	ldr	r3, [pc, #340]	; (80006b4 <app_main+0x1e8>)
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
            statusled();
 8000562:	f000 fac7 	bl	8000af4 <statusled>
            closeValve();
 8000566:	f000 f9c1 	bl	80008ec <closeValve>
            alert();
 800056a:	f000 fb61 	bl	8000c30 <alert>
            HAL_Delay(500);
 800056e:	23fa      	movs	r3, #250	; 0xfa
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	0018      	movs	r0, r3
 8000574:	f001 f934 	bl	80017e0 <HAL_Delay>
            statusled();
 8000578:	f000 fabc 	bl	8000af4 <statusled>
            openValve();
 800057c:	f000 f96e 	bl	800085c <openValve>
 8000580:	e017      	b.n	80005b2 <app_main+0xe6>
        }
        // Servicing the short button press during a flood event
        else if(floodFlag && pressDuration >= 1000)
 8000582:	4b4b      	ldr	r3, [pc, #300]	; (80006b0 <app_main+0x1e4>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d012      	beq.n	80005b2 <app_main+0xe6>
 800058c:	4b49      	ldr	r3, [pc, #292]	; (80006b4 <app_main+0x1e8>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	23fa      	movs	r3, #250	; 0xfa
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	429a      	cmp	r2, r3
 8000596:	d30c      	bcc.n	80005b2 <app_main+0xe6>
        {
            strcpy(message, "Reset\r\n");
 8000598:	4b43      	ldr	r3, [pc, #268]	; (80006a8 <app_main+0x1dc>)
 800059a:	4a49      	ldr	r2, [pc, #292]	; (80006c0 <app_main+0x1f4>)
 800059c:	ca03      	ldmia	r2!, {r0, r1}
 800059e:	c303      	stmia	r3!, {r0, r1}
            console(message);
 80005a0:	4b41      	ldr	r3, [pc, #260]	; (80006a8 <app_main+0x1dc>)
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 fb6c 	bl	8000c80 <console>
            pressDuration = 0;
 80005a8:	4b42      	ldr	r3, [pc, #264]	; (80006b4 <app_main+0x1e8>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
            resetFloodEvent();
 80005ae:	f000 f9e5 	bl	800097c <resetFloodEvent>
        }
        // Close the valve if the flood flag is set
        if (floodFlag)
 80005b2:	4b3f      	ldr	r3, [pc, #252]	; (80006b0 <app_main+0x1e4>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d030      	beq.n	800061e <app_main+0x152>
        {
            if(now - alert_time > 5000)
 80005bc:	4b41      	ldr	r3, [pc, #260]	; (80006c4 <app_main+0x1f8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	4a40      	ldr	r2, [pc, #256]	; (80006c8 <app_main+0x1fc>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d90c      	bls.n	80005e4 <app_main+0x118>
            {
                alert_time = now;
 80005ca:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <app_main+0x1f8>)
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	601a      	str	r2, [r3, #0]
                strcpy(message, "Flood\r\n");
 80005d0:	4b35      	ldr	r3, [pc, #212]	; (80006a8 <app_main+0x1dc>)
 80005d2:	4a3e      	ldr	r2, [pc, #248]	; (80006cc <app_main+0x200>)
 80005d4:	ca03      	ldmia	r2!, {r0, r1}
 80005d6:	c303      	stmia	r3!, {r0, r1}
                console(message);
 80005d8:	4b33      	ldr	r3, [pc, #204]	; (80006a8 <app_main+0x1dc>)
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 fb50 	bl	8000c80 <console>
                alert();
 80005e0:	f000 fb26 	bl	8000c30 <alert>
            }
            if(valve_open == 1)
 80005e4:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <app_main+0x204>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d117      	bne.n	800061e <app_main+0x152>
            {
                strcpy(message, "Closing Valve\r\n");
 80005ee:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <app_main+0x1dc>)
 80005f0:	4a38      	ldr	r2, [pc, #224]	; (80006d4 <app_main+0x208>)
 80005f2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80005f4:	c313      	stmia	r3!, {r0, r1, r4}
 80005f6:	6812      	ldr	r2, [r2, #0]
 80005f8:	601a      	str	r2, [r3, #0]
                console(message);
 80005fa:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <app_main+0x1dc>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fb3f 	bl	8000c80 <console>
                closeValve();
 8000602:	f000 f973 	bl	80008ec <closeValve>
                strcpy(message, "Valve closed\r\n");
 8000606:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <app_main+0x1dc>)
 8000608:	4a33      	ldr	r2, [pc, #204]	; (80006d8 <app_main+0x20c>)
 800060a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800060c:	c313      	stmia	r3!, {r0, r1, r4}
 800060e:	8811      	ldrh	r1, [r2, #0]
 8000610:	8019      	strh	r1, [r3, #0]
 8000612:	7892      	ldrb	r2, [r2, #2]
 8000614:	709a      	strb	r2, [r3, #2]
                console(message);
 8000616:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <app_main+0x1dc>)
 8000618:	0018      	movs	r0, r3
 800061a:	f000 fb31 	bl	8000c80 <console>
            }
        }
        if(rtcFlag)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <app_main+0x210>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d00a      	beq.n	800063c <app_main+0x170>
        {
        	strcpy(message, "RTC Event\r\n");
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <app_main+0x1dc>)
 8000628:	4a2d      	ldr	r2, [pc, #180]	; (80006e0 <app_main+0x214>)
 800062a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800062c:	c313      	stmia	r3!, {r0, r1, r4}
        	console(message);
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <app_main+0x1dc>)
 8000630:	0018      	movs	r0, r3
 8000632:	f000 fb25 	bl	8000c80 <console>
        	rtcFlag = 0;
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <app_main+0x210>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
        }
        if((now - sleep_time >= 5000) && !floodFlag && wupFlag)
 800063c:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <app_main+0x218>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <app_main+0x21c>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d800      	bhi.n	800064c <app_main+0x180>
 800064a:	e76c      	b.n	8000526 <app_main+0x5a>
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <app_main+0x1e4>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d000      	beq.n	8000658 <app_main+0x18c>
 8000656:	e766      	b.n	8000526 <app_main+0x5a>
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <app_main+0x220>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d100      	bne.n	8000662 <app_main+0x196>
 8000660:	e761      	b.n	8000526 <app_main+0x5a>
        {
            monitorBattery();
 8000662:	f000 fa17 	bl	8000a94 <monitorBattery>
            wupFlag = 0;
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <app_main+0x220>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
            strcpy(message, "Entering Sleep\r\n");
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <app_main+0x1dc>)
 800066e:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <app_main+0x224>)
 8000670:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000672:	c313      	stmia	r3!, {r0, r1, r4}
 8000674:	6811      	ldr	r1, [r2, #0]
 8000676:	6019      	str	r1, [r3, #0]
 8000678:	7912      	ldrb	r2, [r2, #4]
 800067a:	711a      	strb	r2, [r3, #4]
            console(message);
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <app_main+0x1dc>)
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fafe 	bl	8000c80 <console>
            HAL_SuspendTick(); //
 8000684:	f001 f8d0 	bl	8001828 <HAL_SuspendTick>
            HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // Enable Stop mode
 8000688:	2101      	movs	r1, #1
 800068a:	2001      	movs	r0, #1
 800068c:	f001 ffec 	bl	8002668 <HAL_PWR_EnterSTOPMode>
            strcpy(message, "After Sleep\r\n");
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <app_main+0x1dc>)
 8000692:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <app_main+0x228>)
 8000694:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000696:	c313      	stmia	r3!, {r0, r1, r4}
 8000698:	8812      	ldrh	r2, [r2, #0]
 800069a:	801a      	strh	r2, [r3, #0]
            console(message);
 800069c:	4b02      	ldr	r3, [pc, #8]	; (80006a8 <app_main+0x1dc>)
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 faee 	bl	8000c80 <console>
    {
 80006a4:	e73f      	b.n	8000526 <app_main+0x5a>
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	200000a4 	.word	0x200000a4
 80006ac:	08006018 	.word	0x08006018
 80006b0:	200000cf 	.word	0x200000cf
 80006b4:	200000dc 	.word	0x200000dc
 80006b8:	200000cd 	.word	0x200000cd
 80006bc:	08006030 	.word	0x08006030
 80006c0:	0800603c 	.word	0x0800603c
 80006c4:	200000e0 	.word	0x200000e0
 80006c8:	00001388 	.word	0x00001388
 80006cc:	08006044 	.word	0x08006044
 80006d0:	200000ce 	.word	0x200000ce
 80006d4:	0800604c 	.word	0x0800604c
 80006d8:	0800605c 	.word	0x0800605c
 80006dc:	200000cc 	.word	0x200000cc
 80006e0:	0800606c 	.word	0x0800606c
 80006e4:	200000e4 	.word	0x200000e4
 80006e8:	00001387 	.word	0x00001387
 80006ec:	20000000 	.word	0x20000000
 80006f0:	08006078 	.word	0x08006078
 80006f4:	0800608c 	.word	0x0800608c

080006f8 <HAL_GPIO_EXTI_Callback>:
    }
}

// Callback function for rising edge interrupt on GPIO EXTI line
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	0002      	movs	r2, r0
 8000700:	1dbb      	adds	r3, r7, #6
 8000702:	801a      	strh	r2, [r3, #0]
    SystemClock_Config();
 8000704:	f000 faf6 	bl	8000cf4 <SystemClock_Config>
    HAL_ResumeTick();
 8000708:	f001 f89c 	bl	8001844 <HAL_ResumeTick>
    sleep_time = HAL_GetTick();
 800070c:	f001 f85e 	bl	80017cc <HAL_GetTick>
 8000710:	0002      	movs	r2, r0
 8000712:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000714:	601a      	str	r2, [r3, #0]
    wupFlag = 1;
 8000716:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000718:	2201      	movs	r2, #1
 800071a:	701a      	strb	r2, [r3, #0]
    if(GPIO_Pin == GPIO_PIN_15)
 800071c:	1dbb      	adds	r3, r7, #6
 800071e:	881a      	ldrh	r2, [r3, #0]
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	021b      	lsls	r3, r3, #8
 8000724:	429a      	cmp	r2, r3
 8000726:	d132      	bne.n	800078e <HAL_GPIO_EXTI_Callback+0x96>
    {
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET) // Rising edge
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	021a      	lsls	r2, r3, #8
 800072c:	23a0      	movs	r3, #160	; 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	0011      	movs	r1, r2
 8000732:	0018      	movs	r0, r3
 8000734:	f001 ff34 	bl	80025a0 <HAL_GPIO_ReadPin>
 8000738:	0003      	movs	r3, r0
 800073a:	2b01      	cmp	r3, #1
 800073c:	d114      	bne.n	8000768 <HAL_GPIO_EXTI_Callback+0x70>
        {
            if (buttonState == 1)
 800073e:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2b01      	cmp	r3, #1
 8000746:	d10b      	bne.n	8000760 <HAL_GPIO_EXTI_Callback+0x68>
            {
                releaseTime = HAL_GetTick();
 8000748:	f001 f840 	bl	80017cc <HAL_GetTick>
 800074c:	0002      	movs	r2, r0
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <HAL_GPIO_EXTI_Callback+0xd4>)
 8000750:	601a      	str	r2, [r3, #0]
                pressDuration = releaseTime - holdTime;
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <HAL_GPIO_EXTI_Callback+0xd4>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	1ad2      	subs	r2, r2, r3
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800075e:	601a      	str	r2, [r3, #0]
            }
            buttonState = 0;
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET) // Falling edge
        {
            HAL_TIM_Base_Start_IT(&htim21);
        }
    }
}
 8000766:	e026      	b.n	80007b6 <HAL_GPIO_EXTI_Callback+0xbe>
        else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET) // Falling edge
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	021a      	lsls	r2, r3, #8
 800076c:	23a0      	movs	r3, #160	; 0xa0
 800076e:	05db      	lsls	r3, r3, #23
 8000770:	0011      	movs	r1, r2
 8000772:	0018      	movs	r0, r3
 8000774:	f001 ff14 	bl	80025a0 <HAL_GPIO_ReadPin>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d11c      	bne.n	80007b6 <HAL_GPIO_EXTI_Callback+0xbe>
            buttonState = 1;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_GPIO_EXTI_Callback+0xd0>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
            holdTime = HAL_GetTick(); // Record button hold time
 8000782:	f001 f823 	bl	80017cc <HAL_GetTick>
 8000786:	0002      	movs	r2, r0
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <HAL_GPIO_EXTI_Callback+0xd8>)
 800078a:	601a      	str	r2, [r3, #0]
}
 800078c:	e013      	b.n	80007b6 <HAL_GPIO_EXTI_Callback+0xbe>
    else if(GPIO_Pin == GPIO_PIN_9)
 800078e:	1dbb      	adds	r3, r7, #6
 8000790:	881a      	ldrh	r2, [r3, #0]
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	429a      	cmp	r2, r3
 8000798:	d10d      	bne.n	80007b6 <HAL_GPIO_EXTI_Callback+0xbe>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET) // Falling edge
 800079a:	1dbb      	adds	r3, r7, #6
 800079c:	881a      	ldrh	r2, [r3, #0]
 800079e:	23a0      	movs	r3, #160	; 0xa0
 80007a0:	05db      	lsls	r3, r3, #23
 80007a2:	0011      	movs	r1, r2
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 fefb 	bl	80025a0 <HAL_GPIO_ReadPin>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d103      	bne.n	80007b6 <HAL_GPIO_EXTI_Callback+0xbe>
            HAL_TIM_Base_Start_IT(&htim21);
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_GPIO_EXTI_Callback+0xe0>)
 80007b0:	0018      	movs	r0, r3
 80007b2:	f003 fbad 	bl	8003f10 <HAL_TIM_Base_Start_IT>
}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	200000e4 	.word	0x200000e4
 80007c4:	20000000 	.word	0x20000000
 80007c8:	200000d0 	.word	0x200000d0
 80007cc:	200000d8 	.word	0x200000d8
 80007d0:	200000d4 	.word	0x200000d4
 80007d4:	200000dc 	.word	0x200000dc
 80007d8:	200001a8 	.word	0x200001a8

080007dc <HAL_RTC_AlarmAEventCallback>:

// Callback function for RTC Alarm A event
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    SystemClock_Config();
 80007e4:	f000 fa86 	bl	8000cf4 <SystemClock_Config>
    HAL_ResumeTick();
 80007e8:	f001 f82c 	bl	8001844 <HAL_ResumeTick>
    sleep_time = HAL_GetTick();
 80007ec:	f000 ffee 	bl	80017cc <HAL_GetTick>
 80007f0:	0002      	movs	r2, r0
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_RTC_AlarmAEventCallback+0x30>)
 80007f4:	601a      	str	r2, [r3, #0]
    wupFlag = 1;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_RTC_AlarmAEventCallback+0x34>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
    rtcFlag = 1;
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_RTC_AlarmAEventCallback+0x38>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b002      	add	sp, #8
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	200000e4 	.word	0x200000e4
 8000810:	20000000 	.word	0x20000000
 8000814:	200000cc 	.word	0x200000cc

08000818 <HAL_TIM_PeriodElapsedCallback>:

// Callback function for TIM21 period elapsed interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
    if(htim == &htim21)
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000824:	429a      	cmp	r2, r3
 8000826:	d110      	bne.n	800084a <HAL_TIM_PeriodElapsedCallback+0x32>
    {
        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET)
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	009a      	lsls	r2, r3, #2
 800082c:	23a0      	movs	r3, #160	; 0xa0
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f001 feb4 	bl	80025a0 <HAL_GPIO_ReadPin>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d102      	bne.n	8000842 <HAL_TIM_PeriodElapsedCallback+0x2a>
        {
            floodFlag = 1; // Set flood flag
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
        }
        HAL_TIM_Base_Stop_IT(&htim21);
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000844:	0018      	movs	r0, r3
 8000846:	f003 fba7 	bl	8003f98 <HAL_TIM_Base_Stop_IT>
    }
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	200001a8 	.word	0x200001a8
 8000858:	200000cf 	.word	0x200000cf

0800085c <openValve>:

// Function to open the valve
void openValve(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // Activate valve
 8000862:	23a0      	movs	r3, #160	; 0xa0
 8000864:	05db      	lsls	r3, r3, #23
 8000866:	2201      	movs	r2, #1
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	0018      	movs	r0, r3
 800086c:	f001 feb5 	bl	80025da <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Start PWM signal for valve control
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <openValve+0x88>)
 8000872:	2100      	movs	r1, #0
 8000874:	0018      	movs	r0, r3
 8000876:	f003 fbf5 	bl	8004064 <HAL_TIM_PWM_Start>
    HAL_Delay(50);
 800087a:	2032      	movs	r0, #50	; 0x32
 800087c:	f000 ffb0 	bl	80017e0 <HAL_Delay>
    for(uint16_t i = 1800; i >= 900; i -= 50)
 8000880:	1dbb      	adds	r3, r7, #6
 8000882:	22e1      	movs	r2, #225	; 0xe1
 8000884:	00d2      	lsls	r2, r2, #3
 8000886:	801a      	strh	r2, [r3, #0]
 8000888:	e00c      	b.n	80008a4 <openValve+0x48>
    {
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i); // Set PWM duty cycle for valve opening
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <openValve+0x88>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	1dba      	adds	r2, r7, #6
 8000890:	8812      	ldrh	r2, [r2, #0]
 8000892:	635a      	str	r2, [r3, #52]	; 0x34
        HAL_Delay(30);
 8000894:	201e      	movs	r0, #30
 8000896:	f000 ffa3 	bl	80017e0 <HAL_Delay>
    for(uint16_t i = 1800; i >= 900; i -= 50)
 800089a:	1dbb      	adds	r3, r7, #6
 800089c:	1dba      	adds	r2, r7, #6
 800089e:	8812      	ldrh	r2, [r2, #0]
 80008a0:	3a32      	subs	r2, #50	; 0x32
 80008a2:	801a      	strh	r2, [r3, #0]
 80008a4:	1dbb      	adds	r3, r7, #6
 80008a6:	881a      	ldrh	r2, [r3, #0]
 80008a8:	23e1      	movs	r3, #225	; 0xe1
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d2ec      	bcs.n	800088a <openValve+0x2e>
    }

    HAL_Delay(50);
 80008b0:	2032      	movs	r0, #50	; 0x32
 80008b2:	f000 ff95 	bl	80017e0 <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); // Stop PWM signal
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <openValve+0x88>)
 80008b8:	2100      	movs	r1, #0
 80008ba:	0018      	movs	r0, r3
 80008bc:	f003 fc56 	bl	800416c <HAL_TIM_PWM_Stop>
    HAL_Delay(50);
 80008c0:	2032      	movs	r0, #50	; 0x32
 80008c2:	f000 ff8d 	bl	80017e0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Deactivate valve
 80008c6:	23a0      	movs	r3, #160	; 0xa0
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	2200      	movs	r2, #0
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 fe83 	bl	80025da <HAL_GPIO_WritePin>
    valve_open = 1;
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <openValve+0x8c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b002      	add	sp, #8
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	20000168 	.word	0x20000168
 80008e8:	200000ce 	.word	0x200000ce

080008ec <closeValve>:

// Function to close the valve
void closeValve(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // Activate valve
 80008f2:	23a0      	movs	r3, #160	; 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	2201      	movs	r2, #1
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	0018      	movs	r0, r3
 80008fc:	f001 fe6d 	bl	80025da <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Start PWM signal for valve control
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <closeValve+0x88>)
 8000902:	2100      	movs	r1, #0
 8000904:	0018      	movs	r0, r3
 8000906:	f003 fbad 	bl	8004064 <HAL_TIM_PWM_Start>
    HAL_Delay(50);
 800090a:	2032      	movs	r0, #50	; 0x32
 800090c:	f000 ff68 	bl	80017e0 <HAL_Delay>
    for(uint16_t i = 900; i <= 1800; i += 50)
 8000910:	1dbb      	adds	r3, r7, #6
 8000912:	22e1      	movs	r2, #225	; 0xe1
 8000914:	0092      	lsls	r2, r2, #2
 8000916:	801a      	strh	r2, [r3, #0]
 8000918:	e00c      	b.n	8000934 <closeValve+0x48>
    {
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i); // Set PWM duty cycle for valve closing
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <closeValve+0x88>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	1dba      	adds	r2, r7, #6
 8000920:	8812      	ldrh	r2, [r2, #0]
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
        HAL_Delay(30);
 8000924:	201e      	movs	r0, #30
 8000926:	f000 ff5b 	bl	80017e0 <HAL_Delay>
    for(uint16_t i = 900; i <= 1800; i += 50)
 800092a:	1dbb      	adds	r3, r7, #6
 800092c:	1dba      	adds	r2, r7, #6
 800092e:	8812      	ldrh	r2, [r2, #0]
 8000930:	3232      	adds	r2, #50	; 0x32
 8000932:	801a      	strh	r2, [r3, #0]
 8000934:	1dbb      	adds	r3, r7, #6
 8000936:	881a      	ldrh	r2, [r3, #0]
 8000938:	23e1      	movs	r3, #225	; 0xe1
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	429a      	cmp	r2, r3
 800093e:	d9ec      	bls.n	800091a <closeValve+0x2e>
    }
    HAL_Delay(50);
 8000940:	2032      	movs	r0, #50	; 0x32
 8000942:	f000 ff4d 	bl	80017e0 <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); // Stop PWM signal
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <closeValve+0x88>)
 8000948:	2100      	movs	r1, #0
 800094a:	0018      	movs	r0, r3
 800094c:	f003 fc0e 	bl	800416c <HAL_TIM_PWM_Stop>
    HAL_Delay(50);
 8000950:	2032      	movs	r0, #50	; 0x32
 8000952:	f000 ff45 	bl	80017e0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Deactivate valve
 8000956:	23a0      	movs	r3, #160	; 0xa0
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	2200      	movs	r2, #0
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	0018      	movs	r0, r3
 8000960:	f001 fe3b 	bl	80025da <HAL_GPIO_WritePin>
    valve_open = 0;
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <closeValve+0x8c>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b002      	add	sp, #8
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	20000168 	.word	0x20000168
 8000978:	200000ce 	.word	0x200000ce

0800097c <resetFloodEvent>:

// Function to reset flood event
void resetFloodEvent(void)
{
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	af00      	add	r7, sp, #0
    // Check if the button is pressed and the valve is open
    if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	021a      	lsls	r2, r3, #8
 8000984:	23a0      	movs	r3, #160	; 0xa0
 8000986:	05db      	lsls	r3, r3, #23
 8000988:	0011      	movs	r1, r2
 800098a:	0018      	movs	r0, r3
 800098c:	f001 fe08 	bl	80025a0 <HAL_GPIO_ReadPin>
 8000990:	0003      	movs	r3, r0
 8000992:	2b01      	cmp	r3, #1
 8000994:	d11e      	bne.n	80009d4 <resetFloodEvent+0x58>
 8000996:	2380      	movs	r3, #128	; 0x80
 8000998:	009a      	lsls	r2, r3, #2
 800099a:	23a0      	movs	r3, #160	; 0xa0
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	0011      	movs	r1, r2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 fdfd 	bl	80025a0 <HAL_GPIO_ReadPin>
 80009a6:	0003      	movs	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d113      	bne.n	80009d4 <resetFloodEvent+0x58>
    {
        if(valve_open == 0)
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <resetFloodEvent+0x60>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d101      	bne.n	80009ba <resetFloodEvent+0x3e>
        {
            openValve(); // Open the valve
 80009b6:	f7ff ff51 	bl	800085c <openValve>
        }
        strcpy(message, "Valve open\r\n");
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <resetFloodEvent+0x64>)
 80009bc:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <resetFloodEvent+0x68>)
 80009be:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009c0:	c313      	stmia	r3!, {r0, r1, r4}
 80009c2:	7812      	ldrb	r2, [r2, #0]
 80009c4:	701a      	strb	r2, [r3, #0]
        console(message);
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <resetFloodEvent+0x64>)
 80009c8:	0018      	movs	r0, r3
 80009ca:	f000 f959 	bl	8000c80 <console>
        floodFlag = 0; // Clear the flood flag
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <resetFloodEvent+0x6c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
    }
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bdb0      	pop	{r4, r5, r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	200000ce 	.word	0x200000ce
 80009e0:	200000a4 	.word	0x200000a4
 80009e4:	0800609c 	.word	0x0800609c
 80009e8:	200000cf 	.word	0x200000cf

080009ec <measureBattery>:

// Function to measure battery voltage
uint16_t measureBattery(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // Enable battery voltage measurement
 80009f2:	2380      	movs	r3, #128	; 0x80
 80009f4:	021b      	lsls	r3, r3, #8
 80009f6:	4823      	ldr	r0, [pc, #140]	; (8000a84 <measureBattery+0x98>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	0019      	movs	r1, r3
 80009fc:	f001 fded 	bl	80025da <HAL_GPIO_WritePin>
    HAL_ADC_Start(&hadc); // Start ADC conversion
 8000a00:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <measureBattery+0x9c>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 f8a0 	bl	8001b48 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY); // Wait for ADC conversion to complete
 8000a08:	2301      	movs	r3, #1
 8000a0a:	425a      	negs	r2, r3
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <measureBattery+0x9c>)
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 f92d 	bl	8001c70 <HAL_ADC_PollForConversion>
    uint16_t analogbatt = HAL_ADC_GetValue(&hadc); // Read ADC value
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <measureBattery+0x9c>)
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f001 f9c5 	bl	8001da8 <HAL_ADC_GetValue>
 8000a1e:	0002      	movs	r2, r0
 8000a20:	1dbb      	adds	r3, r7, #6
 8000a22:	801a      	strh	r2, [r3, #0]
    HAL_Delay(5);
 8000a24:	2005      	movs	r0, #5
 8000a26:	f000 fedb 	bl	80017e0 <HAL_Delay>
    HAL_ADC_Stop(&hadc); // Stop ADC conversion
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <measureBattery+0x9c>)
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 f8df 	bl	8001bf0 <HAL_ADC_Stop>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // Disable battery voltage measurement
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	021b      	lsls	r3, r3, #8
 8000a36:	4813      	ldr	r0, [pc, #76]	; (8000a84 <measureBattery+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	f001 fdcd 	bl	80025da <HAL_GPIO_WritePin>

    // Check battery voltage threshold
    if(analogbatt < 2950 && analogbatt >= 2800)
 8000a40:	1dbb      	adds	r3, r7, #6
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <measureBattery+0xa0>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d809      	bhi.n	8000a5e <measureBattery+0x72>
 8000a4a:	1dbb      	adds	r3, r7, #6
 8000a4c:	881a      	ldrh	r2, [r3, #0]
 8000a4e:	23af      	movs	r3, #175	; 0xaf
 8000a50:	011b      	lsls	r3, r3, #4
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d303      	bcc.n	8000a5e <measureBattery+0x72>
    {
        Low_battery = 1; // Set low battery flag if voltage is below threshold
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <measureBattery+0xa4>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
 8000a5c:	e00c      	b.n	8000a78 <measureBattery+0x8c>
    }
    else if(analogbatt < 2800)
 8000a5e:	1dbb      	adds	r3, r7, #6
 8000a60:	881a      	ldrh	r2, [r3, #0]
 8000a62:	23af      	movs	r3, #175	; 0xaf
 8000a64:	011b      	lsls	r3, r3, #4
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d203      	bcs.n	8000a72 <measureBattery+0x86>
    {
        Low_battery = 2; // Set low battery flag flag if voltage is below critical threshold
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <measureBattery+0xa4>)
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	e002      	b.n	8000a78 <measureBattery+0x8c>
    }
    else
    {
    	Low_battery = 0;
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <measureBattery+0xa4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
    }
    return analogbatt; // Return battery voltage reading
 8000a78:	1dbb      	adds	r3, r7, #6
 8000a7a:	881b      	ldrh	r3, [r3, #0]
}
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b002      	add	sp, #8
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	50000400 	.word	0x50000400
 8000a88:	200000e8 	.word	0x200000e8
 8000a8c:	00000b85 	.word	0x00000b85
 8000a90:	200000cd 	.word	0x200000cd

08000a94 <monitorBattery>:

// Function to monitor battery voltage
void monitorBattery(void)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
	uint16_t vBatt = measureBattery(); // Measure battery voltage
 8000a9a:	1dbc      	adds	r4, r7, #6
 8000a9c:	f7ff ffa6 	bl	80009ec <measureBattery>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	8023      	strh	r3, [r4, #0]
    if(Low_battery == 1)
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <monitorBattery+0x54>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d104      	bne.n	8000ab6 <monitorBattery+0x22>
    {
    	batteryled();
 8000aac:	f000 f846 	bl	8000b3c <batteryled>
    	RTC_AlarmConfig();
 8000ab0:	f000 f87e 	bl	8000bb0 <RTC_AlarmConfig>
 8000ab4:	e009      	b.n	8000aca <monitorBattery+0x36>
    }
    else if(Low_battery == 2)
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <monitorBattery+0x54>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d105      	bne.n	8000aca <monitorBattery+0x36>
    {
    	RTC_AlarmConfig();
 8000abe:	f000 f877 	bl	8000bb0 <RTC_AlarmConfig>
    	closeValve();	// Close Valve if Critically low Battery
 8000ac2:	f7ff ff13 	bl	80008ec <closeValve>
    	batteryAlarm(); // Activate battery Alarm if critically low battery
 8000ac6:	f000 f84f 	bl	8000b68 <batteryAlarm>
    }
    sprintf(message, "Battery Voltage: %d\r\n", vBatt); // Format battery voltage message
 8000aca:	1dbb      	adds	r3, r7, #6
 8000acc:	881a      	ldrh	r2, [r3, #0]
 8000ace:	4907      	ldr	r1, [pc, #28]	; (8000aec <monitorBattery+0x58>)
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <monitorBattery+0x5c>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f004 fdee 	bl	80056b4 <siprintf>
    console(message); // Send battery voltage message via UART
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <monitorBattery+0x5c>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 f8d0 	bl	8000c80 <console>
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b003      	add	sp, #12
 8000ae6:	bd90      	pop	{r4, r7, pc}
 8000ae8:	200000cd 	.word	0x200000cd
 8000aec:	080060ac 	.word	0x080060ac
 8000af0:	200000a4 	.word	0x200000a4

08000af4 <statusled>:

// Function to control status LED
void statusled(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Activate status LED
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <statusled+0x44>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	0018      	movs	r0, r3
 8000b00:	f001 fd6b 	bl	80025da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); // Activate status LED
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	480b      	ldr	r0, [pc, #44]	; (8000b38 <statusled+0x44>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	f001 fd64 	bl	80025da <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000b12:	2064      	movs	r0, #100	; 0x64
 8000b14:	f000 fe64 	bl	80017e0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Deactivate status LED
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <statusled+0x44>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f001 fd5b 	bl	80025da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // Deactivate status LED
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <statusled+0x44>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	f001 fd54 	bl	80025da <HAL_GPIO_WritePin>
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	50000400 	.word	0x50000400

08000b3c <batteryled>:

// Function to activate battery led
void batteryled(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Activate battery LED
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <batteryled+0x28>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	0018      	movs	r0, r3
 8000b48:	f001 fd47 	bl	80025da <HAL_GPIO_WritePin>
	HAL_Delay(200); // Delay for LED indication
 8000b4c:	20c8      	movs	r0, #200	; 0xc8
 8000b4e:	f000 fe47 	bl	80017e0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Deactivate battery LED
 8000b52:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <batteryled+0x28>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	2180      	movs	r1, #128	; 0x80
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f001 fd3e 	bl	80025da <HAL_GPIO_WritePin>
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	50000400 	.word	0x50000400

08000b68 <batteryAlarm>:

// Function to activate battery Alarm
void batteryAlarm(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Activate battery LED
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <batteryAlarm+0x44>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 fd31 	bl	80025da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // Activate battery LED
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	480b      	ldr	r0, [pc, #44]	; (8000bac <batteryAlarm+0x44>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	0019      	movs	r1, r3
 8000b82:	f001 fd2a 	bl	80025da <HAL_GPIO_WritePin>
    HAL_Delay(200); // Delay for LED indication
 8000b86:	20c8      	movs	r0, #200	; 0xc8
 8000b88:	f000 fe2a 	bl	80017e0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // Deactivate battery LED
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4806      	ldr	r0, [pc, #24]	; (8000bac <batteryAlarm+0x44>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	0019      	movs	r1, r3
 8000b96:	f001 fd20 	bl	80025da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Deactivate battery LED
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <batteryAlarm+0x44>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f001 fd1a 	bl	80025da <HAL_GPIO_WritePin>
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	50000400 	.word	0x50000400

08000bb0 <RTC_AlarmConfig>:

void RTC_AlarmConfig(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	005a      	lsls	r2, r3, #1
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <RTC_AlarmConfig+0x74>)
 8000bba:	0011      	movs	r1, r2
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f002 ffb7 	bl	8003b30 <HAL_RTC_DeactivateAlarm>
	sAlarm.AlarmTime.Hours = 0x0;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <RTC_AlarmConfig+0x78>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <RTC_AlarmConfig+0x78>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <RTC_AlarmConfig+0x78>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <RTC_AlarmConfig+0x78>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <RTC_AlarmConfig+0x78>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <RTC_AlarmConfig+0x78>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <RTC_AlarmConfig+0x78>)
 8000be8:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <RTC_AlarmConfig+0x7c>)
 8000bea:	615a      	str	r2, [r3, #20]
			|RTC_ALARMMASK_MINUTES;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <RTC_AlarmConfig+0x78>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <RTC_AlarmConfig+0x78>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <RTC_AlarmConfig+0x78>)
 8000bfa:	2220      	movs	r2, #32
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	5499      	strb	r1, [r3, r2]
	sAlarm.Alarm = RTC_ALARM_A;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <RTC_AlarmConfig+0x78>)
 8000c02:	2280      	movs	r2, #128	; 0x80
 8000c04:	0052      	lsls	r2, r2, #1
 8000c06:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c08:	4907      	ldr	r1, [pc, #28]	; (8000c28 <RTC_AlarmConfig+0x78>)
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <RTC_AlarmConfig+0x74>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f002 fe2c 	bl	800386c <HAL_RTC_SetAlarm_IT>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <RTC_AlarmConfig+0x6c>
	{
		Error_Handler();
 8000c18:	f000 fb66 	bl	80012e8 <Error_Handler>
	}

}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	20000144 	.word	0x20000144
 8000c28:	2000007c 	.word	0x2000007c
 8000c2c:	80808000 	.word	0x80808000

08000c30 <alert>:
// Function to activate buzzer and warning LED
void alert(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); // Activate buzzer
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	4810      	ldr	r0, [pc, #64]	; (8000c7c <alert+0x4c>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	f001 fccc 	bl	80025da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // Activate warning LED
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <alert+0x4c>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	0019      	movs	r1, r3
 8000c4c:	f001 fcc5 	bl	80025da <HAL_GPIO_WritePin>
    HAL_Delay(1000); // Delay for alert indication
 8000c50:	23fa      	movs	r3, #250	; 0xfa
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	0018      	movs	r0, r3
 8000c56:	f000 fdc3 	bl	80017e0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // Deactivate buzzer
 8000c5a:	2380      	movs	r3, #128	; 0x80
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4807      	ldr	r0, [pc, #28]	; (8000c7c <alert+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	0019      	movs	r1, r3
 8000c64:	f001 fcb9 	bl	80025da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // Deactivate warning LED
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <alert+0x4c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	0019      	movs	r1, r3
 8000c72:	f001 fcb2 	bl	80025da <HAL_GPIO_WritePin>
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	50000400 	.word	0x50000400

08000c80 <console>:
// Function to transmit messages via UART
void console(char *log)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)log, strlen(log), HAL_MAX_DELAY); // Transmit message via UART
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f7ff fa3c 	bl	8000108 <strlen>
 8000c90:	0003      	movs	r3, r0
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	2301      	movs	r3, #1
 8000c96:	425b      	negs	r3, r3
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <console+0x44>)
 8000c9c:	f003 fff6 	bl	8004c8c <HAL_UART_Transmit>
    HAL_Delay(10);
 8000ca0:	200a      	movs	r0, #10
 8000ca2:	f000 fd9d 	bl	80017e0 <HAL_Delay>
    memset(log, '\0', strlen(log)); // Clear message buffer
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff fa2d 	bl	8000108 <strlen>
 8000cae:	0002      	movs	r2, r0
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f004 fd1d 	bl	80056f4 <memset>
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	200001e8 	.word	0x200001e8

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ccc:	f000 fd18 	bl	8001700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd0:	f000 f810 	bl	8000cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd4:	f000 fa70 	bl	80011b8 <MX_GPIO_Init>
  MX_ADC_Init();
 8000cd8:	f000 f884 	bl	8000de4 <MX_ADC_Init>
  MX_RTC_Init();
 8000cdc:	f000 f8e8 	bl	8000eb0 <MX_RTC_Init>
  MX_TIM2_Init();
 8000ce0:	f000 f984 	bl	8000fec <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ce4:	f000 fa38 	bl	8001158 <MX_USART2_UART_Init>
  MX_TIM21_Init();
 8000ce8:	f000 f9e0 	bl	80010ac <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 8000cec:	f7ff fbee 	bl	80004cc <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <main+0x28>
	...

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b099      	sub	sp, #100	; 0x64
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	242c      	movs	r4, #44	; 0x2c
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	0018      	movs	r0, r3
 8000d00:	2334      	movs	r3, #52	; 0x34
 8000d02:	001a      	movs	r2, r3
 8000d04:	2100      	movs	r1, #0
 8000d06:	f004 fcf5 	bl	80056f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0a:	2318      	movs	r3, #24
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	0018      	movs	r0, r3
 8000d10:	2314      	movs	r3, #20
 8000d12:	001a      	movs	r2, r3
 8000d14:	2100      	movs	r1, #0
 8000d16:	f004 fced 	bl	80056f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1a:	003b      	movs	r3, r7
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	2318      	movs	r3, #24
 8000d20:	001a      	movs	r2, r3
 8000d22:	2100      	movs	r1, #0
 8000d24:	f004 fce6 	bl	80056f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d28:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <SystemClock_Config+0xe4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a2b      	ldr	r2, [pc, #172]	; (8000ddc <SystemClock_Config+0xe8>)
 8000d2e:	401a      	ands	r2, r3
 8000d30:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <SystemClock_Config+0xe4>)
 8000d32:	2180      	movs	r1, #128	; 0x80
 8000d34:	0109      	lsls	r1, r1, #4
 8000d36:	430a      	orrs	r2, r1
 8000d38:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d3a:	f001 fc87 	bl	800264c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d3e:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <SystemClock_Config+0xec>)
 8000d40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <SystemClock_Config+0xec>)
 8000d44:	4925      	ldr	r1, [pc, #148]	; (8000ddc <SystemClock_Config+0xe8>)
 8000d46:	400a      	ands	r2, r1
 8000d48:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2206      	movs	r2, #6
 8000d4e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	0052      	lsls	r2, r2, #1
 8000d56:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	2210      	movs	r2, #16
 8000d62:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f001 fcd7 	bl	8002720 <HAL_RCC_OscConfig>
 8000d72:	1e03      	subs	r3, r0, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000d76:	f000 fab7 	bl	80012e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7a:	2118      	movs	r1, #24
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	220f      	movs	r2, #15
 8000d80:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2201      	movs	r2, #1
 8000d86:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f002 f83a 	bl	8002e18 <HAL_RCC_ClockConfig>
 8000da4:	1e03      	subs	r3, r0, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000da8:	f000 fa9e 	bl	80012e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8000dac:	003b      	movs	r3, r7
 8000dae:	2222      	movs	r2, #34	; 0x22
 8000db0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000db2:	003b      	movs	r3, r7
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000db8:	003b      	movs	r3, r7
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	0252      	lsls	r2, r2, #9
 8000dbe:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc0:	003b      	movs	r3, r7
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f002 fa4c 	bl	8003260 <HAL_RCCEx_PeriphCLKConfig>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000dcc:	f000 fa8c 	bl	80012e8 <Error_Handler>
  }
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b019      	add	sp, #100	; 0x64
 8000dd6:	bd90      	pop	{r4, r7, pc}
 8000dd8:	40007000 	.word	0x40007000
 8000ddc:	ffffe7ff 	.word	0xffffe7ff
 8000de0:	40021000 	.word	0x40021000

08000de4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dea:	003b      	movs	r3, r7
 8000dec:	0018      	movs	r0, r3
 8000dee:	2308      	movs	r3, #8
 8000df0:	001a      	movs	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f004 fc7e 	bl	80056f4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000df8:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000dfa:	4a2b      	ldr	r2, [pc, #172]	; (8000ea8 <MX_ADC_Init+0xc4>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000dfe:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000e04:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e06:	22c0      	movs	r2, #192	; 0xc0
 8000e08:	0612      	lsls	r2, r2, #24
 8000e0a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e0c:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e26:	2220      	movs	r2, #32
 8000e28:	2100      	movs	r1, #0
 8000e2a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e2e:	2221      	movs	r2, #33	; 0x21
 8000e30:	2100      	movs	r1, #0
 8000e32:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e3c:	22c2      	movs	r2, #194	; 0xc2
 8000e3e:	32ff      	adds	r2, #255	; 0xff
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e44:	222c      	movs	r2, #44	; 0x2c
 8000e46:	2100      	movs	r1, #0
 8000e48:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f000 fcf8 	bl	8001860 <HAL_ADC_Init>
 8000e70:	1e03      	subs	r3, r0, #0
 8000e72:	d001      	beq.n	8000e78 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000e74:	f000 fa38 	bl	80012e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e78:	003b      	movs	r3, r7
 8000e7a:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <MX_ADC_Init+0xc8>)
 8000e7c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2280      	movs	r2, #128	; 0x80
 8000e82:	0152      	lsls	r2, r2, #5
 8000e84:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e86:	003a      	movs	r2, r7
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_ADC_Init+0xc0>)
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f000 ff97 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 8000e92:	1e03      	subs	r3, r0, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000e96:	f000 fa27 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	200000e8 	.word	0x200000e8
 8000ea8:	40012400 	.word	0x40012400
 8000eac:	24000200 	.word	0x24000200

08000eb0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b090      	sub	sp, #64	; 0x40
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000eb6:	232c      	movs	r3, #44	; 0x2c
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	0018      	movs	r0, r3
 8000ebc:	2314      	movs	r3, #20
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	f004 fc17 	bl	80056f4 <memset>
  RTC_DateTypeDef sDate = {0};
 8000ec6:	2328      	movs	r3, #40	; 0x28
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000ece:	003b      	movs	r3, r7
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	2328      	movs	r3, #40	; 0x28
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	f004 fc0c 	bl	80056f4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000edc:	4b40      	ldr	r3, [pc, #256]	; (8000fe0 <MX_RTC_Init+0x130>)
 8000ede:	4a41      	ldr	r2, [pc, #260]	; (8000fe4 <MX_RTC_Init+0x134>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ee2:	4b3f      	ldr	r3, [pc, #252]	; (8000fe0 <MX_RTC_Init+0x130>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ee8:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <MX_RTC_Init+0x130>)
 8000eea:	227f      	movs	r2, #127	; 0x7f
 8000eec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000eee:	4b3c      	ldr	r3, [pc, #240]	; (8000fe0 <MX_RTC_Init+0x130>)
 8000ef0:	22ff      	movs	r2, #255	; 0xff
 8000ef2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ef4:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <MX_RTC_Init+0x130>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000efa:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <MX_RTC_Init+0x130>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f00:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <MX_RTC_Init+0x130>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f06:	4b36      	ldr	r3, [pc, #216]	; (8000fe0 <MX_RTC_Init+0x130>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f0c:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <MX_RTC_Init+0x130>)
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f002 fad2 	bl	80034b8 <HAL_RTC_Init>
 8000f14:	1e03      	subs	r3, r0, #0
 8000f16:	d001      	beq.n	8000f1c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000f18:	f000 f9e6 	bl	80012e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x14;
 8000f1c:	212c      	movs	r1, #44	; 0x2c
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2214      	movs	r2, #20
 8000f22:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x28;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2228      	movs	r2, #40	; 0x28
 8000f28:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f3c:	1879      	adds	r1, r7, r1
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <MX_RTC_Init+0x130>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	0018      	movs	r0, r3
 8000f44:	f002 fb54 	bl	80035f0 <HAL_RTC_SetTime>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000f4c:	f000 f9cc 	bl	80012e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000f50:	2128      	movs	r1, #40	; 0x28
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2203      	movs	r2, #3
 8000f56:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JULY;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2207      	movs	r2, #7
 8000f5c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x17;
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2217      	movs	r2, #23
 8000f62:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	2224      	movs	r2, #36	; 0x24
 8000f68:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f6a:	1879      	adds	r1, r7, r1
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <MX_RTC_Init+0x130>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	0018      	movs	r0, r3
 8000f72:	f002 fbe7 	bl	8003744 <HAL_RTC_SetDate>
 8000f76:	1e03      	subs	r3, r0, #0
 8000f78:	d001      	beq.n	8000f7e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000f7a:	f000 f9b5 	bl	80012e8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000f7e:	003b      	movs	r3, r7
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000f84:	003b      	movs	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000f8a:	003b      	movs	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000f90:	003b      	movs	r3, r7
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f96:	003b      	movs	r3, r7
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f9c:	003b      	movs	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000fa2:	003b      	movs	r3, r7
 8000fa4:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <MX_RTC_Init+0x138>)
 8000fa6:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000fa8:	003b      	movs	r3, r7
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000fae:	003b      	movs	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000fb4:	003b      	movs	r3, r7
 8000fb6:	2220      	movs	r2, #32
 8000fb8:	2101      	movs	r1, #1
 8000fba:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000fbc:	003b      	movs	r3, r7
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	0052      	lsls	r2, r2, #1
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000fc4:	0039      	movs	r1, r7
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_RTC_Init+0x130>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f002 fc4e 	bl	800386c <HAL_RTC_SetAlarm_IT>
 8000fd0:	1e03      	subs	r3, r0, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8000fd4:	f000 f988 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b010      	add	sp, #64	; 0x40
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000144 	.word	0x20000144
 8000fe4:	40002800 	.word	0x40002800
 8000fe8:	80800080 	.word	0x80800080

08000fec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	001a      	movs	r2, r3
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f004 fb79 	bl	80056f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001002:	003b      	movs	r3, r7
 8001004:	0018      	movs	r0, r3
 8001006:	2310      	movs	r3, #16
 8001008:	001a      	movs	r2, r3
 800100a:	2100      	movs	r1, #0
 800100c:	f004 fb72 	bl	80056f4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MX_TIM2_Init+0xb8>)
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	05d2      	lsls	r2, r2, #23
 8001016:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8001018:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <MX_TIM2_Init+0xb8>)
 800101a:	2210      	movs	r2, #16
 800101c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_TIM2_Init+0xb8>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2100;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_TIM2_Init+0xb8>)
 8001026:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <MX_TIM2_Init+0xbc>)
 8001028:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_TIM2_Init+0xb8>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_TIM2_Init+0xb8>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_TIM2_Init+0xb8>)
 8001038:	0018      	movs	r0, r3
 800103a:	f002 ffd3 	bl	8003fe4 <HAL_TIM_PWM_Init>
 800103e:	1e03      	subs	r3, r0, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001042:	f000 f951 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001046:	2110      	movs	r1, #16
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001054:	187a      	adds	r2, r7, r1
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_TIM2_Init+0xb8>)
 8001058:	0011      	movs	r1, r2
 800105a:	0018      	movs	r0, r3
 800105c:	f003 fd72 	bl	8004b44 <HAL_TIMEx_MasterConfigSynchronization>
 8001060:	1e03      	subs	r3, r0, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001064:	f000 f940 	bl	80012e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001068:	003b      	movs	r3, r7
 800106a:	2260      	movs	r2, #96	; 0x60
 800106c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800106e:	003b      	movs	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001074:	003b      	movs	r3, r7
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107a:	003b      	movs	r3, r7
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001080:	0039      	movs	r1, r7
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_TIM2_Init+0xb8>)
 8001084:	2200      	movs	r2, #0
 8001086:	0018      	movs	r0, r3
 8001088:	f003 f996 	bl	80043b8 <HAL_TIM_PWM_ConfigChannel>
 800108c:	1e03      	subs	r3, r0, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001090:	f000 f92a 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <MX_TIM2_Init+0xb8>)
 8001096:	0018      	movs	r0, r3
 8001098:	f000 f9e4 	bl	8001464 <HAL_TIM_MspPostInit>

}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b006      	add	sp, #24
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000168 	.word	0x20000168
 80010a8:	00000834 	.word	0x00000834

080010ac <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	2308      	movs	r3, #8
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	0018      	movs	r0, r3
 80010b8:	2310      	movs	r3, #16
 80010ba:	001a      	movs	r2, r3
 80010bc:	2100      	movs	r1, #0
 80010be:	f004 fb19 	bl	80056f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c2:	003b      	movs	r3, r7
 80010c4:	0018      	movs	r0, r3
 80010c6:	2308      	movs	r3, #8
 80010c8:	001a      	movs	r2, r3
 80010ca:	2100      	movs	r1, #0
 80010cc:	f004 fb12 	bl	80056f4 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <MX_TIM21_Init+0xa0>)
 80010d2:	4a1f      	ldr	r2, [pc, #124]	; (8001150 <MX_TIM21_Init+0xa4>)
 80010d4:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 31;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_TIM21_Init+0xa0>)
 80010d8:	221f      	movs	r2, #31
 80010da:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_TIM21_Init+0xa0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 49999;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_TIM21_Init+0xa0>)
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <MX_TIM21_Init+0xa8>)
 80010e6:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_TIM21_Init+0xa0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_TIM21_Init+0xa0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_TIM21_Init+0xa0>)
 80010f6:	0018      	movs	r0, r3
 80010f8:	f002 fec9 	bl	8003e8e <HAL_TIM_Base_Init>
 80010fc:	1e03      	subs	r3, r0, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8001100:	f000 f8f2 	bl	80012e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001104:	2108      	movs	r1, #8
 8001106:	187b      	adds	r3, r7, r1
 8001108:	2280      	movs	r2, #128	; 0x80
 800110a:	0152      	lsls	r2, r2, #5
 800110c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800110e:	187a      	adds	r2, r7, r1
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_TIM21_Init+0xa0>)
 8001112:	0011      	movs	r1, r2
 8001114:	0018      	movs	r0, r3
 8001116:	f003 fa15 	bl	8004544 <HAL_TIM_ConfigClockSource>
 800111a:	1e03      	subs	r3, r0, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 800111e:	f000 f8e3 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001122:	003b      	movs	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	003b      	movs	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 800112e:	003a      	movs	r2, r7
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_TIM21_Init+0xa0>)
 8001132:	0011      	movs	r1, r2
 8001134:	0018      	movs	r0, r3
 8001136:	f003 fd05 	bl	8004b44 <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	1e03      	subs	r3, r0, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 800113e:	f000 f8d3 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b006      	add	sp, #24
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	200001a8 	.word	0x200001a8
 8001150:	40010800 	.word	0x40010800
 8001154:	0000c34f 	.word	0x0000c34f

08001158 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 800115e:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <MX_USART2_UART_Init+0x5c>)
 8001160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 8001164:	22e1      	movs	r2, #225	; 0xe1
 8001166:	0252      	lsls	r2, r2, #9
 8001168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 800119c:	0018      	movs	r0, r3
 800119e:	f003 fd21 	bl	8004be4 <HAL_UART_Init>
 80011a2:	1e03      	subs	r3, r0, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011a6:	f000 f89f 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200001e8 	.word	0x200001e8
 80011b4:	40004400 	.word	0x40004400

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	240c      	movs	r4, #12
 80011c0:	193b      	adds	r3, r7, r4
 80011c2:	0018      	movs	r0, r3
 80011c4:	2314      	movs	r3, #20
 80011c6:	001a      	movs	r2, r3
 80011c8:	2100      	movs	r1, #0
 80011ca:	f004 fa93 	bl	80056f4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	4b43      	ldr	r3, [pc, #268]	; (80012dc <MX_GPIO_Init+0x124>)
 80011d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011d2:	4b42      	ldr	r3, [pc, #264]	; (80012dc <MX_GPIO_Init+0x124>)
 80011d4:	2104      	movs	r1, #4
 80011d6:	430a      	orrs	r2, r1
 80011d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80011da:	4b40      	ldr	r3, [pc, #256]	; (80012dc <MX_GPIO_Init+0x124>)
 80011dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011de:	2204      	movs	r2, #4
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <MX_GPIO_Init+0x124>)
 80011e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ea:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <MX_GPIO_Init+0x124>)
 80011ec:	2101      	movs	r1, #1
 80011ee:	430a      	orrs	r2, r1
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80011f2:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <MX_GPIO_Init+0x124>)
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	2201      	movs	r2, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b37      	ldr	r3, [pc, #220]	; (80012dc <MX_GPIO_Init+0x124>)
 8001200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001202:	4b36      	ldr	r3, [pc, #216]	; (80012dc <MX_GPIO_Init+0x124>)
 8001204:	2102      	movs	r1, #2
 8001206:	430a      	orrs	r2, r1
 8001208:	62da      	str	r2, [r3, #44]	; 0x2c
 800120a:	4b34      	ldr	r3, [pc, #208]	; (80012dc <MX_GPIO_Init+0x124>)
 800120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120e:	2202      	movs	r2, #2
 8001210:	4013      	ands	r3, r2
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001216:	23a0      	movs	r3, #160	; 0xa0
 8001218:	05db      	lsls	r3, r3, #23
 800121a:	2200      	movs	r2, #0
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	0018      	movs	r0, r3
 8001220:	f001 f9db 	bl	80025da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001224:	492e      	ldr	r1, [pc, #184]	; (80012e0 <MX_GPIO_Init+0x128>)
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <MX_GPIO_Init+0x12c>)
 8001228:	2200      	movs	r2, #0
 800122a:	0018      	movs	r0, r3
 800122c:	f001 f9d5 	bl	80025da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001230:	193b      	adds	r3, r7, r4
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	193b      	adds	r3, r7, r4
 8001238:	2201      	movs	r2, #1
 800123a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800123c:	193b      	adds	r3, r7, r4
 800123e:	2202      	movs	r2, #2
 8001240:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	193b      	adds	r3, r7, r4
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	193a      	adds	r2, r7, r4
 800124a:	23a0      	movs	r3, #160	; 0xa0
 800124c:	05db      	lsls	r3, r3, #23
 800124e:	0011      	movs	r1, r2
 8001250:	0018      	movs	r0, r3
 8001252:	f001 f837 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001256:	193b      	adds	r3, r7, r4
 8001258:	4a21      	ldr	r2, [pc, #132]	; (80012e0 <MX_GPIO_Init+0x128>)
 800125a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	193b      	adds	r3, r7, r4
 800125e:	2201      	movs	r2, #1
 8001260:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	193b      	adds	r3, r7, r4
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	193b      	adds	r3, r7, r4
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	193b      	adds	r3, r7, r4
 8001270:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <MX_GPIO_Init+0x12c>)
 8001272:	0019      	movs	r1, r3
 8001274:	0010      	movs	r0, r2
 8001276:	f001 f825 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800127a:	193b      	adds	r3, r7, r4
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001282:	193b      	adds	r3, r7, r4
 8001284:	2284      	movs	r2, #132	; 0x84
 8001286:	0392      	lsls	r2, r2, #14
 8001288:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	193b      	adds	r3, r7, r4
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	193a      	adds	r2, r7, r4
 8001292:	23a0      	movs	r3, #160	; 0xa0
 8001294:	05db      	lsls	r3, r3, #23
 8001296:	0011      	movs	r1, r2
 8001298:	0018      	movs	r0, r3
 800129a:	f001 f813 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800129e:	0021      	movs	r1, r4
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	2280      	movs	r2, #128	; 0x80
 80012a4:	0212      	lsls	r2, r2, #8
 80012a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	22c4      	movs	r2, #196	; 0xc4
 80012ac:	0392      	lsls	r2, r2, #14
 80012ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	187a      	adds	r2, r7, r1
 80012b8:	23a0      	movs	r3, #160	; 0xa0
 80012ba:	05db      	lsls	r3, r3, #23
 80012bc:	0011      	movs	r1, r2
 80012be:	0018      	movs	r0, r3
 80012c0:	f001 f800 	bl	80022c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2100      	movs	r1, #0
 80012c8:	2007      	movs	r0, #7
 80012ca:	f000 ffc9 	bl	8002260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80012ce:	2007      	movs	r0, #7
 80012d0:	f000 ffdb 	bl	800228a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b009      	add	sp, #36	; 0x24
 80012da:	bd90      	pop	{r4, r7, pc}
 80012dc:	40021000 	.word	0x40021000
 80012e0:	00008380 	.word	0x00008380
 80012e4:	50000400 	.word	0x50000400

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <Error_Handler+0x8>
	...

080012f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_MspInit+0x34>)
 80012fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_MspInit+0x34>)
 80012fe:	2101      	movs	r1, #1
 8001300:	430a      	orrs	r2, r1
 8001302:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_MspInit+0x34>)
 8001306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <HAL_MspInit+0x34>)
 800130a:	2180      	movs	r1, #128	; 0x80
 800130c:	0549      	lsls	r1, r1, #21
 800130e:	430a      	orrs	r2, r1
 8001310:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2004      	movs	r0, #4
 8001318:	f000 ffa2 	bl	8002260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800131c:	2004      	movs	r0, #4
 800131e:	f000 ffb4 	bl	800228a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40021000 	.word	0x40021000

0800132c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	240c      	movs	r4, #12
 8001336:	193b      	adds	r3, r7, r4
 8001338:	0018      	movs	r0, r3
 800133a:	2314      	movs	r3, #20
 800133c:	001a      	movs	r2, r3
 800133e:	2100      	movs	r1, #0
 8001340:	f004 f9d8 	bl	80056f4 <memset>
  if(hadc->Instance==ADC1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a14      	ldr	r2, [pc, #80]	; (800139c <HAL_ADC_MspInit+0x70>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d121      	bne.n	8001392 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_ADC_MspInit+0x74>)
 8001350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <HAL_ADC_MspInit+0x74>)
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	0089      	lsls	r1, r1, #2
 8001358:	430a      	orrs	r2, r1
 800135a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <HAL_ADC_MspInit+0x74>)
 800135e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_ADC_MspInit+0x74>)
 8001362:	2102      	movs	r1, #2
 8001364:	430a      	orrs	r2, r1
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <HAL_ADC_MspInit+0x74>)
 800136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136c:	2202      	movs	r2, #2
 800136e:	4013      	ands	r3, r2
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001374:	193b      	adds	r3, r7, r4
 8001376:	2202      	movs	r2, #2
 8001378:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137a:	193b      	adds	r3, r7, r4
 800137c:	2203      	movs	r2, #3
 800137e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	193b      	adds	r3, r7, r4
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001386:	193b      	adds	r3, r7, r4
 8001388:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <HAL_ADC_MspInit+0x78>)
 800138a:	0019      	movs	r1, r3
 800138c:	0010      	movs	r0, r2
 800138e:	f000 ff99 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	b009      	add	sp, #36	; 0x24
 8001398:	bd90      	pop	{r4, r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	40012400 	.word	0x40012400
 80013a0:	40021000 	.word	0x40021000
 80013a4:	50000400 	.word	0x50000400

080013a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_RTC_MspInit+0x38>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d10e      	bne.n	80013d8 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_RTC_MspInit+0x3c>)
 80013bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_RTC_MspInit+0x3c>)
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	02c9      	lsls	r1, r1, #11
 80013c4:	430a      	orrs	r2, r1
 80013c6:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	2002      	movs	r0, #2
 80013ce:	f000 ff47 	bl	8002260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80013d2:	2002      	movs	r0, #2
 80013d4:	f000 ff59 	bl	800228a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40002800 	.word	0x40002800
 80013e4:	40021000 	.word	0x40021000

080013e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	05db      	lsls	r3, r3, #23
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d10d      	bne.n	8001418 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <HAL_TIM_PWM_MspInit+0x38>)
 80013fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_TIM_PWM_MspInit+0x38>)
 8001402:	2101      	movs	r1, #1
 8001404:	430a      	orrs	r2, r1
 8001406:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	200f      	movs	r0, #15
 800140e:	f000 ff27 	bl	8002260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001412:	200f      	movs	r0, #15
 8001414:	f000 ff39 	bl	800228a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001418:	46c0      	nop			; (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b002      	add	sp, #8
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000

08001424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_TIM_Base_MspInit+0x38>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d10d      	bne.n	8001452 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_TIM_Base_MspInit+0x3c>)
 8001438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_TIM_Base_MspInit+0x3c>)
 800143c:	2104      	movs	r1, #4
 800143e:	430a      	orrs	r2, r1
 8001440:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	2014      	movs	r0, #20
 8001448:	f000 ff0a 	bl	8002260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 800144c:	2014      	movs	r0, #20
 800144e:	f000 ff1c 	bl	800228a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b002      	add	sp, #8
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	40010800 	.word	0x40010800
 8001460:	40021000 	.word	0x40021000

08001464 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	240c      	movs	r4, #12
 800146e:	193b      	adds	r3, r7, r4
 8001470:	0018      	movs	r0, r3
 8001472:	2314      	movs	r3, #20
 8001474:	001a      	movs	r2, r3
 8001476:	2100      	movs	r1, #0
 8001478:	f004 f93c 	bl	80056f4 <memset>
  if(htim->Instance==TIM2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	05db      	lsls	r3, r3, #23
 8001484:	429a      	cmp	r2, r3
 8001486:	d123      	bne.n	80014d0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <HAL_TIM_MspPostInit+0x74>)
 800148a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_TIM_MspPostInit+0x74>)
 800148e:	2101      	movs	r1, #1
 8001490:	430a      	orrs	r2, r1
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_TIM_MspPostInit+0x74>)
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	2201      	movs	r2, #1
 800149a:	4013      	ands	r3, r2
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA8     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014a0:	193b      	adds	r3, r7, r4
 80014a2:	2280      	movs	r2, #128	; 0x80
 80014a4:	0052      	lsls	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	0021      	movs	r1, r4
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	2202      	movs	r2, #2
 80014ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	187b      	adds	r3, r7, r1
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	2205      	movs	r2, #5
 80014c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	187a      	adds	r2, r7, r1
 80014c4:	23a0      	movs	r3, #160	; 0xa0
 80014c6:	05db      	lsls	r3, r3, #23
 80014c8:	0011      	movs	r1, r2
 80014ca:	0018      	movs	r0, r3
 80014cc:	f000 fefa 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b009      	add	sp, #36	; 0x24
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	40021000 	.word	0x40021000

080014dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	240c      	movs	r4, #12
 80014e6:	193b      	adds	r3, r7, r4
 80014e8:	0018      	movs	r0, r3
 80014ea:	2314      	movs	r3, #20
 80014ec:	001a      	movs	r2, r3
 80014ee:	2100      	movs	r1, #0
 80014f0:	f004 f900 	bl	80056f4 <memset>
  if(huart->Instance==USART2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a18      	ldr	r2, [pc, #96]	; (800155c <HAL_UART_MspInit+0x80>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d129      	bne.n	8001552 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_UART_MspInit+0x84>)
 8001500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <HAL_UART_MspInit+0x84>)
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0289      	lsls	r1, r1, #10
 8001508:	430a      	orrs	r2, r1
 800150a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <HAL_UART_MspInit+0x84>)
 800150e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <HAL_UART_MspInit+0x84>)
 8001512:	2101      	movs	r1, #1
 8001514:	430a      	orrs	r2, r1
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_UART_MspInit+0x84>)
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	2201      	movs	r2, #1
 800151e:	4013      	ands	r3, r2
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001524:	0021      	movs	r1, r4
 8001526:	187b      	adds	r3, r7, r1
 8001528:	220c      	movs	r2, #12
 800152a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	187b      	adds	r3, r7, r1
 800152e:	2202      	movs	r2, #2
 8001530:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	187b      	adds	r3, r7, r1
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2203      	movs	r2, #3
 800153c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2204      	movs	r2, #4
 8001542:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	187a      	adds	r2, r7, r1
 8001546:	23a0      	movs	r3, #160	; 0xa0
 8001548:	05db      	lsls	r3, r3, #23
 800154a:	0011      	movs	r1, r2
 800154c:	0018      	movs	r0, r3
 800154e:	f000 feb9 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b009      	add	sp, #36	; 0x24
 8001558:	bd90      	pop	{r4, r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	40004400 	.word	0x40004400
 8001560:	40021000 	.word	0x40021000

08001564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001568:	e7fe      	b.n	8001568 <NMI_Handler+0x4>

0800156a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <HardFault_Handler+0x4>

08001570 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001574:	46c0      	nop			; (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f000 f90e 	bl	80017a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	46c0      	nop			; (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <RTC_IRQHandler+0x14>)
 800159a:	0018      	movs	r0, r3
 800159c:	f002 fb6a 	bl	8003c74 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	20000144 	.word	0x20000144

080015ac <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	0018      	movs	r0, r3
 80015c0:	f001 f828 	bl	8002614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	0018      	movs	r0, r3
 80015ca:	f001 f823 	bl	8002614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <TIM2_IRQHandler+0x14>)
 80015da:	0018      	movs	r0, r3
 80015dc:	f002 fe04 	bl	80041e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	20000168 	.word	0x20000168

080015ec <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <TIM21_IRQHandler+0x14>)
 80015f2:	0018      	movs	r0, r3
 80015f4:	f002 fdf8 	bl	80041e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	200001a8 	.word	0x200001a8

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	18d3      	adds	r3, r2, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f004 f866 	bl	8005704 <__errno>
 8001638:	0003      	movs	r3, r0
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	2301      	movs	r3, #1
 8001640:	425b      	negs	r3, r3
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	18d2      	adds	r2, r2, r3
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <_sbrk+0x64>)
 8001654:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	b006      	add	sp, #24
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20002000 	.word	0x20002000
 8001664:	00000400 	.word	0x00000400
 8001668:	20000270 	.word	0x20000270
 800166c:	200003c0 	.word	0x200003c0

08001670 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800167c:	4813      	ldr	r0, [pc, #76]	; (80016cc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800167e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001680:	f7ff fff6 	bl	8001670 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001684:	4812      	ldr	r0, [pc, #72]	; (80016d0 <LoopForever+0x6>)
    LDR R1, [R0]
 8001686:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001688:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <LoopForever+0xa>)
    CMP R1, R2
 800168c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800168e:	d105      	bne.n	800169c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001690:	4811      	ldr	r0, [pc, #68]	; (80016d8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001692:	4912      	ldr	r1, [pc, #72]	; (80016dc <LoopForever+0x12>)
    STR R1, [R0]
 8001694:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001696:	4812      	ldr	r0, [pc, #72]	; (80016e0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001698:	4912      	ldr	r1, [pc, #72]	; (80016e4 <LoopForever+0x1a>)
    STR R1, [R0]
 800169a:	6001      	str	r1, [r0, #0]

0800169c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800169c:	4812      	ldr	r0, [pc, #72]	; (80016e8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800169e:	4913      	ldr	r1, [pc, #76]	; (80016ec <LoopForever+0x22>)
  ldr r2, =_sidata
 80016a0:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <LoopForever+0x26>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80016b4:	4c10      	ldr	r4, [pc, #64]	; (80016f8 <LoopForever+0x2e>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016c2:	f004 f825 	bl	8005710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c6:	f7ff faff 	bl	8000cc8 <main>

080016ca <LoopForever>:

LoopForever:
    b LoopForever
 80016ca:	e7fe      	b.n	80016ca <LoopForever>
   ldr   r0, =_estack
 80016cc:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 80016d0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80016d4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80016d8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80016dc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80016e0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80016e4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80016f0:	08006174 	.word	0x08006174
  ldr r2, =_sbss
 80016f4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80016f8:	200003c0 	.word	0x200003c0

080016fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC1_IRQHandler>
	...

08001700 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001706:	1dfb      	adds	r3, r7, #7
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_Init+0x3c>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_Init+0x3c>)
 8001712:	2140      	movs	r1, #64	; 0x40
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001718:	2003      	movs	r0, #3
 800171a:	f000 f811 	bl	8001740 <HAL_InitTick>
 800171e:	1e03      	subs	r3, r0, #0
 8001720:	d003      	beq.n	800172a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001722:	1dfb      	adds	r3, r7, #7
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	e001      	b.n	800172e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800172a:	f7ff fde3 	bl	80012f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800172e:	1dfb      	adds	r3, r7, #7
 8001730:	781b      	ldrb	r3, [r3, #0]
}
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	b002      	add	sp, #8
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	40022000 	.word	0x40022000

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_InitTick+0x5c>)
 800174a:	681c      	ldr	r4, [r3, #0]
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_InitTick+0x60>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	0019      	movs	r1, r3
 8001752:	23fa      	movs	r3, #250	; 0xfa
 8001754:	0098      	lsls	r0, r3, #2
 8001756:	f7fe fce9 	bl	800012c <__udivsi3>
 800175a:	0003      	movs	r3, r0
 800175c:	0019      	movs	r1, r3
 800175e:	0020      	movs	r0, r4
 8001760:	f7fe fce4 	bl	800012c <__udivsi3>
 8001764:	0003      	movs	r3, r0
 8001766:	0018      	movs	r0, r3
 8001768:	f000 fd9f 	bl	80022aa <HAL_SYSTICK_Config>
 800176c:	1e03      	subs	r3, r0, #0
 800176e:	d001      	beq.n	8001774 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e00f      	b.n	8001794 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d80b      	bhi.n	8001792 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	2301      	movs	r3, #1
 800177e:	425b      	negs	r3, r3
 8001780:	2200      	movs	r2, #0
 8001782:	0018      	movs	r0, r3
 8001784:	f000 fd6c 	bl	8002260 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_InitTick+0x64>)
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
}
 8001794:	0018      	movs	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	b003      	add	sp, #12
 800179a:	bd90      	pop	{r4, r7, pc}
 800179c:	20000004 	.word	0x20000004
 80017a0:	2000000c 	.word	0x2000000c
 80017a4:	20000008 	.word	0x20000008

080017a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_IncTick+0x1c>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	001a      	movs	r2, r3
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_IncTick+0x20>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	18d2      	adds	r2, r2, r3
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_IncTick+0x20>)
 80017ba:	601a      	str	r2, [r3, #0]
}
 80017bc:	46c0      	nop			; (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	2000000c 	.word	0x2000000c
 80017c8:	20000274 	.word	0x20000274

080017cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;
 80017d0:	4b02      	ldr	r3, [pc, #8]	; (80017dc <HAL_GetTick+0x10>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	20000274 	.word	0x20000274

080017e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e8:	f7ff fff0 	bl	80017cc <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3301      	adds	r3, #1
 80017f8:	d005      	beq.n	8001806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_Delay+0x44>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	001a      	movs	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	189b      	adds	r3, r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	f7ff ffe0 	bl	80017cc <HAL_GetTick>
 800180c:	0002      	movs	r2, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	429a      	cmp	r2, r3
 8001816:	d8f7      	bhi.n	8001808 <HAL_Delay+0x28>
  {
  }
}
 8001818:	46c0      	nop			; (mov r8, r8)
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b004      	add	sp, #16
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	2000000c 	.word	0x2000000c

08001828 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <HAL_SuspendTick+0x18>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <HAL_SuspendTick+0x18>)
 8001832:	2102      	movs	r1, #2
 8001834:	438a      	bics	r2, r1
 8001836:	601a      	str	r2, [r3, #0]
}
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <HAL_ResumeTick+0x18>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_ResumeTick+0x18>)
 800184e:	2102      	movs	r1, #2
 8001850:	430a      	orrs	r2, r1
 8001852:	601a      	str	r2, [r3, #0]
}
 8001854:	46c0      	nop			; (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	e000e010 	.word	0xe000e010

08001860 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e159      	b.n	8001b26 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10a      	bne.n	8001890 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2250      	movs	r2, #80	; 0x50
 8001884:	2100      	movs	r1, #0
 8001886:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	0018      	movs	r0, r3
 800188c:	f7ff fd4e 	bl	800132c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001894:	2210      	movs	r2, #16
 8001896:	4013      	ands	r3, r2
 8001898:	2b10      	cmp	r3, #16
 800189a:	d005      	beq.n	80018a8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2204      	movs	r2, #4
 80018a4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80018a6:	d00b      	beq.n	80018c0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ac:	2210      	movs	r2, #16
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2250      	movs	r2, #80	; 0x50
 80018b8:	2100      	movs	r1, #0
 80018ba:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e132      	b.n	8001b26 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c4:	4a9a      	ldr	r2, [pc, #616]	; (8001b30 <HAL_ADC_Init+0x2d0>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	2202      	movs	r2, #2
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2203      	movs	r2, #3
 80018d8:	4013      	ands	r3, r2
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d108      	bne.n	80018f0 <HAL_ADC_Init+0x90>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2201      	movs	r2, #1
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <HAL_ADC_Init+0x90>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_ADC_Init+0x92>
 80018f0:	2300      	movs	r3, #0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d149      	bne.n	800198a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	23c0      	movs	r3, #192	; 0xc0
 80018fc:	061b      	lsls	r3, r3, #24
 80018fe:	429a      	cmp	r2, r3
 8001900:	d00b      	beq.n	800191a <HAL_ADC_Init+0xba>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	05db      	lsls	r3, r3, #23
 800190a:	429a      	cmp	r2, r3
 800190c:	d005      	beq.n	800191a <HAL_ADC_Init+0xba>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	061b      	lsls	r3, r3, #24
 8001916:	429a      	cmp	r2, r3
 8001918:	d111      	bne.n	800193e <HAL_ADC_Init+0xde>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	0892      	lsrs	r2, r2, #2
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6919      	ldr	r1, [r3, #16]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	e014      	b.n	8001968 <HAL_ADC_Init+0x108>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0092      	lsls	r2, r2, #2
 800194a:	0892      	lsrs	r2, r2, #2
 800194c:	611a      	str	r2, [r3, #16]
 800194e:	4b79      	ldr	r3, [pc, #484]	; (8001b34 <HAL_ADC_Init+0x2d4>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b78      	ldr	r3, [pc, #480]	; (8001b34 <HAL_ADC_Init+0x2d4>)
 8001954:	4978      	ldr	r1, [pc, #480]	; (8001b38 <HAL_ADC_Init+0x2d8>)
 8001956:	400a      	ands	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	4b76      	ldr	r3, [pc, #472]	; (8001b34 <HAL_ADC_Init+0x2d4>)
 800195c:	6819      	ldr	r1, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	4b74      	ldr	r3, [pc, #464]	; (8001b34 <HAL_ADC_Init+0x2d4>)
 8001964:	430a      	orrs	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2118      	movs	r1, #24
 8001974:	438a      	bics	r2, r1
 8001976:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68d9      	ldr	r1, [r3, #12]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800198a:	4b6a      	ldr	r3, [pc, #424]	; (8001b34 <HAL_ADC_Init+0x2d4>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4b69      	ldr	r3, [pc, #420]	; (8001b34 <HAL_ADC_Init+0x2d4>)
 8001990:	496a      	ldr	r1, [pc, #424]	; (8001b3c <HAL_ADC_Init+0x2dc>)
 8001992:	400a      	ands	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001996:	4b67      	ldr	r3, [pc, #412]	; (8001b34 <HAL_ADC_Init+0x2d4>)
 8001998:	6819      	ldr	r1, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199e:	065a      	lsls	r2, r3, #25
 80019a0:	4b64      	ldr	r3, [pc, #400]	; (8001b34 <HAL_ADC_Init+0x2d4>)
 80019a2:	430a      	orrs	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	055b      	lsls	r3, r3, #21
 80019b0:	4013      	ands	r3, r2
 80019b2:	d108      	bne.n	80019c6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2180      	movs	r1, #128	; 0x80
 80019c0:	0549      	lsls	r1, r1, #21
 80019c2:	430a      	orrs	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	495b      	ldr	r1, [pc, #364]	; (8001b40 <HAL_ADC_Init+0x2e0>)
 80019d2:	400a      	ands	r2, r1
 80019d4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68d9      	ldr	r1, [r3, #12]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d101      	bne.n	80019ec <HAL_ADC_Init+0x18c>
 80019e8:	2304      	movs	r3, #4
 80019ea:	e000      	b.n	80019ee <HAL_ADC_Init+0x18e>
 80019ec:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80019ee:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2020      	movs	r0, #32
 80019f4:	5c1b      	ldrb	r3, [r3, r0]
 80019f6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80019f8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	202c      	movs	r0, #44	; 0x2c
 80019fe:	5c1b      	ldrb	r3, [r3, r0]
 8001a00:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a02:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001a08:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001a10:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001a18:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a26:	23c2      	movs	r3, #194	; 0xc2
 8001a28:	33ff      	adds	r3, #255	; 0xff
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d00b      	beq.n	8001a46 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68d9      	ldr	r1, [r3, #12]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2221      	movs	r2, #33	; 0x21
 8001a4a:	5c9b      	ldrb	r3, [r3, r2]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d11a      	bne.n	8001a86 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2220      	movs	r2, #32
 8001a54:	5c9b      	ldrb	r3, [r3, r2]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2180      	movs	r1, #128	; 0x80
 8001a66:	0249      	lsls	r1, r1, #9
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	e00b      	b.n	8001a86 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a72:	2220      	movs	r2, #32
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	2201      	movs	r2, #1
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d11f      	bne.n	8001ace <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	492a      	ldr	r1, [pc, #168]	; (8001b44 <HAL_ADC_Init+0x2e4>)
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6919      	ldr	r1, [r3, #16]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001aac:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001ab2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	611a      	str	r2, [r3, #16]
 8001acc:	e00e      	b.n	8001aec <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d107      	bne.n	8001aec <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	438a      	bics	r2, r1
 8001aea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2107      	movs	r1, #7
 8001af8:	438a      	bics	r2, r1
 8001afa:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6959      	ldr	r1, [r3, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b18:	2203      	movs	r2, #3
 8001b1a:	4393      	bics	r3, r2
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	0018      	movs	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b002      	add	sp, #8
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	fffffefd 	.word	0xfffffefd
 8001b34:	40012708 	.word	0x40012708
 8001b38:	ffc3ffff 	.word	0xffc3ffff
 8001b3c:	fdffffff 	.word	0xfdffffff
 8001b40:	fffe0219 	.word	0xfffe0219
 8001b44:	fffffc03 	.word	0xfffffc03

08001b48 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b50:	230f      	movs	r3, #15
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2204      	movs	r2, #4
 8001b60:	4013      	ands	r3, r2
 8001b62:	d138      	bne.n	8001bd6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2250      	movs	r2, #80	; 0x50
 8001b68:	5c9b      	ldrb	r3, [r3, r2]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_Start+0x2a>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e038      	b.n	8001be4 <HAL_ADC_Start+0x9c>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2250      	movs	r2, #80	; 0x50
 8001b76:	2101      	movs	r1, #1
 8001b78:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d007      	beq.n	8001b92 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001b82:	230f      	movs	r3, #15
 8001b84:	18fc      	adds	r4, r7, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f000 f981 	bl	8001e90 <ADC_Enable>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b92:	230f      	movs	r3, #15
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d120      	bne.n	8001bde <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba0:	4a12      	ldr	r2, [pc, #72]	; (8001bec <HAL_ADC_Start+0xa4>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	0052      	lsls	r2, r2, #1
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2250      	movs	r2, #80	; 0x50
 8001bb8:	2100      	movs	r1, #0
 8001bba:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	221c      	movs	r2, #28
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2104      	movs	r1, #4
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	e003      	b.n	8001bde <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bd6:	230f      	movs	r3, #15
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	2202      	movs	r2, #2
 8001bdc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bde:	230f      	movs	r3, #15
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	781b      	ldrb	r3, [r3, #0]
}
 8001be4:	0018      	movs	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b005      	add	sp, #20
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	fffff0fe 	.word	0xfffff0fe

08001bf0 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2250      	movs	r2, #80	; 0x50
 8001c04:	5c9b      	ldrb	r3, [r3, r2]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_Stop+0x1e>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e029      	b.n	8001c62 <HAL_ADC_Stop+0x72>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2250      	movs	r2, #80	; 0x50
 8001c12:	2101      	movs	r1, #1
 8001c14:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001c16:	250f      	movs	r5, #15
 8001c18:	197c      	adds	r4, r7, r5
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f000 fa06 	bl	800202e <ADC_ConversionStop>
 8001c22:	0003      	movs	r3, r0
 8001c24:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001c26:	197b      	adds	r3, r7, r5
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d112      	bne.n	8001c54 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001c2e:	197c      	adds	r4, r7, r5
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 f994 	bl	8001f60 <ADC_Disable>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001c3c:	197b      	adds	r3, r7, r5
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d107      	bne.n	8001c54 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c48:	4a08      	ldr	r2, [pc, #32]	; (8001c6c <HAL_ADC_Stop+0x7c>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2250      	movs	r2, #80	; 0x50
 8001c58:	2100      	movs	r1, #0
 8001c5a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	781b      	ldrb	r3, [r3, #0]
}
 8001c62:	0018      	movs	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b004      	add	sp, #16
 8001c68:	bdb0      	pop	{r4, r5, r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	fffffefe 	.word	0xfffffefe

08001c70 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d102      	bne.n	8001c90 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	e014      	b.n	8001cba <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d10b      	bne.n	8001cb6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2250      	movs	r2, #80	; 0x50
 8001cae:	2100      	movs	r1, #0
 8001cb0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e072      	b.n	8001d9c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001cb6:	230c      	movs	r3, #12
 8001cb8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001cba:	f7ff fd87 	bl	80017cc <HAL_GetTick>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001cc2:	e01f      	b.n	8001d04 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	d01c      	beq.n	8001d04 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d007      	beq.n	8001ce0 <HAL_ADC_PollForConversion+0x70>
 8001cd0:	f7ff fd7c 	bl	80017cc <HAL_GetTick>
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d211      	bcs.n	8001d04 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d10b      	bne.n	8001d04 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2250      	movs	r2, #80	; 0x50
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e04b      	b.n	8001d9c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d0d9      	beq.n	8001cc4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	23c0      	movs	r3, #192	; 0xc0
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d12e      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d129      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d122      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d110      	bne.n	8001d72 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	210c      	movs	r1, #12
 8001d5c:	438a      	bics	r2, r1
 8001d5e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	4a0f      	ldr	r2, [pc, #60]	; (8001da4 <HAL_ADC_PollForConversion+0x134>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	2201      	movs	r2, #1
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	655a      	str	r2, [r3, #84]	; 0x54
 8001d70:	e00b      	b.n	8001d8a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	2220      	movs	r2, #32
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	2201      	movs	r2, #1
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d103      	bne.n	8001d9a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	220c      	movs	r2, #12
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b004      	add	sp, #16
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	fffffefe 	.word	0xfffffefe

08001da8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001db6:	0018      	movs	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b002      	add	sp, #8
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2250      	movs	r2, #80	; 0x50
 8001dce:	5c9b      	ldrb	r3, [r3, r2]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x18>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e050      	b.n	8001e7a <HAL_ADC_ConfigChannel+0xba>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2250      	movs	r2, #80	; 0x50
 8001ddc:	2101      	movs	r1, #1
 8001dde:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2204      	movs	r2, #4
 8001de8:	4013      	ands	r3, r2
 8001dea:	d00b      	beq.n	8001e04 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df0:	2220      	movs	r2, #32
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2250      	movs	r2, #80	; 0x50
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e03a      	b.n	8001e7a <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <HAL_ADC_ConfigChannel+0xc4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d018      	beq.n	8001e40 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	035b      	lsls	r3, r3, #13
 8001e1a:	0b5a      	lsrs	r2, r3, #13
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	029b      	lsls	r3, r3, #10
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d01f      	beq.n	8001e70 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_ADC_ConfigChannel+0xc8>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <HAL_ADC_ConfigChannel+0xc8>)
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	03c9      	lsls	r1, r1, #15
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e017      	b.n	8001e70 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	035b      	lsls	r3, r3, #13
 8001e4c:	0b5b      	lsrs	r3, r3, #13
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	400a      	ands	r2, r1
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	029b      	lsls	r3, r3, #10
 8001e60:	4013      	ands	r3, r2
 8001e62:	d005      	beq.n	8001e70 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_ADC_ConfigChannel+0xc8>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <HAL_ADC_ConfigChannel+0xc8>)
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <HAL_ADC_ConfigChannel+0xcc>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2250      	movs	r2, #80	; 0x50
 8001e74:	2100      	movs	r1, #0
 8001e76:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b002      	add	sp, #8
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	00001001 	.word	0x00001001
 8001e88:	40012708 	.word	0x40012708
 8001e8c:	ffbfffff 	.word	0xffbfffff

08001e90 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d108      	bne.n	8001ebc <ADC_Enable+0x2c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <ADC_Enable+0x2c>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <ADC_Enable+0x2e>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d146      	bne.n	8001f50 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4a24      	ldr	r2, [pc, #144]	; (8001f5c <ADC_Enable+0xcc>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d00d      	beq.n	8001eea <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed2:	2210      	movs	r2, #16
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	2201      	movs	r2, #1
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e033      	b.n	8001f52 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f000 f8e4 	bl	80020c8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f00:	f7ff fc64 	bl	80017cc <HAL_GetTick>
 8001f04:	0003      	movs	r3, r0
 8001f06:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f08:	e01b      	b.n	8001f42 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f0a:	f7ff fc5f 	bl	80017cc <HAL_GetTick>
 8001f0e:	0002      	movs	r2, r0
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b0a      	cmp	r3, #10
 8001f16:	d914      	bls.n	8001f42 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d00d      	beq.n	8001f42 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	2201      	movs	r2, #1
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e007      	b.n	8001f52 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d1dc      	bne.n	8001f0a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b004      	add	sp, #16
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	80000017 	.word	0x80000017

08001f60 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2203      	movs	r2, #3
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d108      	bne.n	8001f8c <ADC_Disable+0x2c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2201      	movs	r2, #1
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <ADC_Disable+0x2c>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <ADC_Disable+0x2e>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d048      	beq.n	8002024 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2205      	movs	r2, #5
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d110      	bne.n	8001fc2 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2102      	movs	r1, #2
 8001fac:	430a      	orrs	r2, r1
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fb8:	f7ff fc08 	bl	80017cc <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fc0:	e029      	b.n	8002016 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	2210      	movs	r2, #16
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e023      	b.n	8002026 <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fde:	f7ff fbf5 	bl	80017cc <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b0a      	cmp	r3, #10
 8001fea:	d914      	bls.n	8002016 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10d      	bne.n	8002016 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	2210      	movs	r2, #16
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	2201      	movs	r2, #1
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e007      	b.n	8002026 <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2201      	movs	r2, #1
 800201e:	4013      	ands	r3, r2
 8002020:	2b01      	cmp	r3, #1
 8002022:	d0dc      	beq.n	8001fde <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	0018      	movs	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	b004      	add	sp, #16
 800202c:	bd80      	pop	{r7, pc}

0800202e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2204      	movs	r2, #4
 8002042:	4013      	ands	r3, r2
 8002044:	d03a      	beq.n	80020bc <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2204      	movs	r2, #4
 800204e:	4013      	ands	r3, r2
 8002050:	2b04      	cmp	r3, #4
 8002052:	d10d      	bne.n	8002070 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2202      	movs	r2, #2
 800205c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800205e:	d107      	bne.n	8002070 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2110      	movs	r1, #16
 800206c:	430a      	orrs	r2, r1
 800206e:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002070:	f7ff fbac 	bl	80017cc <HAL_GetTick>
 8002074:	0003      	movs	r3, r0
 8002076:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002078:	e01a      	b.n	80020b0 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800207a:	f7ff fba7 	bl	80017cc <HAL_GetTick>
 800207e:	0002      	movs	r2, r0
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b0a      	cmp	r3, #10
 8002086:	d913      	bls.n	80020b0 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2204      	movs	r2, #4
 8002090:	4013      	ands	r3, r2
 8002092:	d00d      	beq.n	80020b0 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	2210      	movs	r2, #16
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	2201      	movs	r2, #1
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e006      	b.n	80020be <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2204      	movs	r2, #4
 80020b8:	4013      	ands	r3, r2
 80020ba:	d1de      	bne.n	800207a <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b004      	add	sp, #16
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <ADC_DelayMicroSecond+0x38>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	490b      	ldr	r1, [pc, #44]	; (8002104 <ADC_DelayMicroSecond+0x3c>)
 80020d6:	0018      	movs	r0, r3
 80020d8:	f7fe f828 	bl	800012c <__udivsi3>
 80020dc:	0003      	movs	r3, r0
 80020de:	001a      	movs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4353      	muls	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80020e6:	e002      	b.n	80020ee <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f9      	bne.n	80020e8 <ADC_DelayMicroSecond+0x20>
  }
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b004      	add	sp, #16
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	20000004 	.word	0x20000004
 8002104:	000f4240 	.word	0x000f4240

08002108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	0002      	movs	r2, r0
 8002110:	1dfb      	adds	r3, r7, #7
 8002112:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002114:	1dfb      	adds	r3, r7, #7
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b7f      	cmp	r3, #127	; 0x7f
 800211a:	d809      	bhi.n	8002130 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211c:	1dfb      	adds	r3, r7, #7
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	001a      	movs	r2, r3
 8002122:	231f      	movs	r3, #31
 8002124:	401a      	ands	r2, r3
 8002126:	4b04      	ldr	r3, [pc, #16]	; (8002138 <__NVIC_EnableIRQ+0x30>)
 8002128:	2101      	movs	r1, #1
 800212a:	4091      	lsls	r1, r2
 800212c:	000a      	movs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]
  }
}
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bd80      	pop	{r7, pc}
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	0002      	movs	r2, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	1dfb      	adds	r3, r7, #7
 8002148:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800214a:	1dfb      	adds	r3, r7, #7
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b7f      	cmp	r3, #127	; 0x7f
 8002150:	d828      	bhi.n	80021a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002152:	4a2f      	ldr	r2, [pc, #188]	; (8002210 <__NVIC_SetPriority+0xd4>)
 8002154:	1dfb      	adds	r3, r7, #7
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b25b      	sxtb	r3, r3
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	33c0      	adds	r3, #192	; 0xc0
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	589b      	ldr	r3, [r3, r2]
 8002162:	1dfa      	adds	r2, r7, #7
 8002164:	7812      	ldrb	r2, [r2, #0]
 8002166:	0011      	movs	r1, r2
 8002168:	2203      	movs	r2, #3
 800216a:	400a      	ands	r2, r1
 800216c:	00d2      	lsls	r2, r2, #3
 800216e:	21ff      	movs	r1, #255	; 0xff
 8002170:	4091      	lsls	r1, r2
 8002172:	000a      	movs	r2, r1
 8002174:	43d2      	mvns	r2, r2
 8002176:	401a      	ands	r2, r3
 8002178:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	019b      	lsls	r3, r3, #6
 800217e:	22ff      	movs	r2, #255	; 0xff
 8002180:	401a      	ands	r2, r3
 8002182:	1dfb      	adds	r3, r7, #7
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	0018      	movs	r0, r3
 8002188:	2303      	movs	r3, #3
 800218a:	4003      	ands	r3, r0
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002190:	481f      	ldr	r0, [pc, #124]	; (8002210 <__NVIC_SetPriority+0xd4>)
 8002192:	1dfb      	adds	r3, r7, #7
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	b25b      	sxtb	r3, r3
 8002198:	089b      	lsrs	r3, r3, #2
 800219a:	430a      	orrs	r2, r1
 800219c:	33c0      	adds	r3, #192	; 0xc0
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80021a2:	e031      	b.n	8002208 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021a4:	4a1b      	ldr	r2, [pc, #108]	; (8002214 <__NVIC_SetPriority+0xd8>)
 80021a6:	1dfb      	adds	r3, r7, #7
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	0019      	movs	r1, r3
 80021ac:	230f      	movs	r3, #15
 80021ae:	400b      	ands	r3, r1
 80021b0:	3b08      	subs	r3, #8
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3306      	adds	r3, #6
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	18d3      	adds	r3, r2, r3
 80021ba:	3304      	adds	r3, #4
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	1dfa      	adds	r2, r7, #7
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	0011      	movs	r1, r2
 80021c4:	2203      	movs	r2, #3
 80021c6:	400a      	ands	r2, r1
 80021c8:	00d2      	lsls	r2, r2, #3
 80021ca:	21ff      	movs	r1, #255	; 0xff
 80021cc:	4091      	lsls	r1, r2
 80021ce:	000a      	movs	r2, r1
 80021d0:	43d2      	mvns	r2, r2
 80021d2:	401a      	ands	r2, r3
 80021d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	019b      	lsls	r3, r3, #6
 80021da:	22ff      	movs	r2, #255	; 0xff
 80021dc:	401a      	ands	r2, r3
 80021de:	1dfb      	adds	r3, r7, #7
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	0018      	movs	r0, r3
 80021e4:	2303      	movs	r3, #3
 80021e6:	4003      	ands	r3, r0
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021ec:	4809      	ldr	r0, [pc, #36]	; (8002214 <__NVIC_SetPriority+0xd8>)
 80021ee:	1dfb      	adds	r3, r7, #7
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	001c      	movs	r4, r3
 80021f4:	230f      	movs	r3, #15
 80021f6:	4023      	ands	r3, r4
 80021f8:	3b08      	subs	r3, #8
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	430a      	orrs	r2, r1
 80021fe:	3306      	adds	r3, #6
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	18c3      	adds	r3, r0, r3
 8002204:	3304      	adds	r3, #4
 8002206:	601a      	str	r2, [r3, #0]
}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b003      	add	sp, #12
 800220e:	bd90      	pop	{r4, r7, pc}
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	1e5a      	subs	r2, r3, #1
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	045b      	lsls	r3, r3, #17
 8002228:	429a      	cmp	r2, r3
 800222a:	d301      	bcc.n	8002230 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222c:	2301      	movs	r3, #1
 800222e:	e010      	b.n	8002252 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <SysTick_Config+0x44>)
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	3a01      	subs	r2, #1
 8002236:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002238:	2301      	movs	r3, #1
 800223a:	425b      	negs	r3, r3
 800223c:	2103      	movs	r1, #3
 800223e:	0018      	movs	r0, r3
 8002240:	f7ff ff7c 	bl	800213c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <SysTick_Config+0x44>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <SysTick_Config+0x44>)
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002250:	2300      	movs	r3, #0
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b002      	add	sp, #8
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	e000e010 	.word	0xe000e010

08002260 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	210f      	movs	r1, #15
 800226c:	187b      	adds	r3, r7, r1
 800226e:	1c02      	adds	r2, r0, #0
 8002270:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	187b      	adds	r3, r7, r1
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b25b      	sxtb	r3, r3
 800227a:	0011      	movs	r1, r2
 800227c:	0018      	movs	r0, r3
 800227e:	f7ff ff5d 	bl	800213c <__NVIC_SetPriority>
}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	46bd      	mov	sp, r7
 8002286:	b004      	add	sp, #16
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	0002      	movs	r2, r0
 8002292:	1dfb      	adds	r3, r7, #7
 8002294:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002296:	1dfb      	adds	r3, r7, #7
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	b25b      	sxtb	r3, r3
 800229c:	0018      	movs	r0, r3
 800229e:	f7ff ff33 	bl	8002108 <__NVIC_EnableIRQ>
}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b002      	add	sp, #8
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7ff ffaf 	bl	8002218 <SysTick_Config>
 80022ba:	0003      	movs	r3, r0
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80022da:	e149      	b.n	8002570 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2101      	movs	r1, #1
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4091      	lsls	r1, r2
 80022e6:	000a      	movs	r2, r1
 80022e8:	4013      	ands	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d100      	bne.n	80022f4 <HAL_GPIO_Init+0x30>
 80022f2:	e13a      	b.n	800256a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2203      	movs	r2, #3
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d005      	beq.n	800230c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2203      	movs	r2, #3
 8002306:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002308:	2b02      	cmp	r3, #2
 800230a:	d130      	bne.n	800236e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	409a      	lsls	r2, r3
 800231a:	0013      	movs	r3, r2
 800231c:	43da      	mvns	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	409a      	lsls	r2, r3
 800232e:	0013      	movs	r3, r2
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002342:	2201      	movs	r2, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	409a      	lsls	r2, r3
 8002348:	0013      	movs	r3, r2
 800234a:	43da      	mvns	r2, r3
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	2201      	movs	r2, #1
 800235a:	401a      	ands	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2203      	movs	r2, #3
 8002374:	4013      	ands	r3, r2
 8002376:	2b03      	cmp	r3, #3
 8002378:	d017      	beq.n	80023aa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	2203      	movs	r2, #3
 8002386:	409a      	lsls	r2, r3
 8002388:	0013      	movs	r3, r2
 800238a:	43da      	mvns	r2, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	409a      	lsls	r2, r3
 800239c:	0013      	movs	r3, r2
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2203      	movs	r2, #3
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d123      	bne.n	80023fe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	08da      	lsrs	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	0092      	lsls	r2, r2, #2
 80023c0:	58d3      	ldr	r3, [r2, r3]
 80023c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2207      	movs	r2, #7
 80023c8:	4013      	ands	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	409a      	lsls	r2, r3
 80023d0:	0013      	movs	r3, r2
 80023d2:	43da      	mvns	r2, r3
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2107      	movs	r1, #7
 80023e2:	400b      	ands	r3, r1
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	409a      	lsls	r2, r3
 80023e8:	0013      	movs	r3, r2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	08da      	lsrs	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3208      	adds	r2, #8
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	6939      	ldr	r1, [r7, #16]
 80023fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	409a      	lsls	r2, r3
 800240c:	0013      	movs	r3, r2
 800240e:	43da      	mvns	r2, r3
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2203      	movs	r2, #3
 800241c:	401a      	ands	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	409a      	lsls	r2, r3
 8002424:	0013      	movs	r3, r2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	23c0      	movs	r3, #192	; 0xc0
 8002438:	029b      	lsls	r3, r3, #10
 800243a:	4013      	ands	r3, r2
 800243c:	d100      	bne.n	8002440 <HAL_GPIO_Init+0x17c>
 800243e:	e094      	b.n	800256a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002440:	4b51      	ldr	r3, [pc, #324]	; (8002588 <HAL_GPIO_Init+0x2c4>)
 8002442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002444:	4b50      	ldr	r3, [pc, #320]	; (8002588 <HAL_GPIO_Init+0x2c4>)
 8002446:	2101      	movs	r1, #1
 8002448:	430a      	orrs	r2, r1
 800244a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800244c:	4a4f      	ldr	r2, [pc, #316]	; (800258c <HAL_GPIO_Init+0x2c8>)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	589b      	ldr	r3, [r3, r2]
 8002458:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2203      	movs	r2, #3
 800245e:	4013      	ands	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	220f      	movs	r2, #15
 8002464:	409a      	lsls	r2, r3
 8002466:	0013      	movs	r3, r2
 8002468:	43da      	mvns	r2, r3
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	23a0      	movs	r3, #160	; 0xa0
 8002474:	05db      	lsls	r3, r3, #23
 8002476:	429a      	cmp	r2, r3
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0x1de>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a44      	ldr	r2, [pc, #272]	; (8002590 <HAL_GPIO_Init+0x2cc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00d      	beq.n	800249e <HAL_GPIO_Init+0x1da>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a43      	ldr	r2, [pc, #268]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d007      	beq.n	800249a <HAL_GPIO_Init+0x1d6>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a42      	ldr	r2, [pc, #264]	; (8002598 <HAL_GPIO_Init+0x2d4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d101      	bne.n	8002496 <HAL_GPIO_Init+0x1d2>
 8002492:	2305      	movs	r3, #5
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x1e0>
 8002496:	2306      	movs	r3, #6
 8002498:	e004      	b.n	80024a4 <HAL_GPIO_Init+0x1e0>
 800249a:	2302      	movs	r3, #2
 800249c:	e002      	b.n	80024a4 <HAL_GPIO_Init+0x1e0>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_GPIO_Init+0x1e0>
 80024a2:	2300      	movs	r3, #0
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	2103      	movs	r1, #3
 80024a8:	400a      	ands	r2, r1
 80024aa:	0092      	lsls	r2, r2, #2
 80024ac:	4093      	lsls	r3, r2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b4:	4935      	ldr	r1, [pc, #212]	; (800258c <HAL_GPIO_Init+0x2c8>)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	3302      	adds	r3, #2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c2:	4b36      	ldr	r3, [pc, #216]	; (800259c <HAL_GPIO_Init+0x2d8>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43da      	mvns	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	035b      	lsls	r3, r3, #13
 80024da:	4013      	ands	r3, r2
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024e6:	4b2d      	ldr	r3, [pc, #180]	; (800259c <HAL_GPIO_Init+0x2d8>)
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <HAL_GPIO_Init+0x2d8>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43da      	mvns	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	039b      	lsls	r3, r3, #14
 8002504:	4013      	ands	r3, r2
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002510:	4b22      	ldr	r3, [pc, #136]	; (800259c <HAL_GPIO_Init+0x2d8>)
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002516:	4b21      	ldr	r3, [pc, #132]	; (800259c <HAL_GPIO_Init+0x2d8>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	43da      	mvns	r2, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	029b      	lsls	r3, r3, #10
 800252e:	4013      	ands	r3, r2
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_GPIO_Init+0x2d8>)
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <HAL_GPIO_Init+0x2d8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	43da      	mvns	r2, r3
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	025b      	lsls	r3, r3, #9
 8002558:	4013      	ands	r3, r2
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002564:	4b0d      	ldr	r3, [pc, #52]	; (800259c <HAL_GPIO_Init+0x2d8>)
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3301      	adds	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	40da      	lsrs	r2, r3
 8002578:	1e13      	subs	r3, r2, #0
 800257a:	d000      	beq.n	800257e <HAL_GPIO_Init+0x2ba>
 800257c:	e6ae      	b.n	80022dc <HAL_GPIO_Init+0x18>
  }
}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	b006      	add	sp, #24
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	40010000 	.word	0x40010000
 8002590:	50000400 	.word	0x50000400
 8002594:	50000800 	.word	0x50000800
 8002598:	50001c00 	.word	0x50001c00
 800259c:	40010400 	.word	0x40010400

080025a0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	000a      	movs	r2, r1
 80025aa:	1cbb      	adds	r3, r7, #2
 80025ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	1cba      	adds	r2, r7, #2
 80025b4:	8812      	ldrh	r2, [r2, #0]
 80025b6:	4013      	ands	r3, r2
 80025b8:	d004      	beq.n	80025c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80025ba:	230f      	movs	r3, #15
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
 80025c2:	e003      	b.n	80025cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025c4:	230f      	movs	r3, #15
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80025cc:	230f      	movs	r3, #15
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	781b      	ldrb	r3, [r3, #0]
}
 80025d2:	0018      	movs	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b004      	add	sp, #16
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	0008      	movs	r0, r1
 80025e4:	0011      	movs	r1, r2
 80025e6:	1cbb      	adds	r3, r7, #2
 80025e8:	1c02      	adds	r2, r0, #0
 80025ea:	801a      	strh	r2, [r3, #0]
 80025ec:	1c7b      	adds	r3, r7, #1
 80025ee:	1c0a      	adds	r2, r1, #0
 80025f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025f2:	1c7b      	adds	r3, r7, #1
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d004      	beq.n	8002604 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fa:	1cbb      	adds	r3, r7, #2
 80025fc:	881a      	ldrh	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002602:	e003      	b.n	800260c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002604:	1cbb      	adds	r3, r7, #2
 8002606:	881a      	ldrh	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	0002      	movs	r2, r0
 800261c:	1dbb      	adds	r3, r7, #6
 800261e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	1dba      	adds	r2, r7, #6
 8002626:	8812      	ldrh	r2, [r2, #0]
 8002628:	4013      	ands	r3, r2
 800262a:	d008      	beq.n	800263e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800262e:	1dba      	adds	r2, r7, #6
 8002630:	8812      	ldrh	r2, [r2, #0]
 8002632:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002634:	1dbb      	adds	r3, r7, #6
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	0018      	movs	r0, r3
 800263a:	f7fe f85d 	bl	80006f8 <HAL_GPIO_EXTI_Callback>
  }
}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	46bd      	mov	sp, r7
 8002642:	b002      	add	sp, #8
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	40010400 	.word	0x40010400

0800264c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002656:	2180      	movs	r1, #128	; 0x80
 8002658:	0049      	lsls	r1, r1, #1
 800265a:	430a      	orrs	r2, r1
 800265c:	601a      	str	r2, [r3, #0]
}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40007000 	.word	0x40007000

08002668 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	000a      	movs	r2, r1
 8002672:	1cfb      	adds	r3, r7, #3
 8002674:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800267a:	4b25      	ldr	r3, [pc, #148]	; (8002710 <HAL_PWR_EnterSTOPMode+0xa8>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002686:	4b23      	ldr	r3, [pc, #140]	; (8002714 <HAL_PWR_EnterSTOPMode+0xac>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	2201      	movs	r2, #1
 800268c:	4013      	ands	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_PWR_EnterSTOPMode+0x40>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_PWR_EnterSTOPMode+0xa8>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <HAL_PWR_EnterSTOPMode+0xa8>)
 80026a2:	491d      	ldr	r1, [pc, #116]	; (8002718 <HAL_PWR_EnterSTOPMode+0xb0>)
 80026a4:	400a      	ands	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80026a8:	4b19      	ldr	r3, [pc, #100]	; (8002710 <HAL_PWR_EnterSTOPMode+0xa8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2203      	movs	r2, #3
 80026b2:	4393      	bics	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <HAL_PWR_EnterSTOPMode+0xa8>)
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80026c4:	4b15      	ldr	r3, [pc, #84]	; (800271c <HAL_PWR_EnterSTOPMode+0xb4>)
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <HAL_PWR_EnterSTOPMode+0xb4>)
 80026ca:	2104      	movs	r1, #4
 80026cc:	430a      	orrs	r2, r1
 80026ce:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80026d0:	1cfb      	adds	r3, r7, #3
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80026d8:	bf30      	wfi
 80026da:	e002      	b.n	80026e2 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80026dc:	bf40      	sev
    __WFE();
 80026de:	bf20      	wfe
    __WFE();
 80026e0:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <HAL_PWR_EnterSTOPMode+0xb4>)
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_PWR_EnterSTOPMode+0xb4>)
 80026e8:	2104      	movs	r1, #4
 80026ea:	438a      	bics	r2, r1
 80026ec:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d009      	beq.n	8002708 <HAL_PWR_EnterSTOPMode+0xa0>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d006      	beq.n	8002708 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_PWR_EnterSTOPMode+0xa8>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b04      	ldr	r3, [pc, #16]	; (8002710 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	0089      	lsls	r1, r1, #2
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]
  }
}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b006      	add	sp, #24
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40007000 	.word	0x40007000
 8002714:	40010000 	.word	0x40010000
 8002718:	fffffdff 	.word	0xfffffdff
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002720:	b5b0      	push	{r4, r5, r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	f000 fb6c 	bl	8002e0c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002734:	4bc8      	ldr	r3, [pc, #800]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	220c      	movs	r2, #12
 800273a:	4013      	ands	r3, r2
 800273c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800273e:	4bc6      	ldr	r3, [pc, #792]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	025b      	lsls	r3, r3, #9
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2201      	movs	r2, #1
 8002750:	4013      	ands	r3, r2
 8002752:	d100      	bne.n	8002756 <HAL_RCC_OscConfig+0x36>
 8002754:	e07d      	b.n	8002852 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d007      	beq.n	800276c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b0c      	cmp	r3, #12
 8002760:	d112      	bne.n	8002788 <HAL_RCC_OscConfig+0x68>
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	025b      	lsls	r3, r3, #9
 8002768:	429a      	cmp	r2, r3
 800276a:	d10d      	bne.n	8002788 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	4bba      	ldr	r3, [pc, #744]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	029b      	lsls	r3, r3, #10
 8002774:	4013      	ands	r3, r2
 8002776:	d100      	bne.n	800277a <HAL_RCC_OscConfig+0x5a>
 8002778:	e06a      	b.n	8002850 <HAL_RCC_OscConfig+0x130>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d166      	bne.n	8002850 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	f000 fb42 	bl	8002e0c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	025b      	lsls	r3, r3, #9
 8002790:	429a      	cmp	r2, r3
 8002792:	d107      	bne.n	80027a4 <HAL_RCC_OscConfig+0x84>
 8002794:	4bb0      	ldr	r3, [pc, #704]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4baf      	ldr	r3, [pc, #700]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 800279a:	2180      	movs	r1, #128	; 0x80
 800279c:	0249      	lsls	r1, r1, #9
 800279e:	430a      	orrs	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e027      	b.n	80027f4 <HAL_RCC_OscConfig+0xd4>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	23a0      	movs	r3, #160	; 0xa0
 80027aa:	02db      	lsls	r3, r3, #11
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d10e      	bne.n	80027ce <HAL_RCC_OscConfig+0xae>
 80027b0:	4ba9      	ldr	r3, [pc, #676]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4ba8      	ldr	r3, [pc, #672]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80027b6:	2180      	movs	r1, #128	; 0x80
 80027b8:	02c9      	lsls	r1, r1, #11
 80027ba:	430a      	orrs	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	4ba6      	ldr	r3, [pc, #664]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4ba5      	ldr	r3, [pc, #660]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	0249      	lsls	r1, r1, #9
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e012      	b.n	80027f4 <HAL_RCC_OscConfig+0xd4>
 80027ce:	4ba2      	ldr	r3, [pc, #648]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4ba1      	ldr	r3, [pc, #644]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80027d4:	49a1      	ldr	r1, [pc, #644]	; (8002a5c <HAL_RCC_OscConfig+0x33c>)
 80027d6:	400a      	ands	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	4b9f      	ldr	r3, [pc, #636]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	025b      	lsls	r3, r3, #9
 80027e2:	4013      	ands	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4b9b      	ldr	r3, [pc, #620]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b9a      	ldr	r3, [pc, #616]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80027ee:	499c      	ldr	r1, [pc, #624]	; (8002a60 <HAL_RCC_OscConfig+0x340>)
 80027f0:	400a      	ands	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d014      	beq.n	8002826 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7fe ffe6 	bl	80017cc <HAL_GetTick>
 8002800:	0003      	movs	r3, r0
 8002802:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002806:	f7fe ffe1 	bl	80017cc <HAL_GetTick>
 800280a:	0002      	movs	r2, r0
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b64      	cmp	r3, #100	; 0x64
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e2f9      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002818:	4b8f      	ldr	r3, [pc, #572]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	029b      	lsls	r3, r3, #10
 8002820:	4013      	ands	r3, r2
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0xe6>
 8002824:	e015      	b.n	8002852 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe ffd1 	bl	80017cc <HAL_GetTick>
 800282a:	0003      	movs	r3, r0
 800282c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002830:	f7fe ffcc 	bl	80017cc <HAL_GetTick>
 8002834:	0002      	movs	r2, r0
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	; 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e2e4      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002842:	4b85      	ldr	r3, [pc, #532]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	029b      	lsls	r3, r3, #10
 800284a:	4013      	ands	r3, r2
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x110>
 800284e:	e000      	b.n	8002852 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2202      	movs	r2, #2
 8002858:	4013      	ands	r3, r2
 800285a:	d100      	bne.n	800285e <HAL_RCC_OscConfig+0x13e>
 800285c:	e099      	b.n	8002992 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	2220      	movs	r2, #32
 8002868:	4013      	ands	r3, r2
 800286a:	d009      	beq.n	8002880 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800286c:	4b7a      	ldr	r3, [pc, #488]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b79      	ldr	r3, [pc, #484]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 8002872:	2120      	movs	r1, #32
 8002874:	430a      	orrs	r2, r1
 8002876:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	2220      	movs	r2, #32
 800287c:	4393      	bics	r3, r2
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b04      	cmp	r3, #4
 8002884:	d005      	beq.n	8002892 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	2b0c      	cmp	r3, #12
 800288a:	d13e      	bne.n	800290a <HAL_RCC_OscConfig+0x1ea>
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d13b      	bne.n	800290a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002892:	4b71      	ldr	r3, [pc, #452]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2204      	movs	r2, #4
 8002898:	4013      	ands	r3, r2
 800289a:	d004      	beq.n	80028a6 <HAL_RCC_OscConfig+0x186>
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e2b2      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a6:	4b6c      	ldr	r3, [pc, #432]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4a6e      	ldr	r2, [pc, #440]	; (8002a64 <HAL_RCC_OscConfig+0x344>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	0019      	movs	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	021a      	lsls	r2, r3, #8
 80028b6:	4b68      	ldr	r3, [pc, #416]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80028b8:	430a      	orrs	r2, r1
 80028ba:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80028bc:	4b66      	ldr	r3, [pc, #408]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2209      	movs	r2, #9
 80028c2:	4393      	bics	r3, r2
 80028c4:	0019      	movs	r1, r3
 80028c6:	4b64      	ldr	r3, [pc, #400]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80028c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ce:	f000 fbeb 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 80028d2:	0001      	movs	r1, r0
 80028d4:	4b60      	ldr	r3, [pc, #384]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	220f      	movs	r2, #15
 80028dc:	4013      	ands	r3, r2
 80028de:	4a62      	ldr	r2, [pc, #392]	; (8002a68 <HAL_RCC_OscConfig+0x348>)
 80028e0:	5cd3      	ldrb	r3, [r2, r3]
 80028e2:	000a      	movs	r2, r1
 80028e4:	40da      	lsrs	r2, r3
 80028e6:	4b61      	ldr	r3, [pc, #388]	; (8002a6c <HAL_RCC_OscConfig+0x34c>)
 80028e8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80028ea:	4b61      	ldr	r3, [pc, #388]	; (8002a70 <HAL_RCC_OscConfig+0x350>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2513      	movs	r5, #19
 80028f0:	197c      	adds	r4, r7, r5
 80028f2:	0018      	movs	r0, r3
 80028f4:	f7fe ff24 	bl	8001740 <HAL_InitTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80028fc:	197b      	adds	r3, r7, r5
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d046      	beq.n	8002992 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002904:	197b      	adds	r3, r7, r5
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	e280      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	2b00      	cmp	r3, #0
 800290e:	d027      	beq.n	8002960 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002910:	4b51      	ldr	r3, [pc, #324]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2209      	movs	r2, #9
 8002916:	4393      	bics	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 800291c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291e:	430a      	orrs	r2, r1
 8002920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002922:	f7fe ff53 	bl	80017cc <HAL_GetTick>
 8002926:	0003      	movs	r3, r0
 8002928:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800292c:	f7fe ff4e 	bl	80017cc <HAL_GetTick>
 8002930:	0002      	movs	r2, r0
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e266      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800293e:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2204      	movs	r2, #4
 8002944:	4013      	ands	r3, r2
 8002946:	d0f1      	beq.n	800292c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002948:	4b43      	ldr	r3, [pc, #268]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4a45      	ldr	r2, [pc, #276]	; (8002a64 <HAL_RCC_OscConfig+0x344>)
 800294e:	4013      	ands	r3, r2
 8002950:	0019      	movs	r1, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	021a      	lsls	r2, r3, #8
 8002958:	4b3f      	ldr	r3, [pc, #252]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	e018      	b.n	8002992 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002960:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b3c      	ldr	r3, [pc, #240]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 8002966:	2101      	movs	r1, #1
 8002968:	438a      	bics	r2, r1
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7fe ff2e 	bl	80017cc <HAL_GetTick>
 8002970:	0003      	movs	r3, r0
 8002972:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002976:	f7fe ff29 	bl	80017cc <HAL_GetTick>
 800297a:	0002      	movs	r2, r0
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e241      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002988:	4b33      	ldr	r3, [pc, #204]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2204      	movs	r2, #4
 800298e:	4013      	ands	r3, r2
 8002990:	d1f1      	bne.n	8002976 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2210      	movs	r2, #16
 8002998:	4013      	ands	r3, r2
 800299a:	d100      	bne.n	800299e <HAL_RCC_OscConfig+0x27e>
 800299c:	e0a1      	b.n	8002ae2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d140      	bne.n	8002a26 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029a4:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4013      	ands	r3, r2
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_OscConfig+0x29c>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e227      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029bc:	4b26      	ldr	r3, [pc, #152]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4a2c      	ldr	r2, [pc, #176]	; (8002a74 <HAL_RCC_OscConfig+0x354>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	0019      	movs	r1, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1a      	ldr	r2, [r3, #32]
 80029ca:	4b23      	ldr	r3, [pc, #140]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80029cc:	430a      	orrs	r2, r1
 80029ce:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029d0:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	0a19      	lsrs	r1, r3, #8
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	061a      	lsls	r2, r3, #24
 80029de:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80029e0:	430a      	orrs	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	0b5b      	lsrs	r3, r3, #13
 80029ea:	3301      	adds	r3, #1
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	0212      	lsls	r2, r2, #8
 80029f0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80029f2:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	210f      	movs	r1, #15
 80029fa:	400b      	ands	r3, r1
 80029fc:	491a      	ldr	r1, [pc, #104]	; (8002a68 <HAL_RCC_OscConfig+0x348>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <HAL_RCC_OscConfig+0x34c>)
 8002a04:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002a06:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <HAL_RCC_OscConfig+0x350>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2513      	movs	r5, #19
 8002a0c:	197c      	adds	r4, r7, r5
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f7fe fe96 	bl	8001740 <HAL_InitTick>
 8002a14:	0003      	movs	r3, r0
 8002a16:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002a18:	197b      	adds	r3, r7, r5
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d060      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002a20:	197b      	adds	r3, r7, r5
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	e1f2      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d03f      	beq.n	8002aae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_RCC_OscConfig+0x338>)
 8002a34:	2180      	movs	r1, #128	; 0x80
 8002a36:	0049      	lsls	r1, r1, #1
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fec6 	bl	80017cc <HAL_GetTick>
 8002a40:	0003      	movs	r3, r0
 8002a42:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a44:	e018      	b.n	8002a78 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a46:	f7fe fec1 	bl	80017cc <HAL_GetTick>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d911      	bls.n	8002a78 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e1d9      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	fffeffff 	.word	0xfffeffff
 8002a60:	fffbffff 	.word	0xfffbffff
 8002a64:	ffffe0ff 	.word	0xffffe0ff
 8002a68:	080060c4 	.word	0x080060c4
 8002a6c:	20000004 	.word	0x20000004
 8002a70:	20000008 	.word	0x20000008
 8002a74:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a78:	4bc9      	ldr	r3, [pc, #804]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4013      	ands	r3, r2
 8002a82:	d0e0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a84:	4bc6      	ldr	r3, [pc, #792]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	4ac6      	ldr	r2, [pc, #792]	; (8002da4 <HAL_RCC_OscConfig+0x684>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	0019      	movs	r1, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1a      	ldr	r2, [r3, #32]
 8002a92:	4bc3      	ldr	r3, [pc, #780]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002a94:	430a      	orrs	r2, r1
 8002a96:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a98:	4bc1      	ldr	r3, [pc, #772]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	0a19      	lsrs	r1, r3, #8
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	061a      	lsls	r2, r3, #24
 8002aa6:	4bbe      	ldr	r3, [pc, #760]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	e019      	b.n	8002ae2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002aae:	4bbc      	ldr	r3, [pc, #752]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4bbb      	ldr	r3, [pc, #748]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002ab4:	49bc      	ldr	r1, [pc, #752]	; (8002da8 <HAL_RCC_OscConfig+0x688>)
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aba:	f7fe fe87 	bl	80017cc <HAL_GetTick>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ac4:	f7fe fe82 	bl	80017cc <HAL_GetTick>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e19a      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ad6:	4bb2      	ldr	r3, [pc, #712]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d036      	beq.n	8002b5a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d019      	beq.n	8002b28 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af4:	4baa      	ldr	r3, [pc, #680]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002af6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002af8:	4ba9      	ldr	r3, [pc, #676]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002afa:	2101      	movs	r1, #1
 8002afc:	430a      	orrs	r2, r1
 8002afe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b00:	f7fe fe64 	bl	80017cc <HAL_GetTick>
 8002b04:	0003      	movs	r3, r0
 8002b06:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0a:	f7fe fe5f 	bl	80017cc <HAL_GetTick>
 8002b0e:	0002      	movs	r2, r0
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e177      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b1c:	4ba0      	ldr	r3, [pc, #640]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b20:	2202      	movs	r2, #2
 8002b22:	4013      	ands	r3, r2
 8002b24:	d0f1      	beq.n	8002b0a <HAL_RCC_OscConfig+0x3ea>
 8002b26:	e018      	b.n	8002b5a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b28:	4b9d      	ldr	r3, [pc, #628]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002b2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b2c:	4b9c      	ldr	r3, [pc, #624]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002b2e:	2101      	movs	r1, #1
 8002b30:	438a      	bics	r2, r1
 8002b32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b34:	f7fe fe4a 	bl	80017cc <HAL_GetTick>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b3e:	f7fe fe45 	bl	80017cc <HAL_GetTick>
 8002b42:	0002      	movs	r2, r0
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e15d      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b50:	4b93      	ldr	r3, [pc, #588]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b54:	2202      	movs	r2, #2
 8002b56:	4013      	ands	r3, r2
 8002b58:	d1f1      	bne.n	8002b3e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2204      	movs	r2, #4
 8002b60:	4013      	ands	r3, r2
 8002b62:	d100      	bne.n	8002b66 <HAL_RCC_OscConfig+0x446>
 8002b64:	e0ae      	b.n	8002cc4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b66:	2023      	movs	r0, #35	; 0x23
 8002b68:	183b      	adds	r3, r7, r0
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6e:	4b8c      	ldr	r3, [pc, #560]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	055b      	lsls	r3, r3, #21
 8002b76:	4013      	ands	r3, r2
 8002b78:	d109      	bne.n	8002b8e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	4b89      	ldr	r3, [pc, #548]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b7e:	4b88      	ldr	r3, [pc, #544]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	0549      	lsls	r1, r1, #21
 8002b84:	430a      	orrs	r2, r1
 8002b86:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002b88:	183b      	adds	r3, r7, r0
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8e:	4b87      	ldr	r3, [pc, #540]	; (8002dac <HAL_RCC_OscConfig+0x68c>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4013      	ands	r3, r2
 8002b98:	d11a      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b9a:	4b84      	ldr	r3, [pc, #528]	; (8002dac <HAL_RCC_OscConfig+0x68c>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4b83      	ldr	r3, [pc, #524]	; (8002dac <HAL_RCC_OscConfig+0x68c>)
 8002ba0:	2180      	movs	r1, #128	; 0x80
 8002ba2:	0049      	lsls	r1, r1, #1
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba8:	f7fe fe10 	bl	80017cc <HAL_GetTick>
 8002bac:	0003      	movs	r3, r0
 8002bae:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb2:	f7fe fe0b 	bl	80017cc <HAL_GetTick>
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b64      	cmp	r3, #100	; 0x64
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e123      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc4:	4b79      	ldr	r3, [pc, #484]	; (8002dac <HAL_RCC_OscConfig+0x68c>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_OscConfig+0x4cc>
 8002bdc:	4b70      	ldr	r3, [pc, #448]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002bde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002be0:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002be2:	2180      	movs	r1, #128	; 0x80
 8002be4:	0049      	lsls	r1, r1, #1
 8002be6:	430a      	orrs	r2, r1
 8002be8:	651a      	str	r2, [r3, #80]	; 0x50
 8002bea:	e031      	b.n	8002c50 <HAL_RCC_OscConfig+0x530>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10c      	bne.n	8002c0e <HAL_RCC_OscConfig+0x4ee>
 8002bf4:	4b6a      	ldr	r3, [pc, #424]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002bf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bf8:	4b69      	ldr	r3, [pc, #420]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002bfa:	496b      	ldr	r1, [pc, #428]	; (8002da8 <HAL_RCC_OscConfig+0x688>)
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	651a      	str	r2, [r3, #80]	; 0x50
 8002c00:	4b67      	ldr	r3, [pc, #412]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002c02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c04:	4b66      	ldr	r3, [pc, #408]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002c06:	496a      	ldr	r1, [pc, #424]	; (8002db0 <HAL_RCC_OscConfig+0x690>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	651a      	str	r2, [r3, #80]	; 0x50
 8002c0c:	e020      	b.n	8002c50 <HAL_RCC_OscConfig+0x530>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	23a0      	movs	r3, #160	; 0xa0
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d10e      	bne.n	8002c38 <HAL_RCC_OscConfig+0x518>
 8002c1a:	4b61      	ldr	r3, [pc, #388]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002c1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c1e:	4b60      	ldr	r3, [pc, #384]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002c20:	2180      	movs	r1, #128	; 0x80
 8002c22:	00c9      	lsls	r1, r1, #3
 8002c24:	430a      	orrs	r2, r1
 8002c26:	651a      	str	r2, [r3, #80]	; 0x50
 8002c28:	4b5d      	ldr	r3, [pc, #372]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002c2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c2c:	4b5c      	ldr	r3, [pc, #368]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002c2e:	2180      	movs	r1, #128	; 0x80
 8002c30:	0049      	lsls	r1, r1, #1
 8002c32:	430a      	orrs	r2, r1
 8002c34:	651a      	str	r2, [r3, #80]	; 0x50
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0x530>
 8002c38:	4b59      	ldr	r3, [pc, #356]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002c3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c3c:	4b58      	ldr	r3, [pc, #352]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002c3e:	495a      	ldr	r1, [pc, #360]	; (8002da8 <HAL_RCC_OscConfig+0x688>)
 8002c40:	400a      	ands	r2, r1
 8002c42:	651a      	str	r2, [r3, #80]	; 0x50
 8002c44:	4b56      	ldr	r3, [pc, #344]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002c46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c48:	4b55      	ldr	r3, [pc, #340]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002c4a:	4959      	ldr	r1, [pc, #356]	; (8002db0 <HAL_RCC_OscConfig+0x690>)
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d015      	beq.n	8002c84 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c58:	f7fe fdb8 	bl	80017cc <HAL_GetTick>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c60:	e009      	b.n	8002c76 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c62:	f7fe fdb3 	bl	80017cc <HAL_GetTick>
 8002c66:	0002      	movs	r2, r0
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	4a51      	ldr	r2, [pc, #324]	; (8002db4 <HAL_RCC_OscConfig+0x694>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0ca      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c76:	4b4a      	ldr	r3, [pc, #296]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d0ef      	beq.n	8002c62 <HAL_RCC_OscConfig+0x542>
 8002c82:	e014      	b.n	8002cae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c84:	f7fe fda2 	bl	80017cc <HAL_GetTick>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c8c:	e009      	b.n	8002ca2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8e:	f7fe fd9d 	bl	80017cc <HAL_GetTick>
 8002c92:	0002      	movs	r2, r0
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	4a46      	ldr	r2, [pc, #280]	; (8002db4 <HAL_RCC_OscConfig+0x694>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e0b4      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ca2:	4b3f      	ldr	r3, [pc, #252]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002ca4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4013      	ands	r3, r2
 8002cac:	d1ef      	bne.n	8002c8e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cae:	2323      	movs	r3, #35	; 0x23
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb8:	4b39      	ldr	r3, [pc, #228]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cbc:	4b38      	ldr	r3, [pc, #224]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002cbe:	493e      	ldr	r1, [pc, #248]	; (8002db8 <HAL_RCC_OscConfig+0x698>)
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d100      	bne.n	8002cce <HAL_RCC_OscConfig+0x5ae>
 8002ccc:	e09d      	b.n	8002e0a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d100      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x5b6>
 8002cd4:	e076      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d145      	bne.n	8002d6a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cde:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002ce4:	4935      	ldr	r1, [pc, #212]	; (8002dbc <HAL_RCC_OscConfig+0x69c>)
 8002ce6:	400a      	ands	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7fe fd6f 	bl	80017cc <HAL_GetTick>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe fd6a 	bl	80017cc <HAL_GetTick>
 8002cf8:	0002      	movs	r2, r0
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e082      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	049b      	lsls	r3, r3, #18
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d12:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4a2a      	ldr	r2, [pc, #168]	; (8002dc0 <HAL_RCC_OscConfig+0x6a0>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d32:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002d38:	2180      	movs	r1, #128	; 0x80
 8002d3a:	0449      	lsls	r1, r1, #17
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fe fd44 	bl	80017cc <HAL_GetTick>
 8002d44:	0003      	movs	r3, r0
 8002d46:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7fe fd3f 	bl	80017cc <HAL_GetTick>
 8002d4e:	0002      	movs	r2, r0
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e057      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d5c:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	049b      	lsls	r3, r3, #18
 8002d64:	4013      	ands	r3, r2
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x62a>
 8002d68:	e04f      	b.n	8002e0a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002d70:	4912      	ldr	r1, [pc, #72]	; (8002dbc <HAL_RCC_OscConfig+0x69c>)
 8002d72:	400a      	ands	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d76:	f7fe fd29 	bl	80017cc <HAL_GetTick>
 8002d7a:	0003      	movs	r3, r0
 8002d7c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d80:	f7fe fd24 	bl	80017cc <HAL_GetTick>
 8002d84:	0002      	movs	r2, r0
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e03c      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d92:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_RCC_OscConfig+0x680>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	049b      	lsls	r3, r3, #18
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x660>
 8002d9e:	e034      	b.n	8002e0a <HAL_RCC_OscConfig+0x6ea>
 8002da0:	40021000 	.word	0x40021000
 8002da4:	ffff1fff 	.word	0xffff1fff
 8002da8:	fffffeff 	.word	0xfffffeff
 8002dac:	40007000 	.word	0x40007000
 8002db0:	fffffbff 	.word	0xfffffbff
 8002db4:	00001388 	.word	0x00001388
 8002db8:	efffffff 	.word	0xefffffff
 8002dbc:	feffffff 	.word	0xfeffffff
 8002dc0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e01d      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dd0:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <HAL_RCC_OscConfig+0x6f4>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	025b      	lsls	r3, r3, #9
 8002ddc:	401a      	ands	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d10f      	bne.n	8002e06 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	23f0      	movs	r3, #240	; 0xf0
 8002dea:	039b      	lsls	r3, r3, #14
 8002dec:	401a      	ands	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	23c0      	movs	r3, #192	; 0xc0
 8002dfa:	041b      	lsls	r3, r3, #16
 8002dfc:	401a      	ands	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d001      	beq.n	8002e0a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b00a      	add	sp, #40	; 0x28
 8002e12:	bdb0      	pop	{r4, r5, r7, pc}
 8002e14:	40021000 	.word	0x40021000

08002e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e18:	b5b0      	push	{r4, r5, r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e128      	b.n	800307e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b96      	ldr	r3, [pc, #600]	; (8003088 <HAL_RCC_ClockConfig+0x270>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2201      	movs	r2, #1
 8002e32:	4013      	ands	r3, r2
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d91e      	bls.n	8002e78 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b93      	ldr	r3, [pc, #588]	; (8003088 <HAL_RCC_ClockConfig+0x270>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	4393      	bics	r3, r2
 8002e42:	0019      	movs	r1, r3
 8002e44:	4b90      	ldr	r3, [pc, #576]	; (8003088 <HAL_RCC_ClockConfig+0x270>)
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e4c:	f7fe fcbe 	bl	80017cc <HAL_GetTick>
 8002e50:	0003      	movs	r3, r0
 8002e52:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e54:	e009      	b.n	8002e6a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e56:	f7fe fcb9 	bl	80017cc <HAL_GetTick>
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	4a8a      	ldr	r2, [pc, #552]	; (800308c <HAL_RCC_ClockConfig+0x274>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e109      	b.n	800307e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	4b87      	ldr	r3, [pc, #540]	; (8003088 <HAL_RCC_ClockConfig+0x270>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4013      	ands	r3, r2
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1ee      	bne.n	8002e56 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d009      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e82:	4b83      	ldr	r3, [pc, #524]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	22f0      	movs	r2, #240	; 0xf0
 8002e88:	4393      	bics	r3, r2
 8002e8a:	0019      	movs	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	4b7f      	ldr	r3, [pc, #508]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8002e92:	430a      	orrs	r2, r1
 8002e94:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d100      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0x8a>
 8002ea0:	e089      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d107      	bne.n	8002eba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eaa:	4b79      	ldr	r3, [pc, #484]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	029b      	lsls	r3, r3, #10
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d120      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e0e1      	b.n	800307e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ec2:	4b73      	ldr	r3, [pc, #460]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	049b      	lsls	r3, r3, #18
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d114      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0d5      	b.n	800307e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d106      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eda:	4b6d      	ldr	r3, [pc, #436]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d109      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0ca      	b.n	800307e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ee8:	4b69      	ldr	r3, [pc, #420]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0c2      	b.n	800307e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ef8:	4b65      	ldr	r3, [pc, #404]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2203      	movs	r2, #3
 8002efe:	4393      	bics	r3, r2
 8002f00:	0019      	movs	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	4b62      	ldr	r3, [pc, #392]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f0c:	f7fe fc5e 	bl	80017cc <HAL_GetTick>
 8002f10:	0003      	movs	r3, r0
 8002f12:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d111      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f1c:	e009      	b.n	8002f32 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f1e:	f7fe fc55 	bl	80017cc <HAL_GetTick>
 8002f22:	0002      	movs	r2, r0
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	4a58      	ldr	r2, [pc, #352]	; (800308c <HAL_RCC_ClockConfig+0x274>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e0a5      	b.n	800307e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f32:	4b57      	ldr	r3, [pc, #348]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	220c      	movs	r2, #12
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d1ef      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x106>
 8002f3e:	e03a      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d111      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f48:	e009      	b.n	8002f5e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4a:	f7fe fc3f 	bl	80017cc <HAL_GetTick>
 8002f4e:	0002      	movs	r2, r0
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	4a4d      	ldr	r2, [pc, #308]	; (800308c <HAL_RCC_ClockConfig+0x274>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e08f      	b.n	800307e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f5e:	4b4c      	ldr	r3, [pc, #304]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	220c      	movs	r2, #12
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b0c      	cmp	r3, #12
 8002f68:	d1ef      	bne.n	8002f4a <HAL_RCC_ClockConfig+0x132>
 8002f6a:	e024      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d11b      	bne.n	8002fac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f74:	e009      	b.n	8002f8a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f76:	f7fe fc29 	bl	80017cc <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	4a42      	ldr	r2, [pc, #264]	; (800308c <HAL_RCC_ClockConfig+0x274>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e079      	b.n	800307e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f8a:	4b41      	ldr	r3, [pc, #260]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	220c      	movs	r2, #12
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d1ef      	bne.n	8002f76 <HAL_RCC_ClockConfig+0x15e>
 8002f96:	e00e      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f98:	f7fe fc18 	bl	80017cc <HAL_GetTick>
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	4a3a      	ldr	r2, [pc, #232]	; (800308c <HAL_RCC_ClockConfig+0x274>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e068      	b.n	800307e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fac:	4b38      	ldr	r3, [pc, #224]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	220c      	movs	r2, #12
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb6:	4b34      	ldr	r3, [pc, #208]	; (8003088 <HAL_RCC_ClockConfig+0x270>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d21e      	bcs.n	8003002 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc4:	4b30      	ldr	r3, [pc, #192]	; (8003088 <HAL_RCC_ClockConfig+0x270>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	4393      	bics	r3, r2
 8002fcc:	0019      	movs	r1, r3
 8002fce:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <HAL_RCC_ClockConfig+0x270>)
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fd6:	f7fe fbf9 	bl	80017cc <HAL_GetTick>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fde:	e009      	b.n	8002ff4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe0:	f7fe fbf4 	bl	80017cc <HAL_GetTick>
 8002fe4:	0002      	movs	r2, r0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	4a28      	ldr	r2, [pc, #160]	; (800308c <HAL_RCC_ClockConfig+0x274>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e044      	b.n	800307e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff4:	4b24      	ldr	r3, [pc, #144]	; (8003088 <HAL_RCC_ClockConfig+0x270>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d1ee      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2204      	movs	r2, #4
 8003008:	4013      	ands	r3, r2
 800300a:	d009      	beq.n	8003020 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800300c:	4b20      	ldr	r3, [pc, #128]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4a20      	ldr	r2, [pc, #128]	; (8003094 <HAL_RCC_ClockConfig+0x27c>)
 8003012:	4013      	ands	r3, r2
 8003014:	0019      	movs	r1, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 800301c:	430a      	orrs	r2, r1
 800301e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2208      	movs	r2, #8
 8003026:	4013      	ands	r3, r2
 8003028:	d00a      	beq.n	8003040 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	4a1a      	ldr	r2, [pc, #104]	; (8003098 <HAL_RCC_ClockConfig+0x280>)
 8003030:	4013      	ands	r3, r2
 8003032:	0019      	movs	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	00da      	lsls	r2, r3, #3
 800303a:	4b15      	ldr	r3, [pc, #84]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 800303c:	430a      	orrs	r2, r1
 800303e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003040:	f000 f832 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8003044:	0001      	movs	r1, r0
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	220f      	movs	r2, #15
 800304e:	4013      	ands	r3, r2
 8003050:	4a12      	ldr	r2, [pc, #72]	; (800309c <HAL_RCC_ClockConfig+0x284>)
 8003052:	5cd3      	ldrb	r3, [r2, r3]
 8003054:	000a      	movs	r2, r1
 8003056:	40da      	lsrs	r2, r3
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <HAL_RCC_ClockConfig+0x288>)
 800305a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800305c:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <HAL_RCC_ClockConfig+0x28c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	250b      	movs	r5, #11
 8003062:	197c      	adds	r4, r7, r5
 8003064:	0018      	movs	r0, r3
 8003066:	f7fe fb6b 	bl	8001740 <HAL_InitTick>
 800306a:	0003      	movs	r3, r0
 800306c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800306e:	197b      	adds	r3, r7, r5
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003076:	197b      	adds	r3, r7, r5
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	e000      	b.n	800307e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	0018      	movs	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	b004      	add	sp, #16
 8003084:	bdb0      	pop	{r4, r5, r7, pc}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	40022000 	.word	0x40022000
 800308c:	00001388 	.word	0x00001388
 8003090:	40021000 	.word	0x40021000
 8003094:	fffff8ff 	.word	0xfffff8ff
 8003098:	ffffc7ff 	.word	0xffffc7ff
 800309c:	080060c4 	.word	0x080060c4
 80030a0:	20000004 	.word	0x20000004
 80030a4:	20000008 	.word	0x20000008

080030a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a8:	b5b0      	push	{r4, r5, r7, lr}
 80030aa:	b08e      	sub	sp, #56	; 0x38
 80030ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80030ae:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030b6:	230c      	movs	r3, #12
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b0c      	cmp	r3, #12
 80030bc:	d014      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x40>
 80030be:	d900      	bls.n	80030c2 <HAL_RCC_GetSysClockFreq+0x1a>
 80030c0:	e07b      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x112>
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d002      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x24>
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d00b      	beq.n	80030e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80030ca:	e076      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80030cc:	4b44      	ldr	r3, [pc, #272]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2210      	movs	r2, #16
 80030d2:	4013      	ands	r3, r2
 80030d4:	d002      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80030d6:	4b43      	ldr	r3, [pc, #268]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80030d8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80030da:	e07c      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80030dc:	4b42      	ldr	r3, [pc, #264]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x140>)
 80030de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030e0:	e079      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e2:	4b42      	ldr	r3, [pc, #264]	; (80031ec <HAL_RCC_GetSysClockFreq+0x144>)
 80030e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030e6:	e076      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	0c9a      	lsrs	r2, r3, #18
 80030ec:	230f      	movs	r3, #15
 80030ee:	401a      	ands	r2, r3
 80030f0:	4b3f      	ldr	r3, [pc, #252]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x148>)
 80030f2:	5c9b      	ldrb	r3, [r3, r2]
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80030f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f8:	0d9a      	lsrs	r2, r3, #22
 80030fa:	2303      	movs	r3, #3
 80030fc:	4013      	ands	r3, r2
 80030fe:	3301      	adds	r3, #1
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003102:	4b37      	ldr	r3, [pc, #220]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	025b      	lsls	r3, r3, #9
 800310a:	4013      	ands	r3, r2
 800310c:	d01a      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
 8003116:	4a35      	ldr	r2, [pc, #212]	; (80031ec <HAL_RCC_GetSysClockFreq+0x144>)
 8003118:	2300      	movs	r3, #0
 800311a:	69b8      	ldr	r0, [r7, #24]
 800311c:	69f9      	ldr	r1, [r7, #28]
 800311e:	f7fd f8b1 	bl	8000284 <__aeabi_lmul>
 8003122:	0002      	movs	r2, r0
 8003124:	000b      	movs	r3, r1
 8003126:	0010      	movs	r0, r2
 8003128:	0019      	movs	r1, r3
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f7fd f885 	bl	8000244 <__aeabi_uldivmod>
 800313a:	0002      	movs	r2, r0
 800313c:	000b      	movs	r3, r1
 800313e:	0013      	movs	r3, r2
 8003140:	637b      	str	r3, [r7, #52]	; 0x34
 8003142:	e037      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003144:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2210      	movs	r2, #16
 800314a:	4013      	ands	r3, r2
 800314c:	d01a      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003158:	2300      	movs	r3, #0
 800315a:	68b8      	ldr	r0, [r7, #8]
 800315c:	68f9      	ldr	r1, [r7, #12]
 800315e:	f7fd f891 	bl	8000284 <__aeabi_lmul>
 8003162:	0002      	movs	r2, r0
 8003164:	000b      	movs	r3, r1
 8003166:	0010      	movs	r0, r2
 8003168:	0019      	movs	r1, r3
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	603b      	str	r3, [r7, #0]
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f7fd f865 	bl	8000244 <__aeabi_uldivmod>
 800317a:	0002      	movs	r2, r0
 800317c:	000b      	movs	r3, r1
 800317e:	0013      	movs	r3, r2
 8003180:	637b      	str	r3, [r7, #52]	; 0x34
 8003182:	e017      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	0018      	movs	r0, r3
 8003188:	2300      	movs	r3, #0
 800318a:	0019      	movs	r1, r3
 800318c:	4a16      	ldr	r2, [pc, #88]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x140>)
 800318e:	2300      	movs	r3, #0
 8003190:	f7fd f878 	bl	8000284 <__aeabi_lmul>
 8003194:	0002      	movs	r2, r0
 8003196:	000b      	movs	r3, r1
 8003198:	0010      	movs	r0, r2
 800319a:	0019      	movs	r1, r3
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	001c      	movs	r4, r3
 80031a0:	2300      	movs	r3, #0
 80031a2:	001d      	movs	r5, r3
 80031a4:	0022      	movs	r2, r4
 80031a6:	002b      	movs	r3, r5
 80031a8:	f7fd f84c 	bl	8000244 <__aeabi_uldivmod>
 80031ac:	0002      	movs	r2, r0
 80031ae:	000b      	movs	r3, r1
 80031b0:	0013      	movs	r3, r2
 80031b2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80031b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031b8:	e00d      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	0b5b      	lsrs	r3, r3, #13
 80031c0:	2207      	movs	r2, #7
 80031c2:	4013      	ands	r3, r2
 80031c4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	3301      	adds	r3, #1
 80031ca:	2280      	movs	r2, #128	; 0x80
 80031cc:	0212      	lsls	r2, r2, #8
 80031ce:	409a      	lsls	r2, r3
 80031d0:	0013      	movs	r3, r2
 80031d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b00e      	add	sp, #56	; 0x38
 80031de:	bdb0      	pop	{r4, r5, r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	003d0900 	.word	0x003d0900
 80031e8:	00f42400 	.word	0x00f42400
 80031ec:	007a1200 	.word	0x007a1200
 80031f0:	080060dc 	.word	0x080060dc

080031f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f8:	4b02      	ldr	r3, [pc, #8]	; (8003204 <HAL_RCC_GetHCLKFreq+0x10>)
 80031fa:	681b      	ldr	r3, [r3, #0]
}
 80031fc:	0018      	movs	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	20000004 	.word	0x20000004

08003208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800320c:	f7ff fff2 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003210:	0001      	movs	r1, r0
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	2207      	movs	r2, #7
 800321a:	4013      	ands	r3, r2
 800321c:	4a04      	ldr	r2, [pc, #16]	; (8003230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800321e:	5cd3      	ldrb	r3, [r2, r3]
 8003220:	40d9      	lsrs	r1, r3
 8003222:	000b      	movs	r3, r1
}
 8003224:	0018      	movs	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	40021000 	.word	0x40021000
 8003230:	080060d4 	.word	0x080060d4

08003234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003238:	f7ff ffdc 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 800323c:	0001      	movs	r1, r0
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	0adb      	lsrs	r3, r3, #11
 8003244:	2207      	movs	r2, #7
 8003246:	4013      	ands	r3, r2
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <HAL_RCC_GetPCLK2Freq+0x28>)
 800324a:	5cd3      	ldrb	r3, [r2, r3]
 800324c:	40d9      	lsrs	r1, r3
 800324e:	000b      	movs	r3, r1
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	40021000 	.word	0x40021000
 800325c:	080060d4 	.word	0x080060d4

08003260 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003268:	2017      	movs	r0, #23
 800326a:	183b      	adds	r3, r7, r0
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2220      	movs	r2, #32
 8003276:	4013      	ands	r3, r2
 8003278:	d100      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800327a:	e0c7      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327c:	4b84      	ldr	r3, [pc, #528]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800327e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003280:	2380      	movs	r3, #128	; 0x80
 8003282:	055b      	lsls	r3, r3, #21
 8003284:	4013      	ands	r3, r2
 8003286:	d109      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003288:	4b81      	ldr	r3, [pc, #516]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800328a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800328c:	4b80      	ldr	r3, [pc, #512]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800328e:	2180      	movs	r1, #128	; 0x80
 8003290:	0549      	lsls	r1, r1, #21
 8003292:	430a      	orrs	r2, r1
 8003294:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003296:	183b      	adds	r3, r7, r0
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	4b7d      	ldr	r3, [pc, #500]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4013      	ands	r3, r2
 80032a6:	d11a      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a8:	4b7a      	ldr	r3, [pc, #488]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b79      	ldr	r3, [pc, #484]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80032ae:	2180      	movs	r1, #128	; 0x80
 80032b0:	0049      	lsls	r1, r1, #1
 80032b2:	430a      	orrs	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b6:	f7fe fa89 	bl	80017cc <HAL_GetTick>
 80032ba:	0003      	movs	r3, r0
 80032bc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	e008      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c0:	f7fe fa84 	bl	80017cc <HAL_GetTick>
 80032c4:	0002      	movs	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e0d9      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d2:	4b70      	ldr	r3, [pc, #448]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4013      	ands	r3, r2
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80032de:	4b6c      	ldr	r3, [pc, #432]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	23c0      	movs	r3, #192	; 0xc0
 80032e4:	039b      	lsls	r3, r3, #14
 80032e6:	4013      	ands	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	23c0      	movs	r3, #192	; 0xc0
 80032f0:	039b      	lsls	r3, r3, #14
 80032f2:	4013      	ands	r3, r2
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d013      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	23c0      	movs	r3, #192	; 0xc0
 8003300:	029b      	lsls	r3, r3, #10
 8003302:	401a      	ands	r2, r3
 8003304:	23c0      	movs	r3, #192	; 0xc0
 8003306:	029b      	lsls	r3, r3, #10
 8003308:	429a      	cmp	r2, r3
 800330a:	d10a      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800330c:	4b60      	ldr	r3, [pc, #384]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	029b      	lsls	r3, r3, #10
 8003314:	401a      	ands	r2, r3
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	029b      	lsls	r3, r3, #10
 800331a:	429a      	cmp	r2, r3
 800331c:	d101      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e0b1      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003322:	4b5b      	ldr	r3, [pc, #364]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003324:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003326:	23c0      	movs	r3, #192	; 0xc0
 8003328:	029b      	lsls	r3, r3, #10
 800332a:	4013      	ands	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d03b      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	23c0      	movs	r3, #192	; 0xc0
 800333a:	029b      	lsls	r3, r3, #10
 800333c:	4013      	ands	r3, r2
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	429a      	cmp	r2, r3
 8003342:	d033      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2220      	movs	r2, #32
 800334a:	4013      	ands	r3, r2
 800334c:	d02e      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800334e:	4b50      	ldr	r3, [pc, #320]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003352:	4a51      	ldr	r2, [pc, #324]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003358:	4b4d      	ldr	r3, [pc, #308]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800335a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800335c:	4b4c      	ldr	r3, [pc, #304]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800335e:	2180      	movs	r1, #128	; 0x80
 8003360:	0309      	lsls	r1, r1, #12
 8003362:	430a      	orrs	r2, r1
 8003364:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003366:	4b4a      	ldr	r3, [pc, #296]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800336a:	4b49      	ldr	r3, [pc, #292]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800336c:	494b      	ldr	r1, [pc, #300]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800336e:	400a      	ands	r2, r1
 8003370:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003372:	4b47      	ldr	r3, [pc, #284]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4013      	ands	r3, r2
 8003380:	d014      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003382:	f7fe fa23 	bl	80017cc <HAL_GetTick>
 8003386:	0003      	movs	r3, r0
 8003388:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800338a:	e009      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338c:	f7fe fa1e 	bl	80017cc <HAL_GetTick>
 8003390:	0002      	movs	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	4a42      	ldr	r2, [pc, #264]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d901      	bls.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e072      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a0:	4b3b      	ldr	r3, [pc, #236]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4013      	ands	r3, r2
 80033aa:	d0ef      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2220      	movs	r2, #32
 80033b2:	4013      	ands	r3, r2
 80033b4:	d01f      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	23c0      	movs	r3, #192	; 0xc0
 80033bc:	029b      	lsls	r3, r3, #10
 80033be:	401a      	ands	r2, r3
 80033c0:	23c0      	movs	r3, #192	; 0xc0
 80033c2:	029b      	lsls	r3, r3, #10
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d10c      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80033c8:	4b31      	ldr	r3, [pc, #196]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a35      	ldr	r2, [pc, #212]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	0019      	movs	r1, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	23c0      	movs	r3, #192	; 0xc0
 80033d8:	039b      	lsls	r3, r3, #14
 80033da:	401a      	ands	r2, r3
 80033dc:	4b2c      	ldr	r3, [pc, #176]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033de:	430a      	orrs	r2, r1
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	23c0      	movs	r3, #192	; 0xc0
 80033ec:	029b      	lsls	r3, r3, #10
 80033ee:	401a      	ands	r2, r3
 80033f0:	4b27      	ldr	r3, [pc, #156]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033f2:	430a      	orrs	r2, r1
 80033f4:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033f6:	2317      	movs	r3, #23
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d105      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003400:	4b23      	ldr	r3, [pc, #140]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003404:	4b22      	ldr	r3, [pc, #136]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003406:	4928      	ldr	r1, [pc, #160]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003408:	400a      	ands	r2, r1
 800340a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2202      	movs	r2, #2
 8003412:	4013      	ands	r3, r2
 8003414:	d009      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003416:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341a:	220c      	movs	r2, #12
 800341c:	4393      	bics	r3, r2
 800341e:	0019      	movs	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003426:	430a      	orrs	r2, r1
 8003428:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2204      	movs	r2, #4
 8003430:	4013      	ands	r3, r2
 8003432:	d009      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003434:	4b16      	ldr	r3, [pc, #88]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003438:	4a1c      	ldr	r2, [pc, #112]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800343a:	4013      	ands	r3, r2
 800343c:	0019      	movs	r1, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	4b13      	ldr	r3, [pc, #76]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003444:	430a      	orrs	r2, r1
 8003446:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2208      	movs	r2, #8
 800344e:	4013      	ands	r3, r2
 8003450:	d009      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003452:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003456:	4a16      	ldr	r2, [pc, #88]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003458:	4013      	ands	r3, r2
 800345a:	0019      	movs	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003462:	430a      	orrs	r2, r1
 8003464:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2280      	movs	r2, #128	; 0x80
 800346c:	4013      	ands	r3, r2
 800346e:	d009      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003470:	4b07      	ldr	r3, [pc, #28]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003474:	4a0f      	ldr	r2, [pc, #60]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003476:	4013      	ands	r3, r2
 8003478:	0019      	movs	r1, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	4b04      	ldr	r3, [pc, #16]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003480:	430a      	orrs	r2, r1
 8003482:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	b006      	add	sp, #24
 800348c:	bd80      	pop	{r7, pc}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	40021000 	.word	0x40021000
 8003494:	40007000 	.word	0x40007000
 8003498:	fffcffff 	.word	0xfffcffff
 800349c:	fff7ffff 	.word	0xfff7ffff
 80034a0:	00001388 	.word	0x00001388
 80034a4:	ffcfffff 	.word	0xffcfffff
 80034a8:	efffffff 	.word	0xefffffff
 80034ac:	fffff3ff 	.word	0xfffff3ff
 80034b0:	ffffcfff 	.word	0xffffcfff
 80034b4:	fff3ffff 	.word	0xfff3ffff

080034b8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80034b8:	b5b0      	push	{r4, r5, r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80034c0:	230f      	movs	r3, #15
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e088      	b.n	80035e4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2221      	movs	r2, #33	; 0x21
 80034d6:	5c9b      	ldrb	r3, [r3, r2]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d107      	bne.n	80034ee <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	2100      	movs	r1, #0
 80034e4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7fd ff5d 	bl	80013a8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2221      	movs	r2, #33	; 0x21
 80034f2:	2102      	movs	r1, #2
 80034f4:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2210      	movs	r2, #16
 80034fe:	4013      	ands	r3, r2
 8003500:	2b10      	cmp	r3, #16
 8003502:	d05f      	beq.n	80035c4 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	22ca      	movs	r2, #202	; 0xca
 800350a:	625a      	str	r2, [r3, #36]	; 0x24
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2253      	movs	r2, #83	; 0x53
 8003512:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003514:	250f      	movs	r5, #15
 8003516:	197c      	adds	r4, r7, r5
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	0018      	movs	r0, r3
 800351c:	f000 fc20 	bl	8003d60 <RTC_EnterInitMode>
 8003520:	0003      	movs	r3, r0
 8003522:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003524:	0028      	movs	r0, r5
 8003526:	183b      	adds	r3, r7, r0
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d12c      	bne.n	8003588 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	492c      	ldr	r1, [pc, #176]	; (80035ec <HAL_RTC_Init+0x134>)
 800353a:	400a      	ands	r2, r1
 800353c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6899      	ldr	r1, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	68d2      	ldr	r2, [r2, #12]
 8003564:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6919      	ldr	r1, [r3, #16]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	041a      	lsls	r2, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800357a:	183c      	adds	r4, r7, r0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	0018      	movs	r0, r3
 8003580:	f000 fc32 	bl	8003de8 <RTC_ExitInitMode>
 8003584:	0003      	movs	r3, r0
 8003586:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8003588:	230f      	movs	r3, #15
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d113      	bne.n	80035ba <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2103      	movs	r1, #3
 800359e:	438a      	bics	r2, r1
 80035a0:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69da      	ldr	r2, [r3, #28]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	22ff      	movs	r2, #255	; 0xff
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24
 80035c2:	e003      	b.n	80035cc <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80035c4:	230f      	movs	r3, #15
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80035cc:	230f      	movs	r3, #15
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d103      	bne.n	80035de <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2221      	movs	r2, #33	; 0x21
 80035da:	2101      	movs	r1, #1
 80035dc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80035de:	230f      	movs	r3, #15
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	781b      	ldrb	r3, [r3, #0]
}
 80035e4:	0018      	movs	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b004      	add	sp, #16
 80035ea:	bdb0      	pop	{r4, r5, r7, pc}
 80035ec:	ff8fffbf 	.word	0xff8fffbf

080035f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	5c9b      	ldrb	r3, [r3, r2]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_RTC_SetTime+0x1e>
 800360a:	2302      	movs	r3, #2
 800360c:	e092      	b.n	8003734 <HAL_RTC_SetTime+0x144>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	2101      	movs	r1, #1
 8003614:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2221      	movs	r2, #33	; 0x21
 800361a:	2102      	movs	r1, #2
 800361c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d125      	bne.n	8003670 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2240      	movs	r2, #64	; 0x40
 800362c:	4013      	ands	r3, r2
 800362e:	d102      	bne.n	8003636 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2200      	movs	r2, #0
 8003634:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	0018      	movs	r0, r3
 800363c:	f000 fbfe 	bl	8003e3c <RTC_ByteToBcd2>
 8003640:	0003      	movs	r3, r0
 8003642:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	785b      	ldrb	r3, [r3, #1]
 8003648:	0018      	movs	r0, r3
 800364a:	f000 fbf7 	bl	8003e3c <RTC_ByteToBcd2>
 800364e:	0003      	movs	r3, r0
 8003650:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003652:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	789b      	ldrb	r3, [r3, #2]
 8003658:	0018      	movs	r0, r3
 800365a:	f000 fbef 	bl	8003e3c <RTC_ByteToBcd2>
 800365e:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003660:	0022      	movs	r2, r4
 8003662:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	78db      	ldrb	r3, [r3, #3]
 8003668:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	e017      	b.n	80036a0 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2240      	movs	r2, #64	; 0x40
 8003678:	4013      	ands	r3, r2
 800367a:	d102      	bne.n	8003682 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2200      	movs	r2, #0
 8003680:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	785b      	ldrb	r3, [r3, #1]
 800368c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800368e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003694:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	78db      	ldrb	r3, [r3, #3]
 800369a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	22ca      	movs	r2, #202	; 0xca
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2253      	movs	r2, #83	; 0x53
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80036b0:	2513      	movs	r5, #19
 80036b2:	197c      	adds	r4, r7, r5
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	0018      	movs	r0, r3
 80036b8:	f000 fb52 	bl	8003d60 <RTC_EnterInitMode>
 80036bc:	0003      	movs	r3, r0
 80036be:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80036c0:	0028      	movs	r0, r5
 80036c2:	183b      	adds	r3, r7, r0
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d120      	bne.n	800370c <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	491a      	ldr	r1, [pc, #104]	; (800373c <HAL_RTC_SetTime+0x14c>)
 80036d2:	400a      	ands	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4917      	ldr	r1, [pc, #92]	; (8003740 <HAL_RTC_SetTime+0x150>)
 80036e2:	400a      	ands	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6899      	ldr	r1, [r3, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	431a      	orrs	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80036fe:	183c      	adds	r4, r7, r0
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	0018      	movs	r0, r3
 8003704:	f000 fb70 	bl	8003de8 <RTC_ExitInitMode>
 8003708:	0003      	movs	r3, r0
 800370a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800370c:	2313      	movs	r3, #19
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d103      	bne.n	800371e <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2221      	movs	r2, #33	; 0x21
 800371a:	2101      	movs	r1, #1
 800371c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	22ff      	movs	r2, #255	; 0xff
 8003724:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	2100      	movs	r1, #0
 800372c:	5499      	strb	r1, [r3, r2]

  return status;
 800372e:	2313      	movs	r3, #19
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	781b      	ldrb	r3, [r3, #0]
}
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	b006      	add	sp, #24
 800373a:	bdb0      	pop	{r4, r5, r7, pc}
 800373c:	007f7f7f 	.word	0x007f7f7f
 8003740:	fffbffff 	.word	0xfffbffff

08003744 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003744:	b5b0      	push	{r4, r5, r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	5c9b      	ldrb	r3, [r3, r2]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_RTC_SetDate+0x1e>
 800375e:	2302      	movs	r3, #2
 8003760:	e07e      	b.n	8003860 <HAL_RTC_SetDate+0x11c>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	2101      	movs	r1, #1
 8003768:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2221      	movs	r2, #33	; 0x21
 800376e:	2102      	movs	r1, #2
 8003770:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10e      	bne.n	8003796 <HAL_RTC_SetDate+0x52>
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	785b      	ldrb	r3, [r3, #1]
 800377c:	001a      	movs	r2, r3
 800377e:	2310      	movs	r3, #16
 8003780:	4013      	ands	r3, r2
 8003782:	d008      	beq.n	8003796 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	785b      	ldrb	r3, [r3, #1]
 8003788:	2210      	movs	r2, #16
 800378a:	4393      	bics	r3, r2
 800378c:	b2db      	uxtb	r3, r3
 800378e:	330a      	adds	r3, #10
 8003790:	b2da      	uxtb	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d11c      	bne.n	80037d6 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	78db      	ldrb	r3, [r3, #3]
 80037a0:	0018      	movs	r0, r3
 80037a2:	f000 fb4b 	bl	8003e3c <RTC_ByteToBcd2>
 80037a6:	0003      	movs	r3, r0
 80037a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	785b      	ldrb	r3, [r3, #1]
 80037ae:	0018      	movs	r0, r3
 80037b0:	f000 fb44 	bl	8003e3c <RTC_ByteToBcd2>
 80037b4:	0003      	movs	r3, r0
 80037b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80037b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	789b      	ldrb	r3, [r3, #2]
 80037be:	0018      	movs	r0, r3
 80037c0:	f000 fb3c 	bl	8003e3c <RTC_ByteToBcd2>
 80037c4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80037c6:	0022      	movs	r2, r4
 80037c8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	e00e      	b.n	80037f4 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	78db      	ldrb	r3, [r3, #3]
 80037da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	785b      	ldrb	r3, [r3, #1]
 80037e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80037e2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80037e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	22ca      	movs	r2, #202	; 0xca
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2253      	movs	r2, #83	; 0x53
 8003802:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003804:	2513      	movs	r5, #19
 8003806:	197c      	adds	r4, r7, r5
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	0018      	movs	r0, r3
 800380c:	f000 faa8 	bl	8003d60 <RTC_EnterInitMode>
 8003810:	0003      	movs	r3, r0
 8003812:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003814:	0028      	movs	r0, r5
 8003816:	183b      	adds	r3, r7, r0
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10c      	bne.n	8003838 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4910      	ldr	r1, [pc, #64]	; (8003868 <HAL_RTC_SetDate+0x124>)
 8003826:	400a      	ands	r2, r1
 8003828:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800382a:	183c      	adds	r4, r7, r0
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	0018      	movs	r0, r3
 8003830:	f000 fada 	bl	8003de8 <RTC_ExitInitMode>
 8003834:	0003      	movs	r3, r0
 8003836:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003838:	2313      	movs	r3, #19
 800383a:	18fb      	adds	r3, r7, r3
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d103      	bne.n	800384a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2221      	movs	r2, #33	; 0x21
 8003846:	2101      	movs	r1, #1
 8003848:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	22ff      	movs	r2, #255	; 0xff
 8003850:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2220      	movs	r2, #32
 8003856:	2100      	movs	r1, #0
 8003858:	5499      	strb	r1, [r3, r2]

  return status;
 800385a:	2313      	movs	r3, #19
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	781b      	ldrb	r3, [r3, #0]
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b006      	add	sp, #24
 8003866:	bdb0      	pop	{r4, r5, r7, pc}
 8003868:	00ffff3f 	.word	0x00ffff3f

0800386c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b089      	sub	sp, #36	; 0x24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003878:	4ba7      	ldr	r3, [pc, #668]	; (8003b18 <HAL_RTC_SetAlarm_IT+0x2ac>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	22fa      	movs	r2, #250	; 0xfa
 800387e:	01d1      	lsls	r1, r2, #7
 8003880:	0018      	movs	r0, r3
 8003882:	f7fc fc53 	bl	800012c <__udivsi3>
 8003886:	0003      	movs	r3, r0
 8003888:	001a      	movs	r2, r3
 800388a:	0013      	movs	r3, r2
 800388c:	015b      	lsls	r3, r3, #5
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	189b      	adds	r3, r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	5c9b      	ldrb	r3, [r3, r2]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_RTC_SetAlarm_IT+0x42>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e130      	b.n	8003b10 <HAL_RTC_SetAlarm_IT+0x2a4>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	2101      	movs	r1, #1
 80038b4:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2221      	movs	r2, #33	; 0x21
 80038ba:	2102      	movs	r1, #2
 80038bc:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d136      	bne.n	8003932 <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2240      	movs	r2, #64	; 0x40
 80038cc:	4013      	ands	r3, r2
 80038ce:	d102      	bne.n	80038d6 <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2200      	movs	r2, #0
 80038d4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	0018      	movs	r0, r3
 80038dc:	f000 faae 	bl	8003e3c <RTC_ByteToBcd2>
 80038e0:	0003      	movs	r3, r0
 80038e2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	785b      	ldrb	r3, [r3, #1]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f000 faa7 	bl	8003e3c <RTC_ByteToBcd2>
 80038ee:	0003      	movs	r3, r0
 80038f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80038f2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	789b      	ldrb	r3, [r3, #2]
 80038f8:	0018      	movs	r0, r3
 80038fa:	f000 fa9f 	bl	8003e3c <RTC_ByteToBcd2>
 80038fe:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003900:	0022      	movs	r2, r4
 8003902:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	78db      	ldrb	r3, [r3, #3]
 8003908:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800390a:	431a      	orrs	r2, r3
 800390c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2220      	movs	r2, #32
 8003912:	5c9b      	ldrb	r3, [r3, r2]
 8003914:	0018      	movs	r0, r3
 8003916:	f000 fa91 	bl	8003e3c <RTC_ByteToBcd2>
 800391a:	0003      	movs	r3, r0
 800391c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800391e:	0022      	movs	r2, r4
 8003920:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003926:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800392c:	4313      	orrs	r3, r2
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	e022      	b.n	8003978 <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2240      	movs	r2, #64	; 0x40
 800393a:	4013      	ands	r3, r2
 800393c:	d102      	bne.n	8003944 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2200      	movs	r2, #0
 8003942:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	785b      	ldrb	r3, [r3, #1]
 800394e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003950:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003956:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	78db      	ldrb	r3, [r3, #3]
 800395c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800395e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2120      	movs	r1, #32
 8003964:	5c5b      	ldrb	r3, [r3, r1]
 8003966:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003968:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800396e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003974:	4313      	orrs	r3, r2
 8003976:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	22ca      	movs	r2, #202	; 0xca
 800398a:	625a      	str	r2, [r3, #36]	; 0x24
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2253      	movs	r2, #83	; 0x53
 8003992:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	429a      	cmp	r2, r3
 800399e:	d146      	bne.n	8003a2e <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	495c      	ldr	r1, [pc, #368]	; (8003b1c <HAL_RTC_SetAlarm_IT+0x2b0>)
 80039ac:	400a      	ands	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	22ff      	movs	r2, #255	; 0xff
 80039b8:	401a      	ands	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4958      	ldr	r1, [pc, #352]	; (8003b20 <HAL_RTC_SetAlarm_IT+0x2b4>)
 80039c0:	430a      	orrs	r2, r1
 80039c2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10d      	bne.n	80039ec <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	22ff      	movs	r2, #255	; 0xff
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2221      	movs	r2, #33	; 0x21
 80039dc:	2103      	movs	r1, #3
 80039de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	2100      	movs	r1, #0
 80039e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e091      	b.n	8003b10 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	4013      	ands	r3, r2
 80039f6:	d0e5      	beq.n	80039c4 <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2180      	movs	r1, #128	; 0x80
 8003a14:	0049      	lsls	r1, r1, #1
 8003a16:	430a      	orrs	r2, r1
 8003a18:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2180      	movs	r1, #128	; 0x80
 8003a26:	0149      	lsls	r1, r1, #5
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	e055      	b.n	8003ada <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	493a      	ldr	r1, [pc, #232]	; (8003b24 <HAL_RTC_SetAlarm_IT+0x2b8>)
 8003a3a:	400a      	ands	r2, r1
 8003a3c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	22ff      	movs	r2, #255	; 0xff
 8003a46:	401a      	ands	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4936      	ldr	r1, [pc, #216]	; (8003b28 <HAL_RTC_SetAlarm_IT+0x2bc>)
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003a52:	4b31      	ldr	r3, [pc, #196]	; (8003b18 <HAL_RTC_SetAlarm_IT+0x2ac>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	22fa      	movs	r2, #250	; 0xfa
 8003a58:	01d1      	lsls	r1, r2, #7
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7fc fb66 	bl	800012c <__udivsi3>
 8003a60:	0003      	movs	r3, r0
 8003a62:	001a      	movs	r2, r3
 8003a64:	0013      	movs	r3, r2
 8003a66:	015b      	lsls	r3, r3, #5
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	189b      	adds	r3, r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10d      	bne.n	8003a9a <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	22ff      	movs	r2, #255	; 0xff
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2221      	movs	r2, #33	; 0x21
 8003a8a:	2103      	movs	r1, #3
 8003a8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	2100      	movs	r1, #0
 8003a94:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e03a      	b.n	8003b10 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d0e5      	beq.n	8003a72 <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2180      	movs	r1, #128	; 0x80
 8003ac2:	0089      	lsls	r1, r1, #2
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2180      	movs	r1, #128	; 0x80
 8003ad4:	0189      	lsls	r1, r1, #6
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003ada:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <HAL_RTC_SetAlarm_IT+0x2c0>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <HAL_RTC_SetAlarm_IT+0x2c0>)
 8003ae0:	2180      	movs	r1, #128	; 0x80
 8003ae2:	0289      	lsls	r1, r1, #10
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003ae8:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <HAL_RTC_SetAlarm_IT+0x2c0>)
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <HAL_RTC_SetAlarm_IT+0x2c0>)
 8003aee:	2180      	movs	r1, #128	; 0x80
 8003af0:	0289      	lsls	r1, r1, #10
 8003af2:	430a      	orrs	r2, r1
 8003af4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	22ff      	movs	r2, #255	; 0xff
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2221      	movs	r2, #33	; 0x21
 8003b02:	2101      	movs	r1, #1
 8003b04:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	0018      	movs	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b009      	add	sp, #36	; 0x24
 8003b16:	bd90      	pop	{r4, r7, pc}
 8003b18:	20000004 	.word	0x20000004
 8003b1c:	fffffeff 	.word	0xfffffeff
 8003b20:	fffffe7f 	.word	0xfffffe7f
 8003b24:	fffffdff 	.word	0xfffffdff
 8003b28:	fffffd7f 	.word	0xfffffd7f
 8003b2c:	40010400 	.word	0x40010400

08003b30 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	5c9b      	ldrb	r3, [r3, r2]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_RTC_DeactivateAlarm+0x1c>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e086      	b.n	8003c5a <HAL_RTC_DeactivateAlarm+0x12a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	2101      	movs	r1, #1
 8003b52:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2221      	movs	r2, #33	; 0x21
 8003b58:	2102      	movs	r1, #2
 8003b5a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	22ca      	movs	r2, #202	; 0xca
 8003b62:	625a      	str	r2, [r3, #36]	; 0x24
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2253      	movs	r2, #83	; 0x53
 8003b6a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d132      	bne.n	8003bdc <HAL_RTC_DeactivateAlarm+0xac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4938      	ldr	r1, [pc, #224]	; (8003c64 <HAL_RTC_DeactivateAlarm+0x134>)
 8003b82:	400a      	ands	r2, r1
 8003b84:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4935      	ldr	r1, [pc, #212]	; (8003c68 <HAL_RTC_DeactivateAlarm+0x138>)
 8003b92:	400a      	ands	r2, r1
 8003b94:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b96:	f7fd fe19 	bl	80017cc <HAL_GetTick>
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003b9e:	e016      	b.n	8003bce <HAL_RTC_DeactivateAlarm+0x9e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ba0:	f7fd fe14 	bl	80017cc <HAL_GetTick>
 8003ba4:	0002      	movs	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1ad2      	subs	r2, r2, r3
 8003baa:	23fa      	movs	r3, #250	; 0xfa
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d90d      	bls.n	8003bce <HAL_RTC_DeactivateAlarm+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	22ff      	movs	r2, #255	; 0xff
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2221      	movs	r2, #33	; 0x21
 8003bbe:	2103      	movs	r1, #3
 8003bc0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e045      	b.n	8003c5a <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d0e2      	beq.n	8003ba0 <HAL_RTC_DeactivateAlarm+0x70>
 8003bda:	e031      	b.n	8003c40 <HAL_RTC_DeactivateAlarm+0x110>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4921      	ldr	r1, [pc, #132]	; (8003c6c <HAL_RTC_DeactivateAlarm+0x13c>)
 8003be8:	400a      	ands	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	491e      	ldr	r1, [pc, #120]	; (8003c70 <HAL_RTC_DeactivateAlarm+0x140>)
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bfc:	f7fd fde6 	bl	80017cc <HAL_GetTick>
 8003c00:	0003      	movs	r3, r0
 8003c02:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003c04:	e016      	b.n	8003c34 <HAL_RTC_DeactivateAlarm+0x104>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c06:	f7fd fde1 	bl	80017cc <HAL_GetTick>
 8003c0a:	0002      	movs	r2, r0
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1ad2      	subs	r2, r2, r3
 8003c10:	23fa      	movs	r3, #250	; 0xfa
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d90d      	bls.n	8003c34 <HAL_RTC_DeactivateAlarm+0x104>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	22ff      	movs	r2, #255	; 0xff
 8003c1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2221      	movs	r2, #33	; 0x21
 8003c24:	2103      	movs	r1, #3
 8003c26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e012      	b.n	8003c5a <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d0e2      	beq.n	8003c06 <HAL_RTC_DeactivateAlarm+0xd6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	22ff      	movs	r2, #255	; 0xff
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2221      	movs	r2, #33	; 0x21
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	2100      	movs	r1, #0
 8003c56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b004      	add	sp, #16
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	fffffeff 	.word	0xfffffeff
 8003c68:	ffffefff 	.word	0xffffefff
 8003c6c:	fffffdff 	.word	0xfffffdff
 8003c70:	ffffdfff 	.word	0xffffdfff

08003c74 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003c7c:	4b21      	ldr	r3, [pc, #132]	; (8003d04 <HAL_RTC_AlarmIRQHandler+0x90>)
 8003c7e:	2280      	movs	r2, #128	; 0x80
 8003c80:	0292      	lsls	r2, r2, #10
 8003c82:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	015b      	lsls	r3, r3, #5
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d014      	beq.n	8003cbc <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	2380      	movs	r3, #128	; 0x80
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d00d      	beq.n	8003cbc <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	22ff      	movs	r2, #255	; 0xff
 8003ca8:	401a      	ands	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4916      	ldr	r1, [pc, #88]	; (8003d08 <HAL_RTC_AlarmIRQHandler+0x94>)
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f7fc fd90 	bl	80007dc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	019b      	lsls	r3, r3, #6
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d014      	beq.n	8003cf4 <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	2380      	movs	r3, #128	; 0x80
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d00d      	beq.n	8003cf4 <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	22ff      	movs	r2, #255	; 0xff
 8003ce0:	401a      	ands	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4909      	ldr	r1, [pc, #36]	; (8003d0c <HAL_RTC_AlarmIRQHandler+0x98>)
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f000 f8c5 	bl	8003e7e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2221      	movs	r2, #33	; 0x21
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	5499      	strb	r1, [r3, r2]
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40010400 	.word	0x40010400
 8003d08:	fffffe7f 	.word	0xfffffe7f
 8003d0c:	fffffd7f 	.word	0xfffffd7f

08003d10 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a0e      	ldr	r2, [pc, #56]	; (8003d5c <HAL_RTC_WaitForSynchro+0x4c>)
 8003d22:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d24:	f7fd fd52 	bl	80017cc <HAL_GetTick>
 8003d28:	0003      	movs	r3, r0
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d2c:	e00a      	b.n	8003d44 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d2e:	f7fd fd4d 	bl	80017cc <HAL_GetTick>
 8003d32:	0002      	movs	r2, r0
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1ad2      	subs	r2, r2, r3
 8003d38:	23fa      	movs	r3, #250	; 0xfa
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d901      	bls.n	8003d44 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e006      	b.n	8003d52 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d0ee      	beq.n	8003d2e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	0018      	movs	r0, r3
 8003d54:	46bd      	mov	sp, r7
 8003d56:	b004      	add	sp, #16
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	0001ff5f 	.word	0x0001ff5f

08003d60 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	230f      	movs	r3, #15
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2240      	movs	r2, #64	; 0x40
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d12c      	bne.n	8003dda <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2180      	movs	r1, #128	; 0x80
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d90:	f7fd fd1c 	bl	80017cc <HAL_GetTick>
 8003d94:	0003      	movs	r3, r0
 8003d96:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003d98:	e014      	b.n	8003dc4 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d9a:	f7fd fd17 	bl	80017cc <HAL_GetTick>
 8003d9e:	0002      	movs	r2, r0
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	1ad2      	subs	r2, r2, r3
 8003da4:	200f      	movs	r0, #15
 8003da6:	183b      	adds	r3, r7, r0
 8003da8:	1839      	adds	r1, r7, r0
 8003daa:	7809      	ldrb	r1, [r1, #0]
 8003dac:	7019      	strb	r1, [r3, #0]
 8003dae:	23fa      	movs	r3, #250	; 0xfa
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d906      	bls.n	8003dc4 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2221      	movs	r2, #33	; 0x21
 8003dba:	2104      	movs	r1, #4
 8003dbc:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8003dbe:	183b      	adds	r3, r7, r0
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2240      	movs	r2, #64	; 0x40
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d104      	bne.n	8003dda <RTC_EnterInitMode+0x7a>
 8003dd0:	230f      	movs	r3, #15
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d1df      	bne.n	8003d9a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8003dda:	230f      	movs	r3, #15
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	781b      	ldrb	r3, [r3, #0]
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b004      	add	sp, #16
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df0:	240f      	movs	r4, #15
 8003df2:	193b      	adds	r3, r7, r4
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2180      	movs	r1, #128	; 0x80
 8003e04:	438a      	bics	r2, r1
 8003e06:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	4013      	ands	r3, r2
 8003e12:	d10c      	bne.n	8003e2e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	0018      	movs	r0, r3
 8003e18:	f7ff ff7a 	bl	8003d10 <HAL_RTC_WaitForSynchro>
 8003e1c:	1e03      	subs	r3, r0, #0
 8003e1e:	d006      	beq.n	8003e2e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2221      	movs	r2, #33	; 0x21
 8003e24:	2104      	movs	r1, #4
 8003e26:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8003e28:	193b      	adds	r3, r7, r4
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003e2e:	230f      	movs	r3, #15
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	781b      	ldrb	r3, [r3, #0]
}
 8003e34:	0018      	movs	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b005      	add	sp, #20
 8003e3a:	bd90      	pop	{r4, r7, pc}

08003e3c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	0002      	movs	r2, r0
 8003e44:	1dfb      	adds	r3, r7, #7
 8003e46:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003e4c:	e007      	b.n	8003e5e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3301      	adds	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003e54:	1dfb      	adds	r3, r7, #7
 8003e56:	1dfa      	adds	r2, r7, #7
 8003e58:	7812      	ldrb	r2, [r2, #0]
 8003e5a:	3a0a      	subs	r2, #10
 8003e5c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8003e5e:	1dfb      	adds	r3, r7, #7
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b09      	cmp	r3, #9
 8003e64:	d8f3      	bhi.n	8003e4e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	b2db      	uxtb	r3, r3
}
 8003e76:	0018      	movs	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b004      	add	sp, #16
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b002      	add	sp, #8
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e032      	b.n	8003f06 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2239      	movs	r2, #57	; 0x39
 8003ea4:	5c9b      	ldrb	r3, [r3, r2]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d107      	bne.n	8003ebc <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2238      	movs	r2, #56	; 0x38
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f7fd fab4 	bl	8001424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2239      	movs	r2, #57	; 0x39
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	0019      	movs	r1, r3
 8003ece:	0010      	movs	r0, r2
 8003ed0:	f000 fc2c 	bl	800472c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	223e      	movs	r2, #62	; 0x3e
 8003ed8:	2101      	movs	r1, #1
 8003eda:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	223a      	movs	r2, #58	; 0x3a
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	5499      	strb	r1, [r3, r2]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	223b      	movs	r2, #59	; 0x3b
 8003ee8:	2101      	movs	r1, #1
 8003eea:	5499      	strb	r1, [r3, r2]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	223c      	movs	r2, #60	; 0x3c
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	5499      	strb	r1, [r3, r2]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	223d      	movs	r2, #61	; 0x3d
 8003ef8:	2101      	movs	r1, #1
 8003efa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2239      	movs	r2, #57	; 0x39
 8003f00:	2101      	movs	r1, #1
 8003f02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	0018      	movs	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b002      	add	sp, #8
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2239      	movs	r2, #57	; 0x39
 8003f1c:	5c9b      	ldrb	r3, [r3, r2]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d001      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e031      	b.n	8003f8c <HAL_TIM_Base_Start_IT+0x7c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2239      	movs	r2, #57	; 0x39
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	05db      	lsls	r3, r3, #23
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d004      	beq.n	8003f56 <HAL_TIM_Base_Start_IT+0x46>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <HAL_TIM_Base_Start_IT+0x84>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d111      	bne.n	8003f7a <HAL_TIM_Base_Start_IT+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2207      	movs	r2, #7
 8003f5e:	4013      	ands	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b06      	cmp	r3, #6
 8003f66:	d010      	beq.n	8003f8a <HAL_TIM_Base_Start_IT+0x7a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2101      	movs	r1, #1
 8003f74:	430a      	orrs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f78:	e007      	b.n	8003f8a <HAL_TIM_Base_Start_IT+0x7a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2101      	movs	r1, #1
 8003f86:	430a      	orrs	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b004      	add	sp, #16
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40010800 	.word	0x40010800

08003f98 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2101      	movs	r1, #1
 8003fac:	438a      	bics	r2, r1
 8003fae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	; (8003fe0 <HAL_TIM_Base_Stop_IT+0x48>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d107      	bne.n	8003fcc <HAL_TIM_Base_Stop_IT+0x34>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	438a      	bics	r2, r1
 8003fca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2239      	movs	r2, #57	; 0x39
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b002      	add	sp, #8
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	00001111 	.word	0x00001111

08003fe4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e032      	b.n	800405c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2239      	movs	r2, #57	; 0x39
 8003ffa:	5c9b      	ldrb	r3, [r3, r2]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d107      	bne.n	8004012 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2238      	movs	r2, #56	; 0x38
 8004006:	2100      	movs	r1, #0
 8004008:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0018      	movs	r0, r3
 800400e:	f7fd f9eb 	bl	80013e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2239      	movs	r2, #57	; 0x39
 8004016:	2102      	movs	r1, #2
 8004018:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3304      	adds	r3, #4
 8004022:	0019      	movs	r1, r3
 8004024:	0010      	movs	r0, r2
 8004026:	f000 fb81 	bl	800472c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	223e      	movs	r2, #62	; 0x3e
 800402e:	2101      	movs	r1, #1
 8004030:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	223a      	movs	r2, #58	; 0x3a
 8004036:	2101      	movs	r1, #1
 8004038:	5499      	strb	r1, [r3, r2]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	223b      	movs	r2, #59	; 0x3b
 800403e:	2101      	movs	r1, #1
 8004040:	5499      	strb	r1, [r3, r2]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	223c      	movs	r2, #60	; 0x3c
 8004046:	2101      	movs	r1, #1
 8004048:	5499      	strb	r1, [r3, r2]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	223d      	movs	r2, #61	; 0x3d
 800404e:	2101      	movs	r1, #1
 8004050:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2239      	movs	r2, #57	; 0x39
 8004056:	2101      	movs	r1, #1
 8004058:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	0018      	movs	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	b002      	add	sp, #8
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d108      	bne.n	8004086 <HAL_TIM_PWM_Start+0x22>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	223a      	movs	r2, #58	; 0x3a
 8004078:	5c9b      	ldrb	r3, [r3, r2]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	1e5a      	subs	r2, r3, #1
 8004080:	4193      	sbcs	r3, r2
 8004082:	b2db      	uxtb	r3, r3
 8004084:	e01f      	b.n	80040c6 <HAL_TIM_PWM_Start+0x62>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b04      	cmp	r3, #4
 800408a:	d108      	bne.n	800409e <HAL_TIM_PWM_Start+0x3a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	223b      	movs	r2, #59	; 0x3b
 8004090:	5c9b      	ldrb	r3, [r3, r2]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	1e5a      	subs	r2, r3, #1
 8004098:	4193      	sbcs	r3, r2
 800409a:	b2db      	uxtb	r3, r3
 800409c:	e013      	b.n	80040c6 <HAL_TIM_PWM_Start+0x62>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d108      	bne.n	80040b6 <HAL_TIM_PWM_Start+0x52>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	223c      	movs	r2, #60	; 0x3c
 80040a8:	5c9b      	ldrb	r3, [r3, r2]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	1e5a      	subs	r2, r3, #1
 80040b0:	4193      	sbcs	r3, r2
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	e007      	b.n	80040c6 <HAL_TIM_PWM_Start+0x62>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	223d      	movs	r2, #61	; 0x3d
 80040ba:	5c9b      	ldrb	r3, [r3, r2]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	1e5a      	subs	r2, r3, #1
 80040c2:	4193      	sbcs	r3, r2
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e048      	b.n	8004160 <HAL_TIM_PWM_Start+0xfc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d104      	bne.n	80040de <HAL_TIM_PWM_Start+0x7a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	223a      	movs	r2, #58	; 0x3a
 80040d8:	2102      	movs	r1, #2
 80040da:	5499      	strb	r1, [r3, r2]
 80040dc:	e013      	b.n	8004106 <HAL_TIM_PWM_Start+0xa2>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_PWM_Start+0x8a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	223b      	movs	r2, #59	; 0x3b
 80040e8:	2102      	movs	r1, #2
 80040ea:	5499      	strb	r1, [r3, r2]
 80040ec:	e00b      	b.n	8004106 <HAL_TIM_PWM_Start+0xa2>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d104      	bne.n	80040fe <HAL_TIM_PWM_Start+0x9a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	223c      	movs	r2, #60	; 0x3c
 80040f8:	2102      	movs	r1, #2
 80040fa:	5499      	strb	r1, [r3, r2]
 80040fc:	e003      	b.n	8004106 <HAL_TIM_PWM_Start+0xa2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	223d      	movs	r2, #61	; 0x3d
 8004102:	2102      	movs	r1, #2
 8004104:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6839      	ldr	r1, [r7, #0]
 800410c:	2201      	movs	r2, #1
 800410e:	0018      	movs	r0, r3
 8004110:	f000 fcf4 	bl	8004afc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	05db      	lsls	r3, r3, #23
 800411c:	429a      	cmp	r2, r3
 800411e:	d004      	beq.n	800412a <HAL_TIM_PWM_Start+0xc6>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a10      	ldr	r2, [pc, #64]	; (8004168 <HAL_TIM_PWM_Start+0x104>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d111      	bne.n	800414e <HAL_TIM_PWM_Start+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2207      	movs	r2, #7
 8004132:	4013      	ands	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b06      	cmp	r3, #6
 800413a:	d010      	beq.n	800415e <HAL_TIM_PWM_Start+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2101      	movs	r1, #1
 8004148:	430a      	orrs	r2, r1
 800414a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414c:	e007      	b.n	800415e <HAL_TIM_PWM_Start+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2101      	movs	r1, #1
 800415a:	430a      	orrs	r2, r1
 800415c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	0018      	movs	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	b004      	add	sp, #16
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40010800 	.word	0x40010800

0800416c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6839      	ldr	r1, [r7, #0]
 800417c:	2200      	movs	r2, #0
 800417e:	0018      	movs	r0, r3
 8004180:	f000 fcbc 	bl	8004afc <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	4a16      	ldr	r2, [pc, #88]	; (80041e4 <HAL_TIM_PWM_Stop+0x78>)
 800418c:	4013      	ands	r3, r2
 800418e:	d107      	bne.n	80041a0 <HAL_TIM_PWM_Stop+0x34>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2101      	movs	r1, #1
 800419c:	438a      	bics	r2, r1
 800419e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d104      	bne.n	80041b0 <HAL_TIM_PWM_Stop+0x44>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	223a      	movs	r2, #58	; 0x3a
 80041aa:	2101      	movs	r1, #1
 80041ac:	5499      	strb	r1, [r3, r2]
 80041ae:	e013      	b.n	80041d8 <HAL_TIM_PWM_Stop+0x6c>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d104      	bne.n	80041c0 <HAL_TIM_PWM_Stop+0x54>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	223b      	movs	r2, #59	; 0x3b
 80041ba:	2101      	movs	r1, #1
 80041bc:	5499      	strb	r1, [r3, r2]
 80041be:	e00b      	b.n	80041d8 <HAL_TIM_PWM_Stop+0x6c>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d104      	bne.n	80041d0 <HAL_TIM_PWM_Stop+0x64>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	223c      	movs	r2, #60	; 0x3c
 80041ca:	2101      	movs	r1, #1
 80041cc:	5499      	strb	r1, [r3, r2]
 80041ce:	e003      	b.n	80041d8 <HAL_TIM_PWM_Stop+0x6c>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	223d      	movs	r2, #61	; 0x3d
 80041d4:	2101      	movs	r1, #1
 80041d6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	b002      	add	sp, #8
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	00001111 	.word	0x00001111

080041e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2202      	movs	r2, #2
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d124      	bne.n	8004248 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2202      	movs	r2, #2
 8004206:	4013      	ands	r3, r2
 8004208:	2b02      	cmp	r3, #2
 800420a:	d11d      	bne.n	8004248 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2203      	movs	r2, #3
 8004212:	4252      	negs	r2, r2
 8004214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2203      	movs	r2, #3
 8004224:	4013      	ands	r3, r2
 8004226:	d004      	beq.n	8004232 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	0018      	movs	r0, r3
 800422c:	f000 fa66 	bl	80046fc <HAL_TIM_IC_CaptureCallback>
 8004230:	e007      	b.n	8004242 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	0018      	movs	r0, r3
 8004236:	f000 fa59 	bl	80046ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	0018      	movs	r0, r3
 800423e:	f000 fa65 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2204      	movs	r2, #4
 8004250:	4013      	ands	r3, r2
 8004252:	2b04      	cmp	r3, #4
 8004254:	d125      	bne.n	80042a2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	2204      	movs	r2, #4
 800425e:	4013      	ands	r3, r2
 8004260:	2b04      	cmp	r3, #4
 8004262:	d11e      	bne.n	80042a2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2205      	movs	r2, #5
 800426a:	4252      	negs	r2, r2
 800426c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2202      	movs	r2, #2
 8004272:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	23c0      	movs	r3, #192	; 0xc0
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4013      	ands	r3, r2
 8004280:	d004      	beq.n	800428c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	0018      	movs	r0, r3
 8004286:	f000 fa39 	bl	80046fc <HAL_TIM_IC_CaptureCallback>
 800428a:	e007      	b.n	800429c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	0018      	movs	r0, r3
 8004290:	f000 fa2c 	bl	80046ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	0018      	movs	r0, r3
 8004298:	f000 fa38 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	2208      	movs	r2, #8
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d124      	bne.n	80042fa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2208      	movs	r2, #8
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d11d      	bne.n	80042fa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2209      	movs	r2, #9
 80042c4:	4252      	negs	r2, r2
 80042c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2204      	movs	r2, #4
 80042cc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	2203      	movs	r2, #3
 80042d6:	4013      	ands	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	0018      	movs	r0, r3
 80042de:	f000 fa0d 	bl	80046fc <HAL_TIM_IC_CaptureCallback>
 80042e2:	e007      	b.n	80042f4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	0018      	movs	r0, r3
 80042e8:	f000 fa00 	bl	80046ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	0018      	movs	r0, r3
 80042f0:	f000 fa0c 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2210      	movs	r2, #16
 8004302:	4013      	ands	r3, r2
 8004304:	2b10      	cmp	r3, #16
 8004306:	d125      	bne.n	8004354 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2210      	movs	r2, #16
 8004310:	4013      	ands	r3, r2
 8004312:	2b10      	cmp	r3, #16
 8004314:	d11e      	bne.n	8004354 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2211      	movs	r2, #17
 800431c:	4252      	negs	r2, r2
 800431e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2208      	movs	r2, #8
 8004324:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	23c0      	movs	r3, #192	; 0xc0
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4013      	ands	r3, r2
 8004332:	d004      	beq.n	800433e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	0018      	movs	r0, r3
 8004338:	f000 f9e0 	bl	80046fc <HAL_TIM_IC_CaptureCallback>
 800433c:	e007      	b.n	800434e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	0018      	movs	r0, r3
 8004342:	f000 f9d3 	bl	80046ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	0018      	movs	r0, r3
 800434a:	f000 f9df 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2201      	movs	r2, #1
 800435c:	4013      	ands	r3, r2
 800435e:	2b01      	cmp	r3, #1
 8004360:	d10f      	bne.n	8004382 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	4013      	ands	r3, r2
 800436c:	2b01      	cmp	r3, #1
 800436e:	d108      	bne.n	8004382 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2202      	movs	r2, #2
 8004376:	4252      	negs	r2, r2
 8004378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	0018      	movs	r0, r3
 800437e:	f7fc fa4b 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	2240      	movs	r2, #64	; 0x40
 800438a:	4013      	ands	r3, r2
 800438c:	2b40      	cmp	r3, #64	; 0x40
 800438e:	d10f      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	2240      	movs	r2, #64	; 0x40
 8004398:	4013      	ands	r3, r2
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d108      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2241      	movs	r2, #65	; 0x41
 80043a4:	4252      	negs	r2, r2
 80043a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	0018      	movs	r0, r3
 80043ac:	f000 f9b6 	bl	800471c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043b0:	46c0      	nop			; (mov r8, r8)
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b002      	add	sp, #8
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c4:	2317      	movs	r3, #23
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2238      	movs	r2, #56	; 0x38
 80043d0:	5c9b      	ldrb	r3, [r3, r2]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_TIM_PWM_ConfigChannel+0x22>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e0ad      	b.n	8004536 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2238      	movs	r2, #56	; 0x38
 80043de:	2101      	movs	r1, #1
 80043e0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b0c      	cmp	r3, #12
 80043e6:	d100      	bne.n	80043ea <HAL_TIM_PWM_ConfigChannel+0x32>
 80043e8:	e076      	b.n	80044d8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b0c      	cmp	r3, #12
 80043ee:	d900      	bls.n	80043f2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80043f0:	e095      	b.n	800451e <HAL_TIM_PWM_ConfigChannel+0x166>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d04e      	beq.n	8004496 <HAL_TIM_PWM_ConfigChannel+0xde>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d900      	bls.n	8004400 <HAL_TIM_PWM_ConfigChannel+0x48>
 80043fe:	e08e      	b.n	800451e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_TIM_PWM_ConfigChannel+0x56>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b04      	cmp	r3, #4
 800440a:	d021      	beq.n	8004450 <HAL_TIM_PWM_ConfigChannel+0x98>
 800440c:	e087      	b.n	800451e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	0011      	movs	r1, r2
 8004416:	0018      	movs	r0, r3
 8004418:	f000 f9d2 	bl	80047c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2108      	movs	r1, #8
 8004428:	430a      	orrs	r2, r1
 800442a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2104      	movs	r1, #4
 8004438:	438a      	bics	r2, r1
 800443a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6999      	ldr	r1, [r3, #24]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	619a      	str	r2, [r3, #24]
      break;
 800444e:	e06b      	b.n	8004528 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	0011      	movs	r1, r2
 8004458:	0018      	movs	r0, r3
 800445a:	f000 f9ed 	bl	8004838 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	699a      	ldr	r2, [r3, #24]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	0109      	lsls	r1, r1, #4
 800446c:	430a      	orrs	r2, r1
 800446e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4931      	ldr	r1, [pc, #196]	; (8004540 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800447c:	400a      	ands	r2, r1
 800447e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6999      	ldr	r1, [r3, #24]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	021a      	lsls	r2, r3, #8
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	619a      	str	r2, [r3, #24]
      break;
 8004494:	e048      	b.n	8004528 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	0011      	movs	r1, r2
 800449e:	0018      	movs	r0, r3
 80044a0:	f000 fa0c 	bl	80048bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2108      	movs	r1, #8
 80044b0:	430a      	orrs	r2, r1
 80044b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	69da      	ldr	r2, [r3, #28]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2104      	movs	r1, #4
 80044c0:	438a      	bics	r2, r1
 80044c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69d9      	ldr	r1, [r3, #28]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	61da      	str	r2, [r3, #28]
      break;
 80044d6:	e027      	b.n	8004528 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	0011      	movs	r1, r2
 80044e0:	0018      	movs	r0, r3
 80044e2:	f000 fa2b 	bl	800493c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69da      	ldr	r2, [r3, #28]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2180      	movs	r1, #128	; 0x80
 80044f2:	0109      	lsls	r1, r1, #4
 80044f4:	430a      	orrs	r2, r1
 80044f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69da      	ldr	r2, [r3, #28]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	490f      	ldr	r1, [pc, #60]	; (8004540 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004504:	400a      	ands	r2, r1
 8004506:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69d9      	ldr	r1, [r3, #28]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	021a      	lsls	r2, r3, #8
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	61da      	str	r2, [r3, #28]
      break;
 800451c:	e004      	b.n	8004528 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800451e:	2317      	movs	r3, #23
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	2201      	movs	r2, #1
 8004524:	701a      	strb	r2, [r3, #0]
      break;
 8004526:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2238      	movs	r2, #56	; 0x38
 800452c:	2100      	movs	r1, #0
 800452e:	5499      	strb	r1, [r3, r2]

  return status;
 8004530:	2317      	movs	r3, #23
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	781b      	ldrb	r3, [r3, #0]
}
 8004536:	0018      	movs	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	b006      	add	sp, #24
 800453c:	bd80      	pop	{r7, pc}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	fffffbff 	.word	0xfffffbff

08004544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454e:	230f      	movs	r3, #15
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2238      	movs	r2, #56	; 0x38
 800455a:	5c9b      	ldrb	r3, [r3, r2]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_TIM_ConfigClockSource+0x20>
 8004560:	2302      	movs	r3, #2
 8004562:	e0bc      	b.n	80046de <HAL_TIM_ConfigClockSource+0x19a>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2238      	movs	r2, #56	; 0x38
 8004568:	2101      	movs	r1, #1
 800456a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2239      	movs	r2, #57	; 0x39
 8004570:	2102      	movs	r1, #2
 8004572:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2277      	movs	r2, #119	; 0x77
 8004580:	4393      	bics	r3, r2
 8004582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4a58      	ldr	r2, [pc, #352]	; (80046e8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004588:	4013      	ands	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2280      	movs	r2, #128	; 0x80
 800459a:	0192      	lsls	r2, r2, #6
 800459c:	4293      	cmp	r3, r2
 800459e:	d040      	beq.n	8004622 <HAL_TIM_ConfigClockSource+0xde>
 80045a0:	2280      	movs	r2, #128	; 0x80
 80045a2:	0192      	lsls	r2, r2, #6
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d900      	bls.n	80045aa <HAL_TIM_ConfigClockSource+0x66>
 80045a8:	e088      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x178>
 80045aa:	2280      	movs	r2, #128	; 0x80
 80045ac:	0152      	lsls	r2, r2, #5
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d100      	bne.n	80045b4 <HAL_TIM_ConfigClockSource+0x70>
 80045b2:	e088      	b.n	80046c6 <HAL_TIM_ConfigClockSource+0x182>
 80045b4:	2280      	movs	r2, #128	; 0x80
 80045b6:	0152      	lsls	r2, r2, #5
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d900      	bls.n	80045be <HAL_TIM_ConfigClockSource+0x7a>
 80045bc:	e07e      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x178>
 80045be:	2b70      	cmp	r3, #112	; 0x70
 80045c0:	d018      	beq.n	80045f4 <HAL_TIM_ConfigClockSource+0xb0>
 80045c2:	d900      	bls.n	80045c6 <HAL_TIM_ConfigClockSource+0x82>
 80045c4:	e07a      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x178>
 80045c6:	2b60      	cmp	r3, #96	; 0x60
 80045c8:	d04f      	beq.n	800466a <HAL_TIM_ConfigClockSource+0x126>
 80045ca:	d900      	bls.n	80045ce <HAL_TIM_ConfigClockSource+0x8a>
 80045cc:	e076      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x178>
 80045ce:	2b50      	cmp	r3, #80	; 0x50
 80045d0:	d03b      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x106>
 80045d2:	d900      	bls.n	80045d6 <HAL_TIM_ConfigClockSource+0x92>
 80045d4:	e072      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x178>
 80045d6:	2b40      	cmp	r3, #64	; 0x40
 80045d8:	d057      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x146>
 80045da:	d900      	bls.n	80045de <HAL_TIM_ConfigClockSource+0x9a>
 80045dc:	e06e      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x178>
 80045de:	2b30      	cmp	r3, #48	; 0x30
 80045e0:	d063      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x166>
 80045e2:	d86b      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x178>
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d060      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x166>
 80045e8:	d868      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x178>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d05d      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x166>
 80045ee:	2b10      	cmp	r3, #16
 80045f0:	d05b      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x166>
 80045f2:	e063      	b.n	80046bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004604:	f000 fa5a 	bl	8004abc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2277      	movs	r2, #119	; 0x77
 8004614:	4313      	orrs	r3, r2
 8004616:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	609a      	str	r2, [r3, #8]
      break;
 8004620:	e052      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004632:	f000 fa43 	bl	8004abc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2180      	movs	r1, #128	; 0x80
 8004642:	01c9      	lsls	r1, r1, #7
 8004644:	430a      	orrs	r2, r1
 8004646:	609a      	str	r2, [r3, #8]
      break;
 8004648:	e03e      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004656:	001a      	movs	r2, r3
 8004658:	f000 f9b6 	bl	80049c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2150      	movs	r1, #80	; 0x50
 8004662:	0018      	movs	r0, r3
 8004664:	f000 fa10 	bl	8004a88 <TIM_ITRx_SetConfig>
      break;
 8004668:	e02e      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004676:	001a      	movs	r2, r3
 8004678:	f000 f9d4 	bl	8004a24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2160      	movs	r1, #96	; 0x60
 8004682:	0018      	movs	r0, r3
 8004684:	f000 fa00 	bl	8004a88 <TIM_ITRx_SetConfig>
      break;
 8004688:	e01e      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004696:	001a      	movs	r2, r3
 8004698:	f000 f996 	bl	80049c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2140      	movs	r1, #64	; 0x40
 80046a2:	0018      	movs	r0, r3
 80046a4:	f000 f9f0 	bl	8004a88 <TIM_ITRx_SetConfig>
      break;
 80046a8:	e00e      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	0019      	movs	r1, r3
 80046b4:	0010      	movs	r0, r2
 80046b6:	f000 f9e7 	bl	8004a88 <TIM_ITRx_SetConfig>
      break;
 80046ba:	e005      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80046bc:	230f      	movs	r3, #15
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	2201      	movs	r2, #1
 80046c2:	701a      	strb	r2, [r3, #0]
      break;
 80046c4:	e000      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80046c6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2239      	movs	r2, #57	; 0x39
 80046cc:	2101      	movs	r1, #1
 80046ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2238      	movs	r2, #56	; 0x38
 80046d4:	2100      	movs	r1, #0
 80046d6:	5499      	strb	r1, [r3, r2]

  return status;
 80046d8:	230f      	movs	r3, #15
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	781b      	ldrb	r3, [r3, #0]
}
 80046de:	0018      	movs	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b004      	add	sp, #16
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	ffff00ff 	.word	0xffff00ff

080046ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b002      	add	sp, #8
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004704:	46c0      	nop			; (mov r8, r8)
 8004706:	46bd      	mov	sp, r7
 8004708:	b002      	add	sp, #8
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004714:	46c0      	nop			; (mov r8, r8)
 8004716:	46bd      	mov	sp, r7
 8004718:	b002      	add	sp, #8
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	b002      	add	sp, #8
 800472a:	bd80      	pop	{r7, pc}

0800472c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	2380      	movs	r3, #128	; 0x80
 8004740:	05db      	lsls	r3, r3, #23
 8004742:	429a      	cmp	r2, r3
 8004744:	d003      	beq.n	800474e <TIM_Base_SetConfig+0x22>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a1b      	ldr	r2, [pc, #108]	; (80047b8 <TIM_Base_SetConfig+0x8c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d108      	bne.n	8004760 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2270      	movs	r2, #112	; 0x70
 8004752:	4393      	bics	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4313      	orrs	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	2380      	movs	r3, #128	; 0x80
 8004764:	05db      	lsls	r3, r3, #23
 8004766:	429a      	cmp	r2, r3
 8004768:	d003      	beq.n	8004772 <TIM_Base_SetConfig+0x46>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a12      	ldr	r2, [pc, #72]	; (80047b8 <TIM_Base_SetConfig+0x8c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d108      	bne.n	8004784 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a11      	ldr	r2, [pc, #68]	; (80047bc <TIM_Base_SetConfig+0x90>)
 8004776:	4013      	ands	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2280      	movs	r2, #128	; 0x80
 8004788:	4393      	bics	r3, r2
 800478a:	001a      	movs	r2, r3
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	615a      	str	r2, [r3, #20]
}
 80047b0:	46c0      	nop			; (mov r8, r8)
 80047b2:	46bd      	mov	sp, r7
 80047b4:	b004      	add	sp, #16
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40010800 	.word	0x40010800
 80047bc:	fffffcff 	.word	0xfffffcff

080047c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	2201      	movs	r2, #1
 80047d0:	4393      	bics	r3, r2
 80047d2:	001a      	movs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2270      	movs	r2, #112	; 0x70
 80047ee:	4393      	bics	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2203      	movs	r2, #3
 80047f6:	4393      	bics	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4313      	orrs	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2202      	movs	r2, #2
 8004808:	4393      	bics	r3, r2
 800480a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	621a      	str	r2, [r3, #32]
}
 8004830:	46c0      	nop			; (mov r8, r8)
 8004832:	46bd      	mov	sp, r7
 8004834:	b006      	add	sp, #24
 8004836:	bd80      	pop	{r7, pc}

08004838 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	2210      	movs	r2, #16
 8004848:	4393      	bics	r3, r2
 800484a:	001a      	movs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4a13      	ldr	r2, [pc, #76]	; (80048b4 <TIM_OC2_SetConfig+0x7c>)
 8004866:	4013      	ands	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4a12      	ldr	r2, [pc, #72]	; (80048b8 <TIM_OC2_SetConfig+0x80>)
 800486e:	4013      	ands	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2220      	movs	r2, #32
 8004882:	4393      	bics	r3, r2
 8004884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	621a      	str	r2, [r3, #32]
}
 80048ac:	46c0      	nop			; (mov r8, r8)
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b006      	add	sp, #24
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	ffff8fff 	.word	0xffff8fff
 80048b8:	fffffcff 	.word	0xfffffcff

080048bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	4a1a      	ldr	r2, [pc, #104]	; (8004934 <TIM_OC3_SetConfig+0x78>)
 80048cc:	401a      	ands	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2270      	movs	r2, #112	; 0x70
 80048e8:	4393      	bics	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2203      	movs	r2, #3
 80048f0:	4393      	bics	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	4a0d      	ldr	r2, [pc, #52]	; (8004938 <TIM_OC3_SetConfig+0x7c>)
 8004902:	4013      	ands	r3, r2
 8004904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	621a      	str	r2, [r3, #32]
}
 800492c:	46c0      	nop			; (mov r8, r8)
 800492e:	46bd      	mov	sp, r7
 8004930:	b006      	add	sp, #24
 8004932:	bd80      	pop	{r7, pc}
 8004934:	fffffeff 	.word	0xfffffeff
 8004938:	fffffdff 	.word	0xfffffdff

0800493c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	4a1b      	ldr	r2, [pc, #108]	; (80049b8 <TIM_OC4_SetConfig+0x7c>)
 800494c:	401a      	ands	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4a15      	ldr	r2, [pc, #84]	; (80049bc <TIM_OC4_SetConfig+0x80>)
 8004968:	4013      	ands	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a14      	ldr	r2, [pc, #80]	; (80049c0 <TIM_OC4_SetConfig+0x84>)
 8004970:	4013      	ands	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	021b      	lsls	r3, r3, #8
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	4a10      	ldr	r2, [pc, #64]	; (80049c4 <TIM_OC4_SetConfig+0x88>)
 8004984:	4013      	ands	r3, r2
 8004986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	031b      	lsls	r3, r3, #12
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	621a      	str	r2, [r3, #32]
}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b006      	add	sp, #24
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	ffffefff 	.word	0xffffefff
 80049bc:	ffff8fff 	.word	0xffff8fff
 80049c0:	fffffcff 	.word	0xfffffcff
 80049c4:	ffffdfff 	.word	0xffffdfff

080049c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	2201      	movs	r2, #1
 80049e0:	4393      	bics	r3, r2
 80049e2:	001a      	movs	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	22f0      	movs	r2, #240	; 0xf0
 80049f2:	4393      	bics	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	220a      	movs	r2, #10
 8004a04:	4393      	bics	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	621a      	str	r2, [r3, #32]
}
 8004a1c:	46c0      	nop			; (mov r8, r8)
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b006      	add	sp, #24
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	2210      	movs	r2, #16
 8004a36:	4393      	bics	r3, r2
 8004a38:	001a      	movs	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	4a0d      	ldr	r2, [pc, #52]	; (8004a84 <TIM_TI2_ConfigInputStage+0x60>)
 8004a4e:	4013      	ands	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	031b      	lsls	r3, r3, #12
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	22a0      	movs	r2, #160	; 0xa0
 8004a60:	4393      	bics	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	621a      	str	r2, [r3, #32]
}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b006      	add	sp, #24
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	ffff0fff 	.word	0xffff0fff

08004a88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2270      	movs	r2, #112	; 0x70
 8004a9c:	4393      	bics	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	2207      	movs	r2, #7
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	609a      	str	r2, [r3, #8]
}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b004      	add	sp, #16
 8004ab8:	bd80      	pop	{r7, pc}
	...

08004abc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	4a09      	ldr	r2, [pc, #36]	; (8004af8 <TIM_ETR_SetConfig+0x3c>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	021a      	lsls	r2, r3, #8
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	609a      	str	r2, [r3, #8]
}
 8004af0:	46c0      	nop			; (mov r8, r8)
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b006      	add	sp, #24
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	ffff00ff 	.word	0xffff00ff

08004afc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	221f      	movs	r2, #31
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2201      	movs	r2, #1
 8004b10:	409a      	lsls	r2, r3
 8004b12:	0013      	movs	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	43d2      	mvns	r2, r2
 8004b1e:	401a      	ands	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1a      	ldr	r2, [r3, #32]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	211f      	movs	r1, #31
 8004b2c:	400b      	ands	r3, r1
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4099      	lsls	r1, r3
 8004b32:	000b      	movs	r3, r1
 8004b34:	431a      	orrs	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b006      	add	sp, #24
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2238      	movs	r2, #56	; 0x38
 8004b52:	5c9b      	ldrb	r3, [r3, r2]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e03d      	b.n	8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2238      	movs	r2, #56	; 0x38
 8004b60:	2101      	movs	r1, #1
 8004b62:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2239      	movs	r2, #57	; 0x39
 8004b68:	2102      	movs	r1, #2
 8004b6a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2270      	movs	r2, #112	; 0x70
 8004b80:	4393      	bics	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	2380      	movs	r3, #128	; 0x80
 8004b9c:	05db      	lsls	r3, r3, #23
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d004      	beq.n	8004bac <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a0e      	ldr	r2, [pc, #56]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d10c      	bne.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2280      	movs	r2, #128	; 0x80
 8004bb0:	4393      	bics	r3, r2
 8004bb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2239      	movs	r2, #57	; 0x39
 8004bca:	2101      	movs	r1, #1
 8004bcc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2238      	movs	r2, #56	; 0x38
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	0018      	movs	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b004      	add	sp, #16
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40010800 	.word	0x40010800

08004be4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e044      	b.n	8004c80 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d107      	bne.n	8004c0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2278      	movs	r2, #120	; 0x78
 8004c02:	2100      	movs	r1, #0
 8004c04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f7fc fc67 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2224      	movs	r2, #36	; 0x24
 8004c12:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2101      	movs	r1, #1
 8004c20:	438a      	bics	r2, r1
 8004c22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	0018      	movs	r0, r3
 8004c28:	f000 f8d0 	bl	8004dcc <UART_SetConfig>
 8004c2c:	0003      	movs	r3, r0
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e024      	b.n	8004c80 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	0018      	movs	r0, r3
 8004c42:	f000 fb0d 	bl	8005260 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	490d      	ldr	r1, [pc, #52]	; (8004c88 <HAL_UART_Init+0xa4>)
 8004c52:	400a      	ands	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	212a      	movs	r1, #42	; 0x2a
 8004c62:	438a      	bics	r2, r1
 8004c64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2101      	movs	r1, #1
 8004c72:	430a      	orrs	r2, r1
 8004c74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f000 fba5 	bl	80053c8 <UART_CheckIdleState>
 8004c7e:	0003      	movs	r3, r0
}
 8004c80:	0018      	movs	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b002      	add	sp, #8
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	ffffb7ff 	.word	0xffffb7ff

08004c8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08a      	sub	sp, #40	; 0x28
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	1dbb      	adds	r3, r7, #6
 8004c9a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d000      	beq.n	8004ca6 <HAL_UART_Transmit+0x1a>
 8004ca4:	e08c      	b.n	8004dc0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_UART_Transmit+0x28>
 8004cac:	1dbb      	adds	r3, r7, #6
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e084      	b.n	8004dc2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	2380      	movs	r3, #128	; 0x80
 8004cbe:	015b      	lsls	r3, r3, #5
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d109      	bne.n	8004cd8 <HAL_UART_Transmit+0x4c>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d105      	bne.n	8004cd8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d001      	beq.n	8004cd8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e074      	b.n	8004dc2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2284      	movs	r2, #132	; 0x84
 8004cdc:	2100      	movs	r1, #0
 8004cde:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2221      	movs	r2, #33	; 0x21
 8004ce4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ce6:	f7fc fd71 	bl	80017cc <HAL_GetTick>
 8004cea:	0003      	movs	r3, r0
 8004cec:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1dba      	adds	r2, r7, #6
 8004cf2:	2150      	movs	r1, #80	; 0x50
 8004cf4:	8812      	ldrh	r2, [r2, #0]
 8004cf6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	1dba      	adds	r2, r7, #6
 8004cfc:	2152      	movs	r1, #82	; 0x52
 8004cfe:	8812      	ldrh	r2, [r2, #0]
 8004d00:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	2380      	movs	r3, #128	; 0x80
 8004d08:	015b      	lsls	r3, r3, #5
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d108      	bne.n	8004d20 <HAL_UART_Transmit+0x94>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d104      	bne.n	8004d20 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	e003      	b.n	8004d28 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d28:	e02f      	b.n	8004d8a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	0013      	movs	r3, r2
 8004d34:	2200      	movs	r2, #0
 8004d36:	2180      	movs	r1, #128	; 0x80
 8004d38:	f000 fbee 	bl	8005518 <UART_WaitOnFlagUntilTimeout>
 8004d3c:	1e03      	subs	r3, r0, #0
 8004d3e:	d004      	beq.n	8004d4a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e03b      	b.n	8004dc2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10b      	bne.n	8004d68 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	001a      	movs	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	05d2      	lsls	r2, r2, #23
 8004d5c:	0dd2      	lsrs	r2, r2, #23
 8004d5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	3302      	adds	r3, #2
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	e007      	b.n	8004d78 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	781a      	ldrb	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	3301      	adds	r3, #1
 8004d76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2252      	movs	r2, #82	; 0x52
 8004d7c:	5a9b      	ldrh	r3, [r3, r2]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b299      	uxth	r1, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2252      	movs	r2, #82	; 0x52
 8004d88:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2252      	movs	r2, #82	; 0x52
 8004d8e:	5a9b      	ldrh	r3, [r3, r2]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1c9      	bne.n	8004d2a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	0013      	movs	r3, r2
 8004da0:	2200      	movs	r2, #0
 8004da2:	2140      	movs	r1, #64	; 0x40
 8004da4:	f000 fbb8 	bl	8005518 <UART_WaitOnFlagUntilTimeout>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d004      	beq.n	8004db6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e005      	b.n	8004dc2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	e000      	b.n	8004dc2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004dc0:	2302      	movs	r3, #2
  }
}
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b008      	add	sp, #32
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dcc:	b5b0      	push	{r4, r5, r7, lr}
 8004dce:	b08e      	sub	sp, #56	; 0x38
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dd4:	231a      	movs	r3, #26
 8004dd6:	2218      	movs	r2, #24
 8004dd8:	189b      	adds	r3, r3, r2
 8004dda:	19db      	adds	r3, r3, r7
 8004ddc:	2200      	movs	r2, #0
 8004dde:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4ab4      	ldr	r2, [pc, #720]	; (80050d0 <UART_SetConfig+0x304>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	0019      	movs	r1, r3
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4aaf      	ldr	r2, [pc, #700]	; (80050d4 <UART_SetConfig+0x308>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	0019      	movs	r1, r3
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4aa9      	ldr	r2, [pc, #676]	; (80050d8 <UART_SetConfig+0x30c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	4aa5      	ldr	r2, [pc, #660]	; (80050dc <UART_SetConfig+0x310>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	0019      	movs	r1, r3
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e52:	430a      	orrs	r2, r1
 8004e54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4aa1      	ldr	r2, [pc, #644]	; (80050e0 <UART_SetConfig+0x314>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d131      	bne.n	8004ec4 <UART_SetConfig+0xf8>
 8004e60:	4ba0      	ldr	r3, [pc, #640]	; (80050e4 <UART_SetConfig+0x318>)
 8004e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e64:	220c      	movs	r2, #12
 8004e66:	4013      	ands	r3, r2
 8004e68:	2b0c      	cmp	r3, #12
 8004e6a:	d01d      	beq.n	8004ea8 <UART_SetConfig+0xdc>
 8004e6c:	d823      	bhi.n	8004eb6 <UART_SetConfig+0xea>
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d00c      	beq.n	8004e8c <UART_SetConfig+0xc0>
 8004e72:	d820      	bhi.n	8004eb6 <UART_SetConfig+0xea>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <UART_SetConfig+0xb2>
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d00e      	beq.n	8004e9a <UART_SetConfig+0xce>
 8004e7c:	e01b      	b.n	8004eb6 <UART_SetConfig+0xea>
 8004e7e:	231b      	movs	r3, #27
 8004e80:	2218      	movs	r2, #24
 8004e82:	189b      	adds	r3, r3, r2
 8004e84:	19db      	adds	r3, r3, r7
 8004e86:	2200      	movs	r2, #0
 8004e88:	701a      	strb	r2, [r3, #0]
 8004e8a:	e065      	b.n	8004f58 <UART_SetConfig+0x18c>
 8004e8c:	231b      	movs	r3, #27
 8004e8e:	2218      	movs	r2, #24
 8004e90:	189b      	adds	r3, r3, r2
 8004e92:	19db      	adds	r3, r3, r7
 8004e94:	2202      	movs	r2, #2
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	e05e      	b.n	8004f58 <UART_SetConfig+0x18c>
 8004e9a:	231b      	movs	r3, #27
 8004e9c:	2218      	movs	r2, #24
 8004e9e:	189b      	adds	r3, r3, r2
 8004ea0:	19db      	adds	r3, r3, r7
 8004ea2:	2204      	movs	r2, #4
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	e057      	b.n	8004f58 <UART_SetConfig+0x18c>
 8004ea8:	231b      	movs	r3, #27
 8004eaa:	2218      	movs	r2, #24
 8004eac:	189b      	adds	r3, r3, r2
 8004eae:	19db      	adds	r3, r3, r7
 8004eb0:	2208      	movs	r2, #8
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	e050      	b.n	8004f58 <UART_SetConfig+0x18c>
 8004eb6:	231b      	movs	r3, #27
 8004eb8:	2218      	movs	r2, #24
 8004eba:	189b      	adds	r3, r3, r2
 8004ebc:	19db      	adds	r3, r3, r7
 8004ebe:	2210      	movs	r2, #16
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	e049      	b.n	8004f58 <UART_SetConfig+0x18c>
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a83      	ldr	r2, [pc, #524]	; (80050d8 <UART_SetConfig+0x30c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d13e      	bne.n	8004f4c <UART_SetConfig+0x180>
 8004ece:	4b85      	ldr	r3, [pc, #532]	; (80050e4 <UART_SetConfig+0x318>)
 8004ed0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ed2:	23c0      	movs	r3, #192	; 0xc0
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	22c0      	movs	r2, #192	; 0xc0
 8004eda:	0112      	lsls	r2, r2, #4
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d027      	beq.n	8004f30 <UART_SetConfig+0x164>
 8004ee0:	22c0      	movs	r2, #192	; 0xc0
 8004ee2:	0112      	lsls	r2, r2, #4
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d82a      	bhi.n	8004f3e <UART_SetConfig+0x172>
 8004ee8:	2280      	movs	r2, #128	; 0x80
 8004eea:	0112      	lsls	r2, r2, #4
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d011      	beq.n	8004f14 <UART_SetConfig+0x148>
 8004ef0:	2280      	movs	r2, #128	; 0x80
 8004ef2:	0112      	lsls	r2, r2, #4
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d822      	bhi.n	8004f3e <UART_SetConfig+0x172>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d004      	beq.n	8004f06 <UART_SetConfig+0x13a>
 8004efc:	2280      	movs	r2, #128	; 0x80
 8004efe:	00d2      	lsls	r2, r2, #3
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00e      	beq.n	8004f22 <UART_SetConfig+0x156>
 8004f04:	e01b      	b.n	8004f3e <UART_SetConfig+0x172>
 8004f06:	231b      	movs	r3, #27
 8004f08:	2218      	movs	r2, #24
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	19db      	adds	r3, r3, r7
 8004f0e:	2200      	movs	r2, #0
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	e021      	b.n	8004f58 <UART_SetConfig+0x18c>
 8004f14:	231b      	movs	r3, #27
 8004f16:	2218      	movs	r2, #24
 8004f18:	189b      	adds	r3, r3, r2
 8004f1a:	19db      	adds	r3, r3, r7
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	701a      	strb	r2, [r3, #0]
 8004f20:	e01a      	b.n	8004f58 <UART_SetConfig+0x18c>
 8004f22:	231b      	movs	r3, #27
 8004f24:	2218      	movs	r2, #24
 8004f26:	189b      	adds	r3, r3, r2
 8004f28:	19db      	adds	r3, r3, r7
 8004f2a:	2204      	movs	r2, #4
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e013      	b.n	8004f58 <UART_SetConfig+0x18c>
 8004f30:	231b      	movs	r3, #27
 8004f32:	2218      	movs	r2, #24
 8004f34:	189b      	adds	r3, r3, r2
 8004f36:	19db      	adds	r3, r3, r7
 8004f38:	2208      	movs	r2, #8
 8004f3a:	701a      	strb	r2, [r3, #0]
 8004f3c:	e00c      	b.n	8004f58 <UART_SetConfig+0x18c>
 8004f3e:	231b      	movs	r3, #27
 8004f40:	2218      	movs	r2, #24
 8004f42:	189b      	adds	r3, r3, r2
 8004f44:	19db      	adds	r3, r3, r7
 8004f46:	2210      	movs	r2, #16
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	e005      	b.n	8004f58 <UART_SetConfig+0x18c>
 8004f4c:	231b      	movs	r3, #27
 8004f4e:	2218      	movs	r2, #24
 8004f50:	189b      	adds	r3, r3, r2
 8004f52:	19db      	adds	r3, r3, r7
 8004f54:	2210      	movs	r2, #16
 8004f56:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a5e      	ldr	r2, [pc, #376]	; (80050d8 <UART_SetConfig+0x30c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d000      	beq.n	8004f64 <UART_SetConfig+0x198>
 8004f62:	e084      	b.n	800506e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f64:	231b      	movs	r3, #27
 8004f66:	2218      	movs	r2, #24
 8004f68:	189b      	adds	r3, r3, r2
 8004f6a:	19db      	adds	r3, r3, r7
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d01d      	beq.n	8004fae <UART_SetConfig+0x1e2>
 8004f72:	dc20      	bgt.n	8004fb6 <UART_SetConfig+0x1ea>
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d015      	beq.n	8004fa4 <UART_SetConfig+0x1d8>
 8004f78:	dc1d      	bgt.n	8004fb6 <UART_SetConfig+0x1ea>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <UART_SetConfig+0x1b8>
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d005      	beq.n	8004f8e <UART_SetConfig+0x1c2>
 8004f82:	e018      	b.n	8004fb6 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f84:	f7fe f940 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f8c:	e01c      	b.n	8004fc8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f8e:	4b55      	ldr	r3, [pc, #340]	; (80050e4 <UART_SetConfig+0x318>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2210      	movs	r2, #16
 8004f94:	4013      	ands	r3, r2
 8004f96:	d002      	beq.n	8004f9e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004f98:	4b53      	ldr	r3, [pc, #332]	; (80050e8 <UART_SetConfig+0x31c>)
 8004f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f9c:	e014      	b.n	8004fc8 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8004f9e:	4b53      	ldr	r3, [pc, #332]	; (80050ec <UART_SetConfig+0x320>)
 8004fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fa2:	e011      	b.n	8004fc8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa4:	f7fe f880 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8004fa8:	0003      	movs	r3, r0
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fac:	e00c      	b.n	8004fc8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fae:	2380      	movs	r3, #128	; 0x80
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fb4:	e008      	b.n	8004fc8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004fba:	231a      	movs	r3, #26
 8004fbc:	2218      	movs	r2, #24
 8004fbe:	189b      	adds	r3, r3, r2
 8004fc0:	19db      	adds	r3, r3, r7
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	701a      	strb	r2, [r3, #0]
        break;
 8004fc6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d100      	bne.n	8004fd0 <UART_SetConfig+0x204>
 8004fce:	e12f      	b.n	8005230 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	0013      	movs	r3, r2
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	189b      	adds	r3, r3, r2
 8004fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d305      	bcc.n	8004fec <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d906      	bls.n	8004ffa <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8004fec:	231a      	movs	r3, #26
 8004fee:	2218      	movs	r2, #24
 8004ff0:	189b      	adds	r3, r3, r2
 8004ff2:	19db      	adds	r3, r3, r7
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	e11a      	b.n	8005230 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	6939      	ldr	r1, [r7, #16]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	000b      	movs	r3, r1
 8005008:	0e1b      	lsrs	r3, r3, #24
 800500a:	0010      	movs	r0, r2
 800500c:	0205      	lsls	r5, r0, #8
 800500e:	431d      	orrs	r5, r3
 8005010:	000b      	movs	r3, r1
 8005012:	021c      	lsls	r4, r3, #8
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	60bb      	str	r3, [r7, #8]
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	68b8      	ldr	r0, [r7, #8]
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	1900      	adds	r0, r0, r4
 8005026:	4169      	adcs	r1, r5
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	603b      	str	r3, [r7, #0]
 800502e:	2300      	movs	r3, #0
 8005030:	607b      	str	r3, [r7, #4]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f7fb f905 	bl	8000244 <__aeabi_uldivmod>
 800503a:	0002      	movs	r2, r0
 800503c:	000b      	movs	r3, r1
 800503e:	0013      	movs	r3, r2
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005044:	23c0      	movs	r3, #192	; 0xc0
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	429a      	cmp	r2, r3
 800504a:	d309      	bcc.n	8005060 <UART_SetConfig+0x294>
 800504c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	035b      	lsls	r3, r3, #13
 8005052:	429a      	cmp	r2, r3
 8005054:	d204      	bcs.n	8005060 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800505c:	60da      	str	r2, [r3, #12]
 800505e:	e0e7      	b.n	8005230 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8005060:	231a      	movs	r3, #26
 8005062:	2218      	movs	r2, #24
 8005064:	189b      	adds	r3, r3, r2
 8005066:	19db      	adds	r3, r3, r7
 8005068:	2201      	movs	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	e0e0      	b.n	8005230 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	69da      	ldr	r2, [r3, #28]
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	021b      	lsls	r3, r3, #8
 8005076:	429a      	cmp	r2, r3
 8005078:	d000      	beq.n	800507c <UART_SetConfig+0x2b0>
 800507a:	e082      	b.n	8005182 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 800507c:	231b      	movs	r3, #27
 800507e:	2218      	movs	r2, #24
 8005080:	189b      	adds	r3, r3, r2
 8005082:	19db      	adds	r3, r3, r7
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b08      	cmp	r3, #8
 8005088:	d834      	bhi.n	80050f4 <UART_SetConfig+0x328>
 800508a:	009a      	lsls	r2, r3, #2
 800508c:	4b18      	ldr	r3, [pc, #96]	; (80050f0 <UART_SetConfig+0x324>)
 800508e:	18d3      	adds	r3, r2, r3
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005094:	f7fe f8b8 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 8005098:	0003      	movs	r3, r0
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800509c:	e033      	b.n	8005106 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800509e:	f7fe f8c9 	bl	8003234 <HAL_RCC_GetPCLK2Freq>
 80050a2:	0003      	movs	r3, r0
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050a6:	e02e      	b.n	8005106 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050a8:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <UART_SetConfig+0x318>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2210      	movs	r2, #16
 80050ae:	4013      	ands	r3, r2
 80050b0:	d002      	beq.n	80050b8 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80050b2:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <UART_SetConfig+0x31c>)
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050b6:	e026      	b.n	8005106 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80050b8:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <UART_SetConfig+0x320>)
 80050ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050bc:	e023      	b.n	8005106 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050be:	f7fd fff3 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 80050c2:	0003      	movs	r3, r0
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050c6:	e01e      	b.n	8005106 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c8:	2380      	movs	r3, #128	; 0x80
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050ce:	e01a      	b.n	8005106 <UART_SetConfig+0x33a>
 80050d0:	efff69f3 	.word	0xefff69f3
 80050d4:	ffffcfff 	.word	0xffffcfff
 80050d8:	40004800 	.word	0x40004800
 80050dc:	fffff4ff 	.word	0xfffff4ff
 80050e0:	40004400 	.word	0x40004400
 80050e4:	40021000 	.word	0x40021000
 80050e8:	003d0900 	.word	0x003d0900
 80050ec:	00f42400 	.word	0x00f42400
 80050f0:	080060e8 	.word	0x080060e8
      default:
        pclk = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80050f8:	231a      	movs	r3, #26
 80050fa:	2218      	movs	r2, #24
 80050fc:	189b      	adds	r3, r3, r2
 80050fe:	19db      	adds	r3, r3, r7
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
        break;
 8005104:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005108:	2b00      	cmp	r3, #0
 800510a:	d100      	bne.n	800510e <UART_SetConfig+0x342>
 800510c:	e090      	b.n	8005230 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800510e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005110:	005a      	lsls	r2, r3, #1
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	18d2      	adds	r2, r2, r3
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	0019      	movs	r1, r3
 8005120:	0010      	movs	r0, r2
 8005122:	f7fb f803 	bl	800012c <__udivsi3>
 8005126:	0003      	movs	r3, r0
 8005128:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	2b0f      	cmp	r3, #15
 800512e:	d921      	bls.n	8005174 <UART_SetConfig+0x3a8>
 8005130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	025b      	lsls	r3, r3, #9
 8005136:	429a      	cmp	r2, r3
 8005138:	d21c      	bcs.n	8005174 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	b29a      	uxth	r2, r3
 800513e:	200e      	movs	r0, #14
 8005140:	2418      	movs	r4, #24
 8005142:	1903      	adds	r3, r0, r4
 8005144:	19db      	adds	r3, r3, r7
 8005146:	210f      	movs	r1, #15
 8005148:	438a      	bics	r2, r1
 800514a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	b29b      	uxth	r3, r3
 8005152:	2207      	movs	r2, #7
 8005154:	4013      	ands	r3, r2
 8005156:	b299      	uxth	r1, r3
 8005158:	1903      	adds	r3, r0, r4
 800515a:	19db      	adds	r3, r3, r7
 800515c:	1902      	adds	r2, r0, r4
 800515e:	19d2      	adds	r2, r2, r7
 8005160:	8812      	ldrh	r2, [r2, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	1902      	adds	r2, r0, r4
 800516c:	19d2      	adds	r2, r2, r7
 800516e:	8812      	ldrh	r2, [r2, #0]
 8005170:	60da      	str	r2, [r3, #12]
 8005172:	e05d      	b.n	8005230 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005174:	231a      	movs	r3, #26
 8005176:	2218      	movs	r2, #24
 8005178:	189b      	adds	r3, r3, r2
 800517a:	19db      	adds	r3, r3, r7
 800517c:	2201      	movs	r2, #1
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	e056      	b.n	8005230 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005182:	231b      	movs	r3, #27
 8005184:	2218      	movs	r2, #24
 8005186:	189b      	adds	r3, r3, r2
 8005188:	19db      	adds	r3, r3, r7
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d822      	bhi.n	80051d6 <UART_SetConfig+0x40a>
 8005190:	009a      	lsls	r2, r3, #2
 8005192:	4b2f      	ldr	r3, [pc, #188]	; (8005250 <UART_SetConfig+0x484>)
 8005194:	18d3      	adds	r3, r2, r3
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800519a:	f7fe f835 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 800519e:	0003      	movs	r3, r0
 80051a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051a2:	e021      	b.n	80051e8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051a4:	f7fe f846 	bl	8003234 <HAL_RCC_GetPCLK2Freq>
 80051a8:	0003      	movs	r3, r0
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051ac:	e01c      	b.n	80051e8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051ae:	4b29      	ldr	r3, [pc, #164]	; (8005254 <UART_SetConfig+0x488>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2210      	movs	r2, #16
 80051b4:	4013      	ands	r3, r2
 80051b6:	d002      	beq.n	80051be <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80051b8:	4b27      	ldr	r3, [pc, #156]	; (8005258 <UART_SetConfig+0x48c>)
 80051ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051bc:	e014      	b.n	80051e8 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80051be:	4b27      	ldr	r3, [pc, #156]	; (800525c <UART_SetConfig+0x490>)
 80051c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051c2:	e011      	b.n	80051e8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051c4:	f7fd ff70 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 80051c8:	0003      	movs	r3, r0
 80051ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051cc:	e00c      	b.n	80051e8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ce:	2380      	movs	r3, #128	; 0x80
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051d4:	e008      	b.n	80051e8 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80051da:	231a      	movs	r3, #26
 80051dc:	2218      	movs	r2, #24
 80051de:	189b      	adds	r3, r3, r2
 80051e0:	19db      	adds	r3, r3, r7
 80051e2:	2201      	movs	r2, #1
 80051e4:	701a      	strb	r2, [r3, #0]
        break;
 80051e6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d020      	beq.n	8005230 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	085a      	lsrs	r2, r3, #1
 80051f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f6:	18d2      	adds	r2, r2, r3
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	0019      	movs	r1, r3
 80051fe:	0010      	movs	r0, r2
 8005200:	f7fa ff94 	bl	800012c <__udivsi3>
 8005204:	0003      	movs	r3, r0
 8005206:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	2b0f      	cmp	r3, #15
 800520c:	d90a      	bls.n	8005224 <UART_SetConfig+0x458>
 800520e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	025b      	lsls	r3, r3, #9
 8005214:	429a      	cmp	r2, r3
 8005216:	d205      	bcs.n	8005224 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	b29a      	uxth	r2, r3
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60da      	str	r2, [r3, #12]
 8005222:	e005      	b.n	8005230 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005224:	231a      	movs	r3, #26
 8005226:	2218      	movs	r2, #24
 8005228:	189b      	adds	r3, r3, r2
 800522a:	19db      	adds	r3, r3, r7
 800522c:	2201      	movs	r2, #1
 800522e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	2200      	movs	r2, #0
 8005234:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	2200      	movs	r2, #0
 800523a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800523c:	231a      	movs	r3, #26
 800523e:	2218      	movs	r2, #24
 8005240:	189b      	adds	r3, r3, r2
 8005242:	19db      	adds	r3, r3, r7
 8005244:	781b      	ldrb	r3, [r3, #0]
}
 8005246:	0018      	movs	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	b00e      	add	sp, #56	; 0x38
 800524c:	bdb0      	pop	{r4, r5, r7, pc}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	0800610c 	.word	0x0800610c
 8005254:	40021000 	.word	0x40021000
 8005258:	003d0900 	.word	0x003d0900
 800525c:	00f42400 	.word	0x00f42400

08005260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	2201      	movs	r2, #1
 800526e:	4013      	ands	r3, r2
 8005270:	d00b      	beq.n	800528a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	4a4a      	ldr	r2, [pc, #296]	; (80053a4 <UART_AdvFeatureConfig+0x144>)
 800527a:	4013      	ands	r3, r2
 800527c:	0019      	movs	r1, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	2202      	movs	r2, #2
 8005290:	4013      	ands	r3, r2
 8005292:	d00b      	beq.n	80052ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	4a43      	ldr	r2, [pc, #268]	; (80053a8 <UART_AdvFeatureConfig+0x148>)
 800529c:	4013      	ands	r3, r2
 800529e:	0019      	movs	r1, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	2204      	movs	r2, #4
 80052b2:	4013      	ands	r3, r2
 80052b4:	d00b      	beq.n	80052ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	4a3b      	ldr	r2, [pc, #236]	; (80053ac <UART_AdvFeatureConfig+0x14c>)
 80052be:	4013      	ands	r3, r2
 80052c0:	0019      	movs	r1, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	2208      	movs	r2, #8
 80052d4:	4013      	ands	r3, r2
 80052d6:	d00b      	beq.n	80052f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4a34      	ldr	r2, [pc, #208]	; (80053b0 <UART_AdvFeatureConfig+0x150>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	0019      	movs	r1, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	2210      	movs	r2, #16
 80052f6:	4013      	ands	r3, r2
 80052f8:	d00b      	beq.n	8005312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	4a2c      	ldr	r2, [pc, #176]	; (80053b4 <UART_AdvFeatureConfig+0x154>)
 8005302:	4013      	ands	r3, r2
 8005304:	0019      	movs	r1, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	2220      	movs	r2, #32
 8005318:	4013      	ands	r3, r2
 800531a:	d00b      	beq.n	8005334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	4a25      	ldr	r2, [pc, #148]	; (80053b8 <UART_AdvFeatureConfig+0x158>)
 8005324:	4013      	ands	r3, r2
 8005326:	0019      	movs	r1, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	2240      	movs	r2, #64	; 0x40
 800533a:	4013      	ands	r3, r2
 800533c:	d01d      	beq.n	800537a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	4a1d      	ldr	r2, [pc, #116]	; (80053bc <UART_AdvFeatureConfig+0x15c>)
 8005346:	4013      	ands	r3, r2
 8005348:	0019      	movs	r1, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800535a:	2380      	movs	r3, #128	; 0x80
 800535c:	035b      	lsls	r3, r3, #13
 800535e:	429a      	cmp	r2, r3
 8005360:	d10b      	bne.n	800537a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	4a15      	ldr	r2, [pc, #84]	; (80053c0 <UART_AdvFeatureConfig+0x160>)
 800536a:	4013      	ands	r3, r2
 800536c:	0019      	movs	r1, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2280      	movs	r2, #128	; 0x80
 8005380:	4013      	ands	r3, r2
 8005382:	d00b      	beq.n	800539c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	4a0e      	ldr	r2, [pc, #56]	; (80053c4 <UART_AdvFeatureConfig+0x164>)
 800538c:	4013      	ands	r3, r2
 800538e:	0019      	movs	r1, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	605a      	str	r2, [r3, #4]
  }
}
 800539c:	46c0      	nop			; (mov r8, r8)
 800539e:	46bd      	mov	sp, r7
 80053a0:	b002      	add	sp, #8
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	fffdffff 	.word	0xfffdffff
 80053a8:	fffeffff 	.word	0xfffeffff
 80053ac:	fffbffff 	.word	0xfffbffff
 80053b0:	ffff7fff 	.word	0xffff7fff
 80053b4:	ffffefff 	.word	0xffffefff
 80053b8:	ffffdfff 	.word	0xffffdfff
 80053bc:	ffefffff 	.word	0xffefffff
 80053c0:	ff9fffff 	.word	0xff9fffff
 80053c4:	fff7ffff 	.word	0xfff7ffff

080053c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b092      	sub	sp, #72	; 0x48
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2284      	movs	r2, #132	; 0x84
 80053d4:	2100      	movs	r1, #0
 80053d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053d8:	f7fc f9f8 	bl	80017cc <HAL_GetTick>
 80053dc:	0003      	movs	r3, r0
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2208      	movs	r2, #8
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d12c      	bne.n	8005448 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f0:	2280      	movs	r2, #128	; 0x80
 80053f2:	0391      	lsls	r1, r2, #14
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	4a46      	ldr	r2, [pc, #280]	; (8005510 <UART_CheckIdleState+0x148>)
 80053f8:	9200      	str	r2, [sp, #0]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f000 f88c 	bl	8005518 <UART_WaitOnFlagUntilTimeout>
 8005400:	1e03      	subs	r3, r0, #0
 8005402:	d021      	beq.n	8005448 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005404:	f3ef 8310 	mrs	r3, PRIMASK
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800540c:	63bb      	str	r3, [r7, #56]	; 0x38
 800540e:	2301      	movs	r3, #1
 8005410:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	f383 8810 	msr	PRIMASK, r3
}
 8005418:	46c0      	nop			; (mov r8, r8)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2180      	movs	r1, #128	; 0x80
 8005426:	438a      	bics	r2, r1
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005430:	f383 8810 	msr	PRIMASK, r3
}
 8005434:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2278      	movs	r2, #120	; 0x78
 8005440:	2100      	movs	r1, #0
 8005442:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e05f      	b.n	8005508 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2204      	movs	r2, #4
 8005450:	4013      	ands	r3, r2
 8005452:	2b04      	cmp	r3, #4
 8005454:	d146      	bne.n	80054e4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005458:	2280      	movs	r2, #128	; 0x80
 800545a:	03d1      	lsls	r1, r2, #15
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	4a2c      	ldr	r2, [pc, #176]	; (8005510 <UART_CheckIdleState+0x148>)
 8005460:	9200      	str	r2, [sp, #0]
 8005462:	2200      	movs	r2, #0
 8005464:	f000 f858 	bl	8005518 <UART_WaitOnFlagUntilTimeout>
 8005468:	1e03      	subs	r3, r0, #0
 800546a:	d03b      	beq.n	80054e4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800546c:	f3ef 8310 	mrs	r3, PRIMASK
 8005470:	60fb      	str	r3, [r7, #12]
  return(result);
 8005472:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005474:	637b      	str	r3, [r7, #52]	; 0x34
 8005476:	2301      	movs	r3, #1
 8005478:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f383 8810 	msr	PRIMASK, r3
}
 8005480:	46c0      	nop			; (mov r8, r8)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4921      	ldr	r1, [pc, #132]	; (8005514 <UART_CheckIdleState+0x14c>)
 800548e:	400a      	ands	r2, r1
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005494:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f383 8810 	msr	PRIMASK, r3
}
 800549c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800549e:	f3ef 8310 	mrs	r3, PRIMASK
 80054a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80054a4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a6:	633b      	str	r3, [r7, #48]	; 0x30
 80054a8:	2301      	movs	r3, #1
 80054aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f383 8810 	msr	PRIMASK, r3
}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2101      	movs	r1, #1
 80054c0:	438a      	bics	r2, r1
 80054c2:	609a      	str	r2, [r3, #8]
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	f383 8810 	msr	PRIMASK, r3
}
 80054ce:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2280      	movs	r2, #128	; 0x80
 80054d4:	2120      	movs	r1, #32
 80054d6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2278      	movs	r2, #120	; 0x78
 80054dc:	2100      	movs	r1, #0
 80054de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e011      	b.n	8005508 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2280      	movs	r2, #128	; 0x80
 80054ee:	2120      	movs	r1, #32
 80054f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2278      	movs	r2, #120	; 0x78
 8005502:	2100      	movs	r1, #0
 8005504:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	0018      	movs	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	b010      	add	sp, #64	; 0x40
 800550e:	bd80      	pop	{r7, pc}
 8005510:	01ffffff 	.word	0x01ffffff
 8005514:	fffffedf 	.word	0xfffffedf

08005518 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	1dfb      	adds	r3, r7, #7
 8005526:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005528:	e04b      	b.n	80055c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	3301      	adds	r3, #1
 800552e:	d048      	beq.n	80055c2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005530:	f7fc f94c 	bl	80017cc <HAL_GetTick>
 8005534:	0002      	movs	r2, r0
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	429a      	cmp	r2, r3
 800553e:	d302      	bcc.n	8005546 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e04b      	b.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2204      	movs	r2, #4
 8005552:	4013      	ands	r3, r2
 8005554:	d035      	beq.n	80055c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	2208      	movs	r2, #8
 800555e:	4013      	ands	r3, r2
 8005560:	2b08      	cmp	r3, #8
 8005562:	d111      	bne.n	8005588 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2208      	movs	r2, #8
 800556a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	0018      	movs	r0, r3
 8005570:	f000 f83c 	bl	80055ec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2284      	movs	r2, #132	; 0x84
 8005578:	2108      	movs	r1, #8
 800557a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2278      	movs	r2, #120	; 0x78
 8005580:	2100      	movs	r1, #0
 8005582:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e02c      	b.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	69da      	ldr	r2, [r3, #28]
 800558e:	2380      	movs	r3, #128	; 0x80
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	401a      	ands	r2, r3
 8005594:	2380      	movs	r3, #128	; 0x80
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	429a      	cmp	r2, r3
 800559a:	d112      	bne.n	80055c2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2280      	movs	r2, #128	; 0x80
 80055a2:	0112      	lsls	r2, r2, #4
 80055a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	0018      	movs	r0, r3
 80055aa:	f000 f81f 	bl	80055ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2284      	movs	r2, #132	; 0x84
 80055b2:	2120      	movs	r1, #32
 80055b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2278      	movs	r2, #120	; 0x78
 80055ba:	2100      	movs	r1, #0
 80055bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e00f      	b.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	4013      	ands	r3, r2
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	425a      	negs	r2, r3
 80055d2:	4153      	adcs	r3, r2
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	001a      	movs	r2, r3
 80055d8:	1dfb      	adds	r3, r7, #7
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d0a4      	beq.n	800552a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	0018      	movs	r0, r3
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b004      	add	sp, #16
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08e      	sub	sp, #56	; 0x38
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055f4:	f3ef 8310 	mrs	r3, PRIMASK
 80055f8:	617b      	str	r3, [r7, #20]
  return(result);
 80055fa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055fc:	637b      	str	r3, [r7, #52]	; 0x34
 80055fe:	2301      	movs	r3, #1
 8005600:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	f383 8810 	msr	PRIMASK, r3
}
 8005608:	46c0      	nop			; (mov r8, r8)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4926      	ldr	r1, [pc, #152]	; (80056b0 <UART_EndRxTransfer+0xc4>)
 8005616:	400a      	ands	r2, r1
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	f383 8810 	msr	PRIMASK, r3
}
 8005624:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005626:	f3ef 8310 	mrs	r3, PRIMASK
 800562a:	623b      	str	r3, [r7, #32]
  return(result);
 800562c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562e:	633b      	str	r3, [r7, #48]	; 0x30
 8005630:	2301      	movs	r3, #1
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	f383 8810 	msr	PRIMASK, r3
}
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2101      	movs	r1, #1
 8005648:	438a      	bics	r2, r1
 800564a:	609a      	str	r2, [r3, #8]
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	f383 8810 	msr	PRIMASK, r3
}
 8005656:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565c:	2b01      	cmp	r3, #1
 800565e:	d118      	bne.n	8005692 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005660:	f3ef 8310 	mrs	r3, PRIMASK
 8005664:	60bb      	str	r3, [r7, #8]
  return(result);
 8005666:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800566a:	2301      	movs	r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f383 8810 	msr	PRIMASK, r3
}
 8005674:	46c0      	nop			; (mov r8, r8)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2110      	movs	r1, #16
 8005682:	438a      	bics	r2, r1
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005688:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f383 8810 	msr	PRIMASK, r3
}
 8005690:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2280      	movs	r2, #128	; 0x80
 8005696:	2120      	movs	r1, #32
 8005698:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b00e      	add	sp, #56	; 0x38
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	fffffedf 	.word	0xfffffedf

080056b4 <siprintf>:
 80056b4:	b40e      	push	{r1, r2, r3}
 80056b6:	b500      	push	{lr}
 80056b8:	490b      	ldr	r1, [pc, #44]	; (80056e8 <siprintf+0x34>)
 80056ba:	b09c      	sub	sp, #112	; 0x70
 80056bc:	ab1d      	add	r3, sp, #116	; 0x74
 80056be:	9002      	str	r0, [sp, #8]
 80056c0:	9006      	str	r0, [sp, #24]
 80056c2:	9107      	str	r1, [sp, #28]
 80056c4:	9104      	str	r1, [sp, #16]
 80056c6:	4809      	ldr	r0, [pc, #36]	; (80056ec <siprintf+0x38>)
 80056c8:	4909      	ldr	r1, [pc, #36]	; (80056f0 <siprintf+0x3c>)
 80056ca:	cb04      	ldmia	r3!, {r2}
 80056cc:	9105      	str	r1, [sp, #20]
 80056ce:	6800      	ldr	r0, [r0, #0]
 80056d0:	a902      	add	r1, sp, #8
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	f000 f9a2 	bl	8005a1c <_svfiprintf_r>
 80056d8:	2200      	movs	r2, #0
 80056da:	9b02      	ldr	r3, [sp, #8]
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	b01c      	add	sp, #112	; 0x70
 80056e0:	bc08      	pop	{r3}
 80056e2:	b003      	add	sp, #12
 80056e4:	4718      	bx	r3
 80056e6:	46c0      	nop			; (mov r8, r8)
 80056e8:	7fffffff 	.word	0x7fffffff
 80056ec:	2000005c 	.word	0x2000005c
 80056f0:	ffff0208 	.word	0xffff0208

080056f4 <memset>:
 80056f4:	0003      	movs	r3, r0
 80056f6:	1882      	adds	r2, r0, r2
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d100      	bne.n	80056fe <memset+0xa>
 80056fc:	4770      	bx	lr
 80056fe:	7019      	strb	r1, [r3, #0]
 8005700:	3301      	adds	r3, #1
 8005702:	e7f9      	b.n	80056f8 <memset+0x4>

08005704 <__errno>:
 8005704:	4b01      	ldr	r3, [pc, #4]	; (800570c <__errno+0x8>)
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	4770      	bx	lr
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	2000005c 	.word	0x2000005c

08005710 <__libc_init_array>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	2600      	movs	r6, #0
 8005714:	4c0c      	ldr	r4, [pc, #48]	; (8005748 <__libc_init_array+0x38>)
 8005716:	4d0d      	ldr	r5, [pc, #52]	; (800574c <__libc_init_array+0x3c>)
 8005718:	1b64      	subs	r4, r4, r5
 800571a:	10a4      	asrs	r4, r4, #2
 800571c:	42a6      	cmp	r6, r4
 800571e:	d109      	bne.n	8005734 <__libc_init_array+0x24>
 8005720:	2600      	movs	r6, #0
 8005722:	f000 fc6d 	bl	8006000 <_init>
 8005726:	4c0a      	ldr	r4, [pc, #40]	; (8005750 <__libc_init_array+0x40>)
 8005728:	4d0a      	ldr	r5, [pc, #40]	; (8005754 <__libc_init_array+0x44>)
 800572a:	1b64      	subs	r4, r4, r5
 800572c:	10a4      	asrs	r4, r4, #2
 800572e:	42a6      	cmp	r6, r4
 8005730:	d105      	bne.n	800573e <__libc_init_array+0x2e>
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	00b3      	lsls	r3, r6, #2
 8005736:	58eb      	ldr	r3, [r5, r3]
 8005738:	4798      	blx	r3
 800573a:	3601      	adds	r6, #1
 800573c:	e7ee      	b.n	800571c <__libc_init_array+0xc>
 800573e:	00b3      	lsls	r3, r6, #2
 8005740:	58eb      	ldr	r3, [r5, r3]
 8005742:	4798      	blx	r3
 8005744:	3601      	adds	r6, #1
 8005746:	e7f2      	b.n	800572e <__libc_init_array+0x1e>
 8005748:	0800616c 	.word	0x0800616c
 800574c:	0800616c 	.word	0x0800616c
 8005750:	08006170 	.word	0x08006170
 8005754:	0800616c 	.word	0x0800616c

08005758 <__retarget_lock_acquire_recursive>:
 8005758:	4770      	bx	lr

0800575a <__retarget_lock_release_recursive>:
 800575a:	4770      	bx	lr

0800575c <_free_r>:
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	0005      	movs	r5, r0
 8005760:	2900      	cmp	r1, #0
 8005762:	d010      	beq.n	8005786 <_free_r+0x2a>
 8005764:	1f0c      	subs	r4, r1, #4
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	da00      	bge.n	800576e <_free_r+0x12>
 800576c:	18e4      	adds	r4, r4, r3
 800576e:	0028      	movs	r0, r5
 8005770:	f000 f8e2 	bl	8005938 <__malloc_lock>
 8005774:	4a1d      	ldr	r2, [pc, #116]	; (80057ec <_free_r+0x90>)
 8005776:	6813      	ldr	r3, [r2, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d105      	bne.n	8005788 <_free_r+0x2c>
 800577c:	6063      	str	r3, [r4, #4]
 800577e:	6014      	str	r4, [r2, #0]
 8005780:	0028      	movs	r0, r5
 8005782:	f000 f8e1 	bl	8005948 <__malloc_unlock>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	42a3      	cmp	r3, r4
 800578a:	d908      	bls.n	800579e <_free_r+0x42>
 800578c:	6820      	ldr	r0, [r4, #0]
 800578e:	1821      	adds	r1, r4, r0
 8005790:	428b      	cmp	r3, r1
 8005792:	d1f3      	bne.n	800577c <_free_r+0x20>
 8005794:	6819      	ldr	r1, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	1809      	adds	r1, r1, r0
 800579a:	6021      	str	r1, [r4, #0]
 800579c:	e7ee      	b.n	800577c <_free_r+0x20>
 800579e:	001a      	movs	r2, r3
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <_free_r+0x4e>
 80057a6:	42a3      	cmp	r3, r4
 80057a8:	d9f9      	bls.n	800579e <_free_r+0x42>
 80057aa:	6811      	ldr	r1, [r2, #0]
 80057ac:	1850      	adds	r0, r2, r1
 80057ae:	42a0      	cmp	r0, r4
 80057b0:	d10b      	bne.n	80057ca <_free_r+0x6e>
 80057b2:	6820      	ldr	r0, [r4, #0]
 80057b4:	1809      	adds	r1, r1, r0
 80057b6:	1850      	adds	r0, r2, r1
 80057b8:	6011      	str	r1, [r2, #0]
 80057ba:	4283      	cmp	r3, r0
 80057bc:	d1e0      	bne.n	8005780 <_free_r+0x24>
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	1841      	adds	r1, r0, r1
 80057c4:	6011      	str	r1, [r2, #0]
 80057c6:	6053      	str	r3, [r2, #4]
 80057c8:	e7da      	b.n	8005780 <_free_r+0x24>
 80057ca:	42a0      	cmp	r0, r4
 80057cc:	d902      	bls.n	80057d4 <_free_r+0x78>
 80057ce:	230c      	movs	r3, #12
 80057d0:	602b      	str	r3, [r5, #0]
 80057d2:	e7d5      	b.n	8005780 <_free_r+0x24>
 80057d4:	6820      	ldr	r0, [r4, #0]
 80057d6:	1821      	adds	r1, r4, r0
 80057d8:	428b      	cmp	r3, r1
 80057da:	d103      	bne.n	80057e4 <_free_r+0x88>
 80057dc:	6819      	ldr	r1, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	1809      	adds	r1, r1, r0
 80057e2:	6021      	str	r1, [r4, #0]
 80057e4:	6063      	str	r3, [r4, #4]
 80057e6:	6054      	str	r4, [r2, #4]
 80057e8:	e7ca      	b.n	8005780 <_free_r+0x24>
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	200003b8 	.word	0x200003b8

080057f0 <sbrk_aligned>:
 80057f0:	b570      	push	{r4, r5, r6, lr}
 80057f2:	4e0f      	ldr	r6, [pc, #60]	; (8005830 <sbrk_aligned+0x40>)
 80057f4:	000d      	movs	r5, r1
 80057f6:	6831      	ldr	r1, [r6, #0]
 80057f8:	0004      	movs	r4, r0
 80057fa:	2900      	cmp	r1, #0
 80057fc:	d102      	bne.n	8005804 <sbrk_aligned+0x14>
 80057fe:	f000 fba1 	bl	8005f44 <_sbrk_r>
 8005802:	6030      	str	r0, [r6, #0]
 8005804:	0029      	movs	r1, r5
 8005806:	0020      	movs	r0, r4
 8005808:	f000 fb9c 	bl	8005f44 <_sbrk_r>
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	d00a      	beq.n	8005826 <sbrk_aligned+0x36>
 8005810:	2303      	movs	r3, #3
 8005812:	1cc5      	adds	r5, r0, #3
 8005814:	439d      	bics	r5, r3
 8005816:	42a8      	cmp	r0, r5
 8005818:	d007      	beq.n	800582a <sbrk_aligned+0x3a>
 800581a:	1a29      	subs	r1, r5, r0
 800581c:	0020      	movs	r0, r4
 800581e:	f000 fb91 	bl	8005f44 <_sbrk_r>
 8005822:	3001      	adds	r0, #1
 8005824:	d101      	bne.n	800582a <sbrk_aligned+0x3a>
 8005826:	2501      	movs	r5, #1
 8005828:	426d      	negs	r5, r5
 800582a:	0028      	movs	r0, r5
 800582c:	bd70      	pop	{r4, r5, r6, pc}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	200003bc 	.word	0x200003bc

08005834 <_malloc_r>:
 8005834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005836:	2203      	movs	r2, #3
 8005838:	1ccb      	adds	r3, r1, #3
 800583a:	4393      	bics	r3, r2
 800583c:	3308      	adds	r3, #8
 800583e:	0006      	movs	r6, r0
 8005840:	001f      	movs	r7, r3
 8005842:	2b0c      	cmp	r3, #12
 8005844:	d238      	bcs.n	80058b8 <_malloc_r+0x84>
 8005846:	270c      	movs	r7, #12
 8005848:	42b9      	cmp	r1, r7
 800584a:	d837      	bhi.n	80058bc <_malloc_r+0x88>
 800584c:	0030      	movs	r0, r6
 800584e:	f000 f873 	bl	8005938 <__malloc_lock>
 8005852:	4b38      	ldr	r3, [pc, #224]	; (8005934 <_malloc_r+0x100>)
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	001c      	movs	r4, r3
 800585a:	2c00      	cmp	r4, #0
 800585c:	d133      	bne.n	80058c6 <_malloc_r+0x92>
 800585e:	0039      	movs	r1, r7
 8005860:	0030      	movs	r0, r6
 8005862:	f7ff ffc5 	bl	80057f0 <sbrk_aligned>
 8005866:	0004      	movs	r4, r0
 8005868:	1c43      	adds	r3, r0, #1
 800586a:	d15e      	bne.n	800592a <_malloc_r+0xf6>
 800586c:	9b00      	ldr	r3, [sp, #0]
 800586e:	681c      	ldr	r4, [r3, #0]
 8005870:	0025      	movs	r5, r4
 8005872:	2d00      	cmp	r5, #0
 8005874:	d14e      	bne.n	8005914 <_malloc_r+0xe0>
 8005876:	2c00      	cmp	r4, #0
 8005878:	d051      	beq.n	800591e <_malloc_r+0xea>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	0029      	movs	r1, r5
 800587e:	18e3      	adds	r3, r4, r3
 8005880:	0030      	movs	r0, r6
 8005882:	9301      	str	r3, [sp, #4]
 8005884:	f000 fb5e 	bl	8005f44 <_sbrk_r>
 8005888:	9b01      	ldr	r3, [sp, #4]
 800588a:	4283      	cmp	r3, r0
 800588c:	d147      	bne.n	800591e <_malloc_r+0xea>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	0030      	movs	r0, r6
 8005892:	1aff      	subs	r7, r7, r3
 8005894:	0039      	movs	r1, r7
 8005896:	f7ff ffab 	bl	80057f0 <sbrk_aligned>
 800589a:	3001      	adds	r0, #1
 800589c:	d03f      	beq.n	800591e <_malloc_r+0xea>
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	19db      	adds	r3, r3, r7
 80058a2:	6023      	str	r3, [r4, #0]
 80058a4:	9b00      	ldr	r3, [sp, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d040      	beq.n	800592e <_malloc_r+0xfa>
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	42a2      	cmp	r2, r4
 80058b0:	d133      	bne.n	800591a <_malloc_r+0xe6>
 80058b2:	2200      	movs	r2, #0
 80058b4:	605a      	str	r2, [r3, #4]
 80058b6:	e014      	b.n	80058e2 <_malloc_r+0xae>
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	dac5      	bge.n	8005848 <_malloc_r+0x14>
 80058bc:	230c      	movs	r3, #12
 80058be:	2500      	movs	r5, #0
 80058c0:	6033      	str	r3, [r6, #0]
 80058c2:	0028      	movs	r0, r5
 80058c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058c6:	6821      	ldr	r1, [r4, #0]
 80058c8:	1bc9      	subs	r1, r1, r7
 80058ca:	d420      	bmi.n	800590e <_malloc_r+0xda>
 80058cc:	290b      	cmp	r1, #11
 80058ce:	d918      	bls.n	8005902 <_malloc_r+0xce>
 80058d0:	19e2      	adds	r2, r4, r7
 80058d2:	6027      	str	r7, [r4, #0]
 80058d4:	42a3      	cmp	r3, r4
 80058d6:	d112      	bne.n	80058fe <_malloc_r+0xca>
 80058d8:	9b00      	ldr	r3, [sp, #0]
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	6863      	ldr	r3, [r4, #4]
 80058de:	6011      	str	r1, [r2, #0]
 80058e0:	6053      	str	r3, [r2, #4]
 80058e2:	0030      	movs	r0, r6
 80058e4:	0025      	movs	r5, r4
 80058e6:	f000 f82f 	bl	8005948 <__malloc_unlock>
 80058ea:	2207      	movs	r2, #7
 80058ec:	350b      	adds	r5, #11
 80058ee:	1d23      	adds	r3, r4, #4
 80058f0:	4395      	bics	r5, r2
 80058f2:	1aea      	subs	r2, r5, r3
 80058f4:	429d      	cmp	r5, r3
 80058f6:	d0e4      	beq.n	80058c2 <_malloc_r+0x8e>
 80058f8:	1b5b      	subs	r3, r3, r5
 80058fa:	50a3      	str	r3, [r4, r2]
 80058fc:	e7e1      	b.n	80058c2 <_malloc_r+0x8e>
 80058fe:	605a      	str	r2, [r3, #4]
 8005900:	e7ec      	b.n	80058dc <_malloc_r+0xa8>
 8005902:	6862      	ldr	r2, [r4, #4]
 8005904:	42a3      	cmp	r3, r4
 8005906:	d1d5      	bne.n	80058b4 <_malloc_r+0x80>
 8005908:	9b00      	ldr	r3, [sp, #0]
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	e7e9      	b.n	80058e2 <_malloc_r+0xae>
 800590e:	0023      	movs	r3, r4
 8005910:	6864      	ldr	r4, [r4, #4]
 8005912:	e7a2      	b.n	800585a <_malloc_r+0x26>
 8005914:	002c      	movs	r4, r5
 8005916:	686d      	ldr	r5, [r5, #4]
 8005918:	e7ab      	b.n	8005872 <_malloc_r+0x3e>
 800591a:	0013      	movs	r3, r2
 800591c:	e7c4      	b.n	80058a8 <_malloc_r+0x74>
 800591e:	230c      	movs	r3, #12
 8005920:	0030      	movs	r0, r6
 8005922:	6033      	str	r3, [r6, #0]
 8005924:	f000 f810 	bl	8005948 <__malloc_unlock>
 8005928:	e7cb      	b.n	80058c2 <_malloc_r+0x8e>
 800592a:	6027      	str	r7, [r4, #0]
 800592c:	e7d9      	b.n	80058e2 <_malloc_r+0xae>
 800592e:	605b      	str	r3, [r3, #4]
 8005930:	deff      	udf	#255	; 0xff
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	200003b8 	.word	0x200003b8

08005938 <__malloc_lock>:
 8005938:	b510      	push	{r4, lr}
 800593a:	4802      	ldr	r0, [pc, #8]	; (8005944 <__malloc_lock+0xc>)
 800593c:	f7ff ff0c 	bl	8005758 <__retarget_lock_acquire_recursive>
 8005940:	bd10      	pop	{r4, pc}
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	200003b4 	.word	0x200003b4

08005948 <__malloc_unlock>:
 8005948:	b510      	push	{r4, lr}
 800594a:	4802      	ldr	r0, [pc, #8]	; (8005954 <__malloc_unlock+0xc>)
 800594c:	f7ff ff05 	bl	800575a <__retarget_lock_release_recursive>
 8005950:	bd10      	pop	{r4, pc}
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	200003b4 	.word	0x200003b4

08005958 <__ssputs_r>:
 8005958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800595a:	b085      	sub	sp, #20
 800595c:	9301      	str	r3, [sp, #4]
 800595e:	9203      	str	r2, [sp, #12]
 8005960:	688e      	ldr	r6, [r1, #8]
 8005962:	9a01      	ldr	r2, [sp, #4]
 8005964:	0007      	movs	r7, r0
 8005966:	000c      	movs	r4, r1
 8005968:	680b      	ldr	r3, [r1, #0]
 800596a:	4296      	cmp	r6, r2
 800596c:	d831      	bhi.n	80059d2 <__ssputs_r+0x7a>
 800596e:	898a      	ldrh	r2, [r1, #12]
 8005970:	2190      	movs	r1, #144	; 0x90
 8005972:	00c9      	lsls	r1, r1, #3
 8005974:	420a      	tst	r2, r1
 8005976:	d029      	beq.n	80059cc <__ssputs_r+0x74>
 8005978:	2003      	movs	r0, #3
 800597a:	6921      	ldr	r1, [r4, #16]
 800597c:	1a5b      	subs	r3, r3, r1
 800597e:	9302      	str	r3, [sp, #8]
 8005980:	6963      	ldr	r3, [r4, #20]
 8005982:	4343      	muls	r3, r0
 8005984:	0fdd      	lsrs	r5, r3, #31
 8005986:	18ed      	adds	r5, r5, r3
 8005988:	9b01      	ldr	r3, [sp, #4]
 800598a:	9802      	ldr	r0, [sp, #8]
 800598c:	3301      	adds	r3, #1
 800598e:	181b      	adds	r3, r3, r0
 8005990:	106d      	asrs	r5, r5, #1
 8005992:	42ab      	cmp	r3, r5
 8005994:	d900      	bls.n	8005998 <__ssputs_r+0x40>
 8005996:	001d      	movs	r5, r3
 8005998:	0552      	lsls	r2, r2, #21
 800599a:	d529      	bpl.n	80059f0 <__ssputs_r+0x98>
 800599c:	0029      	movs	r1, r5
 800599e:	0038      	movs	r0, r7
 80059a0:	f7ff ff48 	bl	8005834 <_malloc_r>
 80059a4:	1e06      	subs	r6, r0, #0
 80059a6:	d02d      	beq.n	8005a04 <__ssputs_r+0xac>
 80059a8:	9a02      	ldr	r2, [sp, #8]
 80059aa:	6921      	ldr	r1, [r4, #16]
 80059ac:	f000 fae7 	bl	8005f7e <memcpy>
 80059b0:	89a2      	ldrh	r2, [r4, #12]
 80059b2:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <__ssputs_r+0xc0>)
 80059b4:	401a      	ands	r2, r3
 80059b6:	2380      	movs	r3, #128	; 0x80
 80059b8:	4313      	orrs	r3, r2
 80059ba:	81a3      	strh	r3, [r4, #12]
 80059bc:	9b02      	ldr	r3, [sp, #8]
 80059be:	6126      	str	r6, [r4, #16]
 80059c0:	18f6      	adds	r6, r6, r3
 80059c2:	6026      	str	r6, [r4, #0]
 80059c4:	6165      	str	r5, [r4, #20]
 80059c6:	9e01      	ldr	r6, [sp, #4]
 80059c8:	1aed      	subs	r5, r5, r3
 80059ca:	60a5      	str	r5, [r4, #8]
 80059cc:	9b01      	ldr	r3, [sp, #4]
 80059ce:	429e      	cmp	r6, r3
 80059d0:	d900      	bls.n	80059d4 <__ssputs_r+0x7c>
 80059d2:	9e01      	ldr	r6, [sp, #4]
 80059d4:	0032      	movs	r2, r6
 80059d6:	9903      	ldr	r1, [sp, #12]
 80059d8:	6820      	ldr	r0, [r4, #0]
 80059da:	f000 fa9f 	bl	8005f1c <memmove>
 80059de:	2000      	movs	r0, #0
 80059e0:	68a3      	ldr	r3, [r4, #8]
 80059e2:	1b9b      	subs	r3, r3, r6
 80059e4:	60a3      	str	r3, [r4, #8]
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	199b      	adds	r3, r3, r6
 80059ea:	6023      	str	r3, [r4, #0]
 80059ec:	b005      	add	sp, #20
 80059ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059f0:	002a      	movs	r2, r5
 80059f2:	0038      	movs	r0, r7
 80059f4:	f000 facc 	bl	8005f90 <_realloc_r>
 80059f8:	1e06      	subs	r6, r0, #0
 80059fa:	d1df      	bne.n	80059bc <__ssputs_r+0x64>
 80059fc:	0038      	movs	r0, r7
 80059fe:	6921      	ldr	r1, [r4, #16]
 8005a00:	f7ff feac 	bl	800575c <_free_r>
 8005a04:	230c      	movs	r3, #12
 8005a06:	2001      	movs	r0, #1
 8005a08:	603b      	str	r3, [r7, #0]
 8005a0a:	89a2      	ldrh	r2, [r4, #12]
 8005a0c:	3334      	adds	r3, #52	; 0x34
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	81a3      	strh	r3, [r4, #12]
 8005a12:	4240      	negs	r0, r0
 8005a14:	e7ea      	b.n	80059ec <__ssputs_r+0x94>
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	fffffb7f 	.word	0xfffffb7f

08005a1c <_svfiprintf_r>:
 8005a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a1e:	b0a1      	sub	sp, #132	; 0x84
 8005a20:	9003      	str	r0, [sp, #12]
 8005a22:	001d      	movs	r5, r3
 8005a24:	898b      	ldrh	r3, [r1, #12]
 8005a26:	000f      	movs	r7, r1
 8005a28:	0016      	movs	r6, r2
 8005a2a:	061b      	lsls	r3, r3, #24
 8005a2c:	d511      	bpl.n	8005a52 <_svfiprintf_r+0x36>
 8005a2e:	690b      	ldr	r3, [r1, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10e      	bne.n	8005a52 <_svfiprintf_r+0x36>
 8005a34:	2140      	movs	r1, #64	; 0x40
 8005a36:	f7ff fefd 	bl	8005834 <_malloc_r>
 8005a3a:	6038      	str	r0, [r7, #0]
 8005a3c:	6138      	str	r0, [r7, #16]
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	d105      	bne.n	8005a4e <_svfiprintf_r+0x32>
 8005a42:	230c      	movs	r3, #12
 8005a44:	9a03      	ldr	r2, [sp, #12]
 8005a46:	3801      	subs	r0, #1
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	b021      	add	sp, #132	; 0x84
 8005a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a4e:	2340      	movs	r3, #64	; 0x40
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	2300      	movs	r3, #0
 8005a54:	ac08      	add	r4, sp, #32
 8005a56:	6163      	str	r3, [r4, #20]
 8005a58:	3320      	adds	r3, #32
 8005a5a:	7663      	strb	r3, [r4, #25]
 8005a5c:	3310      	adds	r3, #16
 8005a5e:	76a3      	strb	r3, [r4, #26]
 8005a60:	9507      	str	r5, [sp, #28]
 8005a62:	0035      	movs	r5, r6
 8005a64:	782b      	ldrb	r3, [r5, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <_svfiprintf_r+0x52>
 8005a6a:	2b25      	cmp	r3, #37	; 0x25
 8005a6c:	d148      	bne.n	8005b00 <_svfiprintf_r+0xe4>
 8005a6e:	1bab      	subs	r3, r5, r6
 8005a70:	9305      	str	r3, [sp, #20]
 8005a72:	42b5      	cmp	r5, r6
 8005a74:	d00b      	beq.n	8005a8e <_svfiprintf_r+0x72>
 8005a76:	0032      	movs	r2, r6
 8005a78:	0039      	movs	r1, r7
 8005a7a:	9803      	ldr	r0, [sp, #12]
 8005a7c:	f7ff ff6c 	bl	8005958 <__ssputs_r>
 8005a80:	3001      	adds	r0, #1
 8005a82:	d100      	bne.n	8005a86 <_svfiprintf_r+0x6a>
 8005a84:	e0af      	b.n	8005be6 <_svfiprintf_r+0x1ca>
 8005a86:	6963      	ldr	r3, [r4, #20]
 8005a88:	9a05      	ldr	r2, [sp, #20]
 8005a8a:	189b      	adds	r3, r3, r2
 8005a8c:	6163      	str	r3, [r4, #20]
 8005a8e:	782b      	ldrb	r3, [r5, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d100      	bne.n	8005a96 <_svfiprintf_r+0x7a>
 8005a94:	e0a7      	b.n	8005be6 <_svfiprintf_r+0x1ca>
 8005a96:	2201      	movs	r2, #1
 8005a98:	2300      	movs	r3, #0
 8005a9a:	4252      	negs	r2, r2
 8005a9c:	6062      	str	r2, [r4, #4]
 8005a9e:	a904      	add	r1, sp, #16
 8005aa0:	3254      	adds	r2, #84	; 0x54
 8005aa2:	1852      	adds	r2, r2, r1
 8005aa4:	1c6e      	adds	r6, r5, #1
 8005aa6:	6023      	str	r3, [r4, #0]
 8005aa8:	60e3      	str	r3, [r4, #12]
 8005aaa:	60a3      	str	r3, [r4, #8]
 8005aac:	7013      	strb	r3, [r2, #0]
 8005aae:	65a3      	str	r3, [r4, #88]	; 0x58
 8005ab0:	4b55      	ldr	r3, [pc, #340]	; (8005c08 <_svfiprintf_r+0x1ec>)
 8005ab2:	2205      	movs	r2, #5
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	7831      	ldrb	r1, [r6, #0]
 8005ab8:	9305      	str	r3, [sp, #20]
 8005aba:	f000 fa55 	bl	8005f68 <memchr>
 8005abe:	1c75      	adds	r5, r6, #1
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	d11f      	bne.n	8005b04 <_svfiprintf_r+0xe8>
 8005ac4:	6822      	ldr	r2, [r4, #0]
 8005ac6:	06d3      	lsls	r3, r2, #27
 8005ac8:	d504      	bpl.n	8005ad4 <_svfiprintf_r+0xb8>
 8005aca:	2353      	movs	r3, #83	; 0x53
 8005acc:	a904      	add	r1, sp, #16
 8005ace:	185b      	adds	r3, r3, r1
 8005ad0:	2120      	movs	r1, #32
 8005ad2:	7019      	strb	r1, [r3, #0]
 8005ad4:	0713      	lsls	r3, r2, #28
 8005ad6:	d504      	bpl.n	8005ae2 <_svfiprintf_r+0xc6>
 8005ad8:	2353      	movs	r3, #83	; 0x53
 8005ada:	a904      	add	r1, sp, #16
 8005adc:	185b      	adds	r3, r3, r1
 8005ade:	212b      	movs	r1, #43	; 0x2b
 8005ae0:	7019      	strb	r1, [r3, #0]
 8005ae2:	7833      	ldrb	r3, [r6, #0]
 8005ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ae6:	d016      	beq.n	8005b16 <_svfiprintf_r+0xfa>
 8005ae8:	0035      	movs	r5, r6
 8005aea:	2100      	movs	r1, #0
 8005aec:	200a      	movs	r0, #10
 8005aee:	68e3      	ldr	r3, [r4, #12]
 8005af0:	782a      	ldrb	r2, [r5, #0]
 8005af2:	1c6e      	adds	r6, r5, #1
 8005af4:	3a30      	subs	r2, #48	; 0x30
 8005af6:	2a09      	cmp	r2, #9
 8005af8:	d94e      	bls.n	8005b98 <_svfiprintf_r+0x17c>
 8005afa:	2900      	cmp	r1, #0
 8005afc:	d111      	bne.n	8005b22 <_svfiprintf_r+0x106>
 8005afe:	e017      	b.n	8005b30 <_svfiprintf_r+0x114>
 8005b00:	3501      	adds	r5, #1
 8005b02:	e7af      	b.n	8005a64 <_svfiprintf_r+0x48>
 8005b04:	9b05      	ldr	r3, [sp, #20]
 8005b06:	6822      	ldr	r2, [r4, #0]
 8005b08:	1ac0      	subs	r0, r0, r3
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4083      	lsls	r3, r0
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	002e      	movs	r6, r5
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	e7cc      	b.n	8005ab0 <_svfiprintf_r+0x94>
 8005b16:	9b07      	ldr	r3, [sp, #28]
 8005b18:	1d19      	adds	r1, r3, #4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	9107      	str	r1, [sp, #28]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	db01      	blt.n	8005b26 <_svfiprintf_r+0x10a>
 8005b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b24:	e004      	b.n	8005b30 <_svfiprintf_r+0x114>
 8005b26:	425b      	negs	r3, r3
 8005b28:	60e3      	str	r3, [r4, #12]
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	6023      	str	r3, [r4, #0]
 8005b30:	782b      	ldrb	r3, [r5, #0]
 8005b32:	2b2e      	cmp	r3, #46	; 0x2e
 8005b34:	d10a      	bne.n	8005b4c <_svfiprintf_r+0x130>
 8005b36:	786b      	ldrb	r3, [r5, #1]
 8005b38:	2b2a      	cmp	r3, #42	; 0x2a
 8005b3a:	d135      	bne.n	8005ba8 <_svfiprintf_r+0x18c>
 8005b3c:	9b07      	ldr	r3, [sp, #28]
 8005b3e:	3502      	adds	r5, #2
 8005b40:	1d1a      	adds	r2, r3, #4
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	9207      	str	r2, [sp, #28]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	db2b      	blt.n	8005ba2 <_svfiprintf_r+0x186>
 8005b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b4c:	4e2f      	ldr	r6, [pc, #188]	; (8005c0c <_svfiprintf_r+0x1f0>)
 8005b4e:	2203      	movs	r2, #3
 8005b50:	0030      	movs	r0, r6
 8005b52:	7829      	ldrb	r1, [r5, #0]
 8005b54:	f000 fa08 	bl	8005f68 <memchr>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	d006      	beq.n	8005b6a <_svfiprintf_r+0x14e>
 8005b5c:	2340      	movs	r3, #64	; 0x40
 8005b5e:	1b80      	subs	r0, r0, r6
 8005b60:	4083      	lsls	r3, r0
 8005b62:	6822      	ldr	r2, [r4, #0]
 8005b64:	3501      	adds	r5, #1
 8005b66:	4313      	orrs	r3, r2
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	7829      	ldrb	r1, [r5, #0]
 8005b6c:	2206      	movs	r2, #6
 8005b6e:	4828      	ldr	r0, [pc, #160]	; (8005c10 <_svfiprintf_r+0x1f4>)
 8005b70:	1c6e      	adds	r6, r5, #1
 8005b72:	7621      	strb	r1, [r4, #24]
 8005b74:	f000 f9f8 	bl	8005f68 <memchr>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	d03c      	beq.n	8005bf6 <_svfiprintf_r+0x1da>
 8005b7c:	4b25      	ldr	r3, [pc, #148]	; (8005c14 <_svfiprintf_r+0x1f8>)
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d125      	bne.n	8005bce <_svfiprintf_r+0x1b2>
 8005b82:	2207      	movs	r2, #7
 8005b84:	9b07      	ldr	r3, [sp, #28]
 8005b86:	3307      	adds	r3, #7
 8005b88:	4393      	bics	r3, r2
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	9307      	str	r3, [sp, #28]
 8005b8e:	6963      	ldr	r3, [r4, #20]
 8005b90:	9a04      	ldr	r2, [sp, #16]
 8005b92:	189b      	adds	r3, r3, r2
 8005b94:	6163      	str	r3, [r4, #20]
 8005b96:	e764      	b.n	8005a62 <_svfiprintf_r+0x46>
 8005b98:	4343      	muls	r3, r0
 8005b9a:	0035      	movs	r5, r6
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	189b      	adds	r3, r3, r2
 8005ba0:	e7a6      	b.n	8005af0 <_svfiprintf_r+0xd4>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	425b      	negs	r3, r3
 8005ba6:	e7d0      	b.n	8005b4a <_svfiprintf_r+0x12e>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	200a      	movs	r0, #10
 8005bac:	001a      	movs	r2, r3
 8005bae:	3501      	adds	r5, #1
 8005bb0:	6063      	str	r3, [r4, #4]
 8005bb2:	7829      	ldrb	r1, [r5, #0]
 8005bb4:	1c6e      	adds	r6, r5, #1
 8005bb6:	3930      	subs	r1, #48	; 0x30
 8005bb8:	2909      	cmp	r1, #9
 8005bba:	d903      	bls.n	8005bc4 <_svfiprintf_r+0x1a8>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0c5      	beq.n	8005b4c <_svfiprintf_r+0x130>
 8005bc0:	9209      	str	r2, [sp, #36]	; 0x24
 8005bc2:	e7c3      	b.n	8005b4c <_svfiprintf_r+0x130>
 8005bc4:	4342      	muls	r2, r0
 8005bc6:	0035      	movs	r5, r6
 8005bc8:	2301      	movs	r3, #1
 8005bca:	1852      	adds	r2, r2, r1
 8005bcc:	e7f1      	b.n	8005bb2 <_svfiprintf_r+0x196>
 8005bce:	aa07      	add	r2, sp, #28
 8005bd0:	9200      	str	r2, [sp, #0]
 8005bd2:	0021      	movs	r1, r4
 8005bd4:	003a      	movs	r2, r7
 8005bd6:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <_svfiprintf_r+0x1fc>)
 8005bd8:	9803      	ldr	r0, [sp, #12]
 8005bda:	e000      	b.n	8005bde <_svfiprintf_r+0x1c2>
 8005bdc:	bf00      	nop
 8005bde:	9004      	str	r0, [sp, #16]
 8005be0:	9b04      	ldr	r3, [sp, #16]
 8005be2:	3301      	adds	r3, #1
 8005be4:	d1d3      	bne.n	8005b8e <_svfiprintf_r+0x172>
 8005be6:	89bb      	ldrh	r3, [r7, #12]
 8005be8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005bea:	065b      	lsls	r3, r3, #25
 8005bec:	d400      	bmi.n	8005bf0 <_svfiprintf_r+0x1d4>
 8005bee:	e72c      	b.n	8005a4a <_svfiprintf_r+0x2e>
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	4240      	negs	r0, r0
 8005bf4:	e729      	b.n	8005a4a <_svfiprintf_r+0x2e>
 8005bf6:	aa07      	add	r2, sp, #28
 8005bf8:	9200      	str	r2, [sp, #0]
 8005bfa:	0021      	movs	r1, r4
 8005bfc:	003a      	movs	r2, r7
 8005bfe:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <_svfiprintf_r+0x1fc>)
 8005c00:	9803      	ldr	r0, [sp, #12]
 8005c02:	f000 f87b 	bl	8005cfc <_printf_i>
 8005c06:	e7ea      	b.n	8005bde <_svfiprintf_r+0x1c2>
 8005c08:	08006130 	.word	0x08006130
 8005c0c:	08006136 	.word	0x08006136
 8005c10:	0800613a 	.word	0x0800613a
 8005c14:	00000000 	.word	0x00000000
 8005c18:	08005959 	.word	0x08005959

08005c1c <_printf_common>:
 8005c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c1e:	0016      	movs	r6, r2
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	688a      	ldr	r2, [r1, #8]
 8005c24:	690b      	ldr	r3, [r1, #16]
 8005c26:	000c      	movs	r4, r1
 8005c28:	9000      	str	r0, [sp, #0]
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	da00      	bge.n	8005c30 <_printf_common+0x14>
 8005c2e:	0013      	movs	r3, r2
 8005c30:	0022      	movs	r2, r4
 8005c32:	6033      	str	r3, [r6, #0]
 8005c34:	3243      	adds	r2, #67	; 0x43
 8005c36:	7812      	ldrb	r2, [r2, #0]
 8005c38:	2a00      	cmp	r2, #0
 8005c3a:	d001      	beq.n	8005c40 <_printf_common+0x24>
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	6033      	str	r3, [r6, #0]
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	069b      	lsls	r3, r3, #26
 8005c44:	d502      	bpl.n	8005c4c <_printf_common+0x30>
 8005c46:	6833      	ldr	r3, [r6, #0]
 8005c48:	3302      	adds	r3, #2
 8005c4a:	6033      	str	r3, [r6, #0]
 8005c4c:	6822      	ldr	r2, [r4, #0]
 8005c4e:	2306      	movs	r3, #6
 8005c50:	0015      	movs	r5, r2
 8005c52:	401d      	ands	r5, r3
 8005c54:	421a      	tst	r2, r3
 8005c56:	d027      	beq.n	8005ca8 <_printf_common+0x8c>
 8005c58:	0023      	movs	r3, r4
 8005c5a:	3343      	adds	r3, #67	; 0x43
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	1e5a      	subs	r2, r3, #1
 8005c60:	4193      	sbcs	r3, r2
 8005c62:	6822      	ldr	r2, [r4, #0]
 8005c64:	0692      	lsls	r2, r2, #26
 8005c66:	d430      	bmi.n	8005cca <_printf_common+0xae>
 8005c68:	0022      	movs	r2, r4
 8005c6a:	9901      	ldr	r1, [sp, #4]
 8005c6c:	9800      	ldr	r0, [sp, #0]
 8005c6e:	9d08      	ldr	r5, [sp, #32]
 8005c70:	3243      	adds	r2, #67	; 0x43
 8005c72:	47a8      	blx	r5
 8005c74:	3001      	adds	r0, #1
 8005c76:	d025      	beq.n	8005cc4 <_printf_common+0xa8>
 8005c78:	2206      	movs	r2, #6
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	2500      	movs	r5, #0
 8005c7e:	4013      	ands	r3, r2
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d105      	bne.n	8005c90 <_printf_common+0x74>
 8005c84:	6833      	ldr	r3, [r6, #0]
 8005c86:	68e5      	ldr	r5, [r4, #12]
 8005c88:	1aed      	subs	r5, r5, r3
 8005c8a:	43eb      	mvns	r3, r5
 8005c8c:	17db      	asrs	r3, r3, #31
 8005c8e:	401d      	ands	r5, r3
 8005c90:	68a3      	ldr	r3, [r4, #8]
 8005c92:	6922      	ldr	r2, [r4, #16]
 8005c94:	4293      	cmp	r3, r2
 8005c96:	dd01      	ble.n	8005c9c <_printf_common+0x80>
 8005c98:	1a9b      	subs	r3, r3, r2
 8005c9a:	18ed      	adds	r5, r5, r3
 8005c9c:	2600      	movs	r6, #0
 8005c9e:	42b5      	cmp	r5, r6
 8005ca0:	d120      	bne.n	8005ce4 <_printf_common+0xc8>
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	e010      	b.n	8005cc8 <_printf_common+0xac>
 8005ca6:	3501      	adds	r5, #1
 8005ca8:	68e3      	ldr	r3, [r4, #12]
 8005caa:	6832      	ldr	r2, [r6, #0]
 8005cac:	1a9b      	subs	r3, r3, r2
 8005cae:	42ab      	cmp	r3, r5
 8005cb0:	ddd2      	ble.n	8005c58 <_printf_common+0x3c>
 8005cb2:	0022      	movs	r2, r4
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	9901      	ldr	r1, [sp, #4]
 8005cb8:	9800      	ldr	r0, [sp, #0]
 8005cba:	9f08      	ldr	r7, [sp, #32]
 8005cbc:	3219      	adds	r2, #25
 8005cbe:	47b8      	blx	r7
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d1f0      	bne.n	8005ca6 <_printf_common+0x8a>
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	4240      	negs	r0, r0
 8005cc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cca:	2030      	movs	r0, #48	; 0x30
 8005ccc:	18e1      	adds	r1, r4, r3
 8005cce:	3143      	adds	r1, #67	; 0x43
 8005cd0:	7008      	strb	r0, [r1, #0]
 8005cd2:	0021      	movs	r1, r4
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	3145      	adds	r1, #69	; 0x45
 8005cd8:	7809      	ldrb	r1, [r1, #0]
 8005cda:	18a2      	adds	r2, r4, r2
 8005cdc:	3243      	adds	r2, #67	; 0x43
 8005cde:	3302      	adds	r3, #2
 8005ce0:	7011      	strb	r1, [r2, #0]
 8005ce2:	e7c1      	b.n	8005c68 <_printf_common+0x4c>
 8005ce4:	0022      	movs	r2, r4
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	9901      	ldr	r1, [sp, #4]
 8005cea:	9800      	ldr	r0, [sp, #0]
 8005cec:	9f08      	ldr	r7, [sp, #32]
 8005cee:	321a      	adds	r2, #26
 8005cf0:	47b8      	blx	r7
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d0e6      	beq.n	8005cc4 <_printf_common+0xa8>
 8005cf6:	3601      	adds	r6, #1
 8005cf8:	e7d1      	b.n	8005c9e <_printf_common+0x82>
	...

08005cfc <_printf_i>:
 8005cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cfe:	b08b      	sub	sp, #44	; 0x2c
 8005d00:	9206      	str	r2, [sp, #24]
 8005d02:	000a      	movs	r2, r1
 8005d04:	3243      	adds	r2, #67	; 0x43
 8005d06:	9307      	str	r3, [sp, #28]
 8005d08:	9005      	str	r0, [sp, #20]
 8005d0a:	9204      	str	r2, [sp, #16]
 8005d0c:	7e0a      	ldrb	r2, [r1, #24]
 8005d0e:	000c      	movs	r4, r1
 8005d10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d12:	2a78      	cmp	r2, #120	; 0x78
 8005d14:	d809      	bhi.n	8005d2a <_printf_i+0x2e>
 8005d16:	2a62      	cmp	r2, #98	; 0x62
 8005d18:	d80b      	bhi.n	8005d32 <_printf_i+0x36>
 8005d1a:	2a00      	cmp	r2, #0
 8005d1c:	d100      	bne.n	8005d20 <_printf_i+0x24>
 8005d1e:	e0be      	b.n	8005e9e <_printf_i+0x1a2>
 8005d20:	497c      	ldr	r1, [pc, #496]	; (8005f14 <_printf_i+0x218>)
 8005d22:	9103      	str	r1, [sp, #12]
 8005d24:	2a58      	cmp	r2, #88	; 0x58
 8005d26:	d100      	bne.n	8005d2a <_printf_i+0x2e>
 8005d28:	e093      	b.n	8005e52 <_printf_i+0x156>
 8005d2a:	0026      	movs	r6, r4
 8005d2c:	3642      	adds	r6, #66	; 0x42
 8005d2e:	7032      	strb	r2, [r6, #0]
 8005d30:	e022      	b.n	8005d78 <_printf_i+0x7c>
 8005d32:	0010      	movs	r0, r2
 8005d34:	3863      	subs	r0, #99	; 0x63
 8005d36:	2815      	cmp	r0, #21
 8005d38:	d8f7      	bhi.n	8005d2a <_printf_i+0x2e>
 8005d3a:	f7fa f9ed 	bl	8000118 <__gnu_thumb1_case_shi>
 8005d3e:	0016      	.short	0x0016
 8005d40:	fff6001f 	.word	0xfff6001f
 8005d44:	fff6fff6 	.word	0xfff6fff6
 8005d48:	001ffff6 	.word	0x001ffff6
 8005d4c:	fff6fff6 	.word	0xfff6fff6
 8005d50:	fff6fff6 	.word	0xfff6fff6
 8005d54:	003600a3 	.word	0x003600a3
 8005d58:	fff60083 	.word	0xfff60083
 8005d5c:	00b4fff6 	.word	0x00b4fff6
 8005d60:	0036fff6 	.word	0x0036fff6
 8005d64:	fff6fff6 	.word	0xfff6fff6
 8005d68:	0087      	.short	0x0087
 8005d6a:	0026      	movs	r6, r4
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	3642      	adds	r6, #66	; 0x42
 8005d70:	1d11      	adds	r1, r2, #4
 8005d72:	6019      	str	r1, [r3, #0]
 8005d74:	6813      	ldr	r3, [r2, #0]
 8005d76:	7033      	strb	r3, [r6, #0]
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0a2      	b.n	8005ec2 <_printf_i+0x1c6>
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	6809      	ldr	r1, [r1, #0]
 8005d80:	1d02      	adds	r2, r0, #4
 8005d82:	060d      	lsls	r5, r1, #24
 8005d84:	d50b      	bpl.n	8005d9e <_printf_i+0xa2>
 8005d86:	6805      	ldr	r5, [r0, #0]
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	2d00      	cmp	r5, #0
 8005d8c:	da03      	bge.n	8005d96 <_printf_i+0x9a>
 8005d8e:	232d      	movs	r3, #45	; 0x2d
 8005d90:	9a04      	ldr	r2, [sp, #16]
 8005d92:	426d      	negs	r5, r5
 8005d94:	7013      	strb	r3, [r2, #0]
 8005d96:	4b5f      	ldr	r3, [pc, #380]	; (8005f14 <_printf_i+0x218>)
 8005d98:	270a      	movs	r7, #10
 8005d9a:	9303      	str	r3, [sp, #12]
 8005d9c:	e01b      	b.n	8005dd6 <_printf_i+0xda>
 8005d9e:	6805      	ldr	r5, [r0, #0]
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	0649      	lsls	r1, r1, #25
 8005da4:	d5f1      	bpl.n	8005d8a <_printf_i+0x8e>
 8005da6:	b22d      	sxth	r5, r5
 8005da8:	e7ef      	b.n	8005d8a <_printf_i+0x8e>
 8005daa:	680d      	ldr	r5, [r1, #0]
 8005dac:	6819      	ldr	r1, [r3, #0]
 8005dae:	1d08      	adds	r0, r1, #4
 8005db0:	6018      	str	r0, [r3, #0]
 8005db2:	062e      	lsls	r6, r5, #24
 8005db4:	d501      	bpl.n	8005dba <_printf_i+0xbe>
 8005db6:	680d      	ldr	r5, [r1, #0]
 8005db8:	e003      	b.n	8005dc2 <_printf_i+0xc6>
 8005dba:	066d      	lsls	r5, r5, #25
 8005dbc:	d5fb      	bpl.n	8005db6 <_printf_i+0xba>
 8005dbe:	680d      	ldr	r5, [r1, #0]
 8005dc0:	b2ad      	uxth	r5, r5
 8005dc2:	4b54      	ldr	r3, [pc, #336]	; (8005f14 <_printf_i+0x218>)
 8005dc4:	2708      	movs	r7, #8
 8005dc6:	9303      	str	r3, [sp, #12]
 8005dc8:	2a6f      	cmp	r2, #111	; 0x6f
 8005dca:	d000      	beq.n	8005dce <_printf_i+0xd2>
 8005dcc:	3702      	adds	r7, #2
 8005dce:	0023      	movs	r3, r4
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	3343      	adds	r3, #67	; 0x43
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	6863      	ldr	r3, [r4, #4]
 8005dd8:	60a3      	str	r3, [r4, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	db03      	blt.n	8005de6 <_printf_i+0xea>
 8005dde:	2104      	movs	r1, #4
 8005de0:	6822      	ldr	r2, [r4, #0]
 8005de2:	438a      	bics	r2, r1
 8005de4:	6022      	str	r2, [r4, #0]
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	d102      	bne.n	8005df0 <_printf_i+0xf4>
 8005dea:	9e04      	ldr	r6, [sp, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00c      	beq.n	8005e0a <_printf_i+0x10e>
 8005df0:	9e04      	ldr	r6, [sp, #16]
 8005df2:	0028      	movs	r0, r5
 8005df4:	0039      	movs	r1, r7
 8005df6:	f7fa fa1f 	bl	8000238 <__aeabi_uidivmod>
 8005dfa:	9b03      	ldr	r3, [sp, #12]
 8005dfc:	3e01      	subs	r6, #1
 8005dfe:	5c5b      	ldrb	r3, [r3, r1]
 8005e00:	7033      	strb	r3, [r6, #0]
 8005e02:	002b      	movs	r3, r5
 8005e04:	0005      	movs	r5, r0
 8005e06:	429f      	cmp	r7, r3
 8005e08:	d9f3      	bls.n	8005df2 <_printf_i+0xf6>
 8005e0a:	2f08      	cmp	r7, #8
 8005e0c:	d109      	bne.n	8005e22 <_printf_i+0x126>
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	07db      	lsls	r3, r3, #31
 8005e12:	d506      	bpl.n	8005e22 <_printf_i+0x126>
 8005e14:	6862      	ldr	r2, [r4, #4]
 8005e16:	6923      	ldr	r3, [r4, #16]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	dc02      	bgt.n	8005e22 <_printf_i+0x126>
 8005e1c:	2330      	movs	r3, #48	; 0x30
 8005e1e:	3e01      	subs	r6, #1
 8005e20:	7033      	strb	r3, [r6, #0]
 8005e22:	9b04      	ldr	r3, [sp, #16]
 8005e24:	1b9b      	subs	r3, r3, r6
 8005e26:	6123      	str	r3, [r4, #16]
 8005e28:	9b07      	ldr	r3, [sp, #28]
 8005e2a:	0021      	movs	r1, r4
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	9805      	ldr	r0, [sp, #20]
 8005e30:	9b06      	ldr	r3, [sp, #24]
 8005e32:	aa09      	add	r2, sp, #36	; 0x24
 8005e34:	f7ff fef2 	bl	8005c1c <_printf_common>
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d147      	bne.n	8005ecc <_printf_i+0x1d0>
 8005e3c:	2001      	movs	r0, #1
 8005e3e:	4240      	negs	r0, r0
 8005e40:	b00b      	add	sp, #44	; 0x2c
 8005e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e44:	2220      	movs	r2, #32
 8005e46:	6809      	ldr	r1, [r1, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	6022      	str	r2, [r4, #0]
 8005e4c:	2278      	movs	r2, #120	; 0x78
 8005e4e:	4932      	ldr	r1, [pc, #200]	; (8005f18 <_printf_i+0x21c>)
 8005e50:	9103      	str	r1, [sp, #12]
 8005e52:	0021      	movs	r1, r4
 8005e54:	3145      	adds	r1, #69	; 0x45
 8005e56:	700a      	strb	r2, [r1, #0]
 8005e58:	6819      	ldr	r1, [r3, #0]
 8005e5a:	6822      	ldr	r2, [r4, #0]
 8005e5c:	c920      	ldmia	r1!, {r5}
 8005e5e:	0610      	lsls	r0, r2, #24
 8005e60:	d402      	bmi.n	8005e68 <_printf_i+0x16c>
 8005e62:	0650      	lsls	r0, r2, #25
 8005e64:	d500      	bpl.n	8005e68 <_printf_i+0x16c>
 8005e66:	b2ad      	uxth	r5, r5
 8005e68:	6019      	str	r1, [r3, #0]
 8005e6a:	07d3      	lsls	r3, r2, #31
 8005e6c:	d502      	bpl.n	8005e74 <_printf_i+0x178>
 8005e6e:	2320      	movs	r3, #32
 8005e70:	4313      	orrs	r3, r2
 8005e72:	6023      	str	r3, [r4, #0]
 8005e74:	2710      	movs	r7, #16
 8005e76:	2d00      	cmp	r5, #0
 8005e78:	d1a9      	bne.n	8005dce <_printf_i+0xd2>
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	4393      	bics	r3, r2
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	e7a4      	b.n	8005dce <_printf_i+0xd2>
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	680d      	ldr	r5, [r1, #0]
 8005e88:	1d10      	adds	r0, r2, #4
 8005e8a:	6949      	ldr	r1, [r1, #20]
 8005e8c:	6018      	str	r0, [r3, #0]
 8005e8e:	6813      	ldr	r3, [r2, #0]
 8005e90:	062e      	lsls	r6, r5, #24
 8005e92:	d501      	bpl.n	8005e98 <_printf_i+0x19c>
 8005e94:	6019      	str	r1, [r3, #0]
 8005e96:	e002      	b.n	8005e9e <_printf_i+0x1a2>
 8005e98:	066d      	lsls	r5, r5, #25
 8005e9a:	d5fb      	bpl.n	8005e94 <_printf_i+0x198>
 8005e9c:	8019      	strh	r1, [r3, #0]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	9e04      	ldr	r6, [sp, #16]
 8005ea2:	6123      	str	r3, [r4, #16]
 8005ea4:	e7c0      	b.n	8005e28 <_printf_i+0x12c>
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	1d11      	adds	r1, r2, #4
 8005eaa:	6019      	str	r1, [r3, #0]
 8005eac:	6816      	ldr	r6, [r2, #0]
 8005eae:	2100      	movs	r1, #0
 8005eb0:	0030      	movs	r0, r6
 8005eb2:	6862      	ldr	r2, [r4, #4]
 8005eb4:	f000 f858 	bl	8005f68 <memchr>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d001      	beq.n	8005ec0 <_printf_i+0x1c4>
 8005ebc:	1b80      	subs	r0, r0, r6
 8005ebe:	6060      	str	r0, [r4, #4]
 8005ec0:	6863      	ldr	r3, [r4, #4]
 8005ec2:	6123      	str	r3, [r4, #16]
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	9a04      	ldr	r2, [sp, #16]
 8005ec8:	7013      	strb	r3, [r2, #0]
 8005eca:	e7ad      	b.n	8005e28 <_printf_i+0x12c>
 8005ecc:	0032      	movs	r2, r6
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	9906      	ldr	r1, [sp, #24]
 8005ed2:	9805      	ldr	r0, [sp, #20]
 8005ed4:	9d07      	ldr	r5, [sp, #28]
 8005ed6:	47a8      	blx	r5
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d0af      	beq.n	8005e3c <_printf_i+0x140>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	079b      	lsls	r3, r3, #30
 8005ee0:	d415      	bmi.n	8005f0e <_printf_i+0x212>
 8005ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee4:	68e0      	ldr	r0, [r4, #12]
 8005ee6:	4298      	cmp	r0, r3
 8005ee8:	daaa      	bge.n	8005e40 <_printf_i+0x144>
 8005eea:	0018      	movs	r0, r3
 8005eec:	e7a8      	b.n	8005e40 <_printf_i+0x144>
 8005eee:	0022      	movs	r2, r4
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	9906      	ldr	r1, [sp, #24]
 8005ef4:	9805      	ldr	r0, [sp, #20]
 8005ef6:	9e07      	ldr	r6, [sp, #28]
 8005ef8:	3219      	adds	r2, #25
 8005efa:	47b0      	blx	r6
 8005efc:	3001      	adds	r0, #1
 8005efe:	d09d      	beq.n	8005e3c <_printf_i+0x140>
 8005f00:	3501      	adds	r5, #1
 8005f02:	68e3      	ldr	r3, [r4, #12]
 8005f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f06:	1a9b      	subs	r3, r3, r2
 8005f08:	42ab      	cmp	r3, r5
 8005f0a:	dcf0      	bgt.n	8005eee <_printf_i+0x1f2>
 8005f0c:	e7e9      	b.n	8005ee2 <_printf_i+0x1e6>
 8005f0e:	2500      	movs	r5, #0
 8005f10:	e7f7      	b.n	8005f02 <_printf_i+0x206>
 8005f12:	46c0      	nop			; (mov r8, r8)
 8005f14:	08006141 	.word	0x08006141
 8005f18:	08006152 	.word	0x08006152

08005f1c <memmove>:
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	4288      	cmp	r0, r1
 8005f20:	d902      	bls.n	8005f28 <memmove+0xc>
 8005f22:	188b      	adds	r3, r1, r2
 8005f24:	4298      	cmp	r0, r3
 8005f26:	d303      	bcc.n	8005f30 <memmove+0x14>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e007      	b.n	8005f3c <memmove+0x20>
 8005f2c:	5c8b      	ldrb	r3, [r1, r2]
 8005f2e:	5483      	strb	r3, [r0, r2]
 8005f30:	3a01      	subs	r2, #1
 8005f32:	d2fb      	bcs.n	8005f2c <memmove+0x10>
 8005f34:	bd10      	pop	{r4, pc}
 8005f36:	5ccc      	ldrb	r4, [r1, r3]
 8005f38:	54c4      	strb	r4, [r0, r3]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d1fa      	bne.n	8005f36 <memmove+0x1a>
 8005f40:	e7f8      	b.n	8005f34 <memmove+0x18>
	...

08005f44 <_sbrk_r>:
 8005f44:	2300      	movs	r3, #0
 8005f46:	b570      	push	{r4, r5, r6, lr}
 8005f48:	4d06      	ldr	r5, [pc, #24]	; (8005f64 <_sbrk_r+0x20>)
 8005f4a:	0004      	movs	r4, r0
 8005f4c:	0008      	movs	r0, r1
 8005f4e:	602b      	str	r3, [r5, #0]
 8005f50:	f7fb fb58 	bl	8001604 <_sbrk>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d103      	bne.n	8005f60 <_sbrk_r+0x1c>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d000      	beq.n	8005f60 <_sbrk_r+0x1c>
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	bd70      	pop	{r4, r5, r6, pc}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	200003b0 	.word	0x200003b0

08005f68 <memchr>:
 8005f68:	b2c9      	uxtb	r1, r1
 8005f6a:	1882      	adds	r2, r0, r2
 8005f6c:	4290      	cmp	r0, r2
 8005f6e:	d101      	bne.n	8005f74 <memchr+0xc>
 8005f70:	2000      	movs	r0, #0
 8005f72:	4770      	bx	lr
 8005f74:	7803      	ldrb	r3, [r0, #0]
 8005f76:	428b      	cmp	r3, r1
 8005f78:	d0fb      	beq.n	8005f72 <memchr+0xa>
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	e7f6      	b.n	8005f6c <memchr+0x4>

08005f7e <memcpy>:
 8005f7e:	2300      	movs	r3, #0
 8005f80:	b510      	push	{r4, lr}
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d100      	bne.n	8005f88 <memcpy+0xa>
 8005f86:	bd10      	pop	{r4, pc}
 8005f88:	5ccc      	ldrb	r4, [r1, r3]
 8005f8a:	54c4      	strb	r4, [r0, r3]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	e7f8      	b.n	8005f82 <memcpy+0x4>

08005f90 <_realloc_r>:
 8005f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f92:	0007      	movs	r7, r0
 8005f94:	000e      	movs	r6, r1
 8005f96:	0014      	movs	r4, r2
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	d105      	bne.n	8005fa8 <_realloc_r+0x18>
 8005f9c:	0011      	movs	r1, r2
 8005f9e:	f7ff fc49 	bl	8005834 <_malloc_r>
 8005fa2:	0005      	movs	r5, r0
 8005fa4:	0028      	movs	r0, r5
 8005fa6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005fa8:	2a00      	cmp	r2, #0
 8005faa:	d103      	bne.n	8005fb4 <_realloc_r+0x24>
 8005fac:	f7ff fbd6 	bl	800575c <_free_r>
 8005fb0:	0025      	movs	r5, r4
 8005fb2:	e7f7      	b.n	8005fa4 <_realloc_r+0x14>
 8005fb4:	f000 f81b 	bl	8005fee <_malloc_usable_size_r>
 8005fb8:	9001      	str	r0, [sp, #4]
 8005fba:	4284      	cmp	r4, r0
 8005fbc:	d803      	bhi.n	8005fc6 <_realloc_r+0x36>
 8005fbe:	0035      	movs	r5, r6
 8005fc0:	0843      	lsrs	r3, r0, #1
 8005fc2:	42a3      	cmp	r3, r4
 8005fc4:	d3ee      	bcc.n	8005fa4 <_realloc_r+0x14>
 8005fc6:	0021      	movs	r1, r4
 8005fc8:	0038      	movs	r0, r7
 8005fca:	f7ff fc33 	bl	8005834 <_malloc_r>
 8005fce:	1e05      	subs	r5, r0, #0
 8005fd0:	d0e8      	beq.n	8005fa4 <_realloc_r+0x14>
 8005fd2:	9b01      	ldr	r3, [sp, #4]
 8005fd4:	0022      	movs	r2, r4
 8005fd6:	429c      	cmp	r4, r3
 8005fd8:	d900      	bls.n	8005fdc <_realloc_r+0x4c>
 8005fda:	001a      	movs	r2, r3
 8005fdc:	0031      	movs	r1, r6
 8005fde:	0028      	movs	r0, r5
 8005fe0:	f7ff ffcd 	bl	8005f7e <memcpy>
 8005fe4:	0031      	movs	r1, r6
 8005fe6:	0038      	movs	r0, r7
 8005fe8:	f7ff fbb8 	bl	800575c <_free_r>
 8005fec:	e7da      	b.n	8005fa4 <_realloc_r+0x14>

08005fee <_malloc_usable_size_r>:
 8005fee:	1f0b      	subs	r3, r1, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	1f18      	subs	r0, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	da01      	bge.n	8005ffc <_malloc_usable_size_r+0xe>
 8005ff8:	580b      	ldr	r3, [r1, r0]
 8005ffa:	18c0      	adds	r0, r0, r3
 8005ffc:	4770      	bx	lr
	...

08006000 <_init>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006006:	bc08      	pop	{r3}
 8006008:	469e      	mov	lr, r3
 800600a:	4770      	bx	lr

0800600c <_fini>:
 800600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006012:	bc08      	pop	{r3}
 8006014:	469e      	mov	lr, r3
 8006016:	4770      	bx	lr
